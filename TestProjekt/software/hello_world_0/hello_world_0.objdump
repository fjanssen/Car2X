
hello_world_0.elf:     file format elf32-littlenios2
hello_world_0.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040020

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00001584 memsz 0x00001584 flags r-x
    LOAD off    0x000025a4 vaddr 0x000415a4 paddr 0x00041878 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00002b4c vaddr 0x00041b4c paddr 0x00041b4c align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00001540  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  00041560  00041560  00002560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  000415a4  00041878  000025a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00041b4c  00041b4c  00002b4c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00002878  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003c8  00000000  00000000  000028a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000531  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000072d0  00000000  00000000  00003199  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001902  00000000  00000000  0000a469  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004a6a  00000000  00000000  0000bd6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000064c  00000000  00000000  000107d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000099c  00000000  00000000  00010e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000ab2  00000000  00000000  000117c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000030  00000000  00000000  00012274  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  000122a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0001370d  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00013710  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00013713  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   00000009  00000000  00000000  00013714  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    00000009  00000000  00000000  0001371d  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   00000009  00000000  00000000  00013726  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000000c  00000000  00000000  0001372f  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 0000001f  00000000  00000000  0001373b  2**0
                  CONTENTS, READONLY
 24 .jdi          00004829  00000000  00000000  0001375a  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00026174  00000000  00000000  00017f83  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .text	00000000 .text
00041560 l    d  .rodata	00000000 .rodata
000415a4 l    d  .rwdata	00000000 .rwdata
00041b4c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00040068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000415a4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00040318 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00040500 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00041684 l     O .rwdata	0000002c jtag_uart
000405c4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00040950 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000409f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00040ad4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00040b64 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00040ca0 l     F .text	000000dc alt_file_locked
00040f04 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0004133c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000414fc l     F .text	00000040 alt_sim_halt
00040384 g     F .text	0000005c alt_main
000400a0 g     F .text	00000090 _puts_r
00041878 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00041b4c g     O .bss	00000004 errno
00041b54 g     O .bss	00000004 alt_argv
00049858 g       *ABS*	00000000 _gp
000416d8 g     O .rwdata	00000180 alt_fd_list
00040fe4 g     F .text	00000094 alt_find_dev
00040c28 g     F .text	00000078 alt_io_redirect
00040130 g     F .text	00000014 puts
00040fc4 g     F .text	00000020 altera_nios2_irq_init
000406ac g     F .text	00000104 altera_avalon_jtag_uart_read
00041250 g     F .text	00000090 alt_icache_flush
00041870 g     O .rwdata	00000004 alt_max_fd
0004185c g     O .rwdata	00000004 _global_impure_ptr
00041b5c g       *ABS*	00000000 __bss_end
000416b0 g     O .rwdata	00000028 alt_dev_null
000409b0 g     F .text	00000044 alt_dcache_flush_all
00041878 g       *ABS*	00000000 __ram_rwdata_end
00041868 g     O .rwdata	00000008 alt_dev_list
000403e0 g     F .text	00000120 write
000415a4 g       *ABS*	00000000 __ram_rodata_end
00041b5c g       *ABS*	00000000 end
00072000 g       *ABS*	00000000 __alt_stack_pointer
000407b0 g     F .text	000000a4 altera_avalon_jtag_uart_write
00041340 g     F .text	000001bc __call_exitprocs
00040020 g     F .text	0000004c _start
00040594 g     F .text	00000030 alt_sys_init
000415a4 g       *ABS*	00000000 __ram_rwdata_start
00041560 g       *ABS*	00000000 __ram_rodata_start
000405fc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00041198 g     F .text	000000b8 alt_get_fd
00041300 g     F .text	0000003c memcmp
00041b5c g       *ABS*	00000000 __alt_stack_base
00041078 g     F .text	00000120 alt_find_file
00040a20 g     F .text	000000b4 alt_dev_llist_insert
00040164 g     F .text	000000bc __sfvwrite_small_dev
00041b4c g       *ABS*	00000000 __bss_start
0004006c g     F .text	00000034 main
00041b58 g     O .bss	00000004 alt_envp
00040654 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00041874 g     O .rwdata	00000004 alt_errno
00041560 g       *ABS*	00000000 __flash_rodata_start
00040560 g     F .text	00000034 alt_irq_init
00040f64 g     F .text	00000060 alt_release_fd
00040220 g     F .text	00000078 _write_r
00041858 g     O .rwdata	00000004 _impure_ptr
00041b50 g     O .bss	00000004 alt_argc
00041860 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00041878 g       *ABS*	00000000 _edata
00041b5c g       *ABS*	00000000 _end
00040020 g       *ABS*	00000000 __ram_exceptions_end
000412e0 g     F .text	00000020 exit
00072000 g       *ABS*	00000000 __alt_data_end
0004153c g     F .text	00000020 _exit
00040144 g     F .text	00000020 strlen
00040d7c g     F .text	00000188 open
00040b34 g     F .text	00000030 alt_icache_flush_all
00040854 g     F .text	000000fc close
00040298 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08400814 	ori	at,at,32
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>

Disassembly of section .text:

00040020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40024:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   40028:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4002c:	00bffd16 	blt	zero,r2,40024 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40030:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40034:	dec80014 	ori	sp,sp,8192

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   40038:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   4003c:	d6a61614 	ori	gp,gp,39000
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40040:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40044:	1086d314 	ori	r2,r2,6988

    movhi r3, %hi(__bss_end)
   40048:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   4004c:	18c6d714 	ori	r3,r3,7004

    beq r2, r3, 1f
   40050:	10c00326 	beq	r2,r3,40060 <_start+0x40>

0:
    stw zero, (r2)
   40054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4005c:	10fffd36 	bltu	r2,r3,40054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40060:	00402980 	call	40298 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40064:	00403840 	call	40384 <alt_main>

00040068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40068:	003fff06 	br	40068 <alt_after_alt_main>

0004006c <main>:
 */

#include <stdio.h>

int main()
{
   4006c:	defffe04 	addi	sp,sp,-8
   40070:	dfc00115 	stw	ra,4(sp)
   40074:	df000015 	stw	fp,0(sp)
   40078:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   4007c:	01000134 	movhi	r4,4
   40080:	21055804 	addi	r4,r4,5472
   40084:	00401300 	call	40130 <puts>

  return 0;
   40088:	0005883a 	mov	r2,zero
}
   4008c:	e037883a 	mov	sp,fp
   40090:	dfc00117 	ldw	ra,4(sp)
   40094:	df000017 	ldw	fp,0(sp)
   40098:	dec00204 	addi	sp,sp,8
   4009c:	f800283a 	ret

000400a0 <_puts_r>:
   400a0:	defffd04 	addi	sp,sp,-12
   400a4:	dc000015 	stw	r16,0(sp)
   400a8:	2021883a 	mov	r16,r4
   400ac:	2809883a 	mov	r4,r5
   400b0:	dfc00215 	stw	ra,8(sp)
   400b4:	dc400115 	stw	r17,4(sp)
   400b8:	2823883a 	mov	r17,r5
   400bc:	00401440 	call	40144 <strlen>
   400c0:	80c00217 	ldw	r3,8(r16)
   400c4:	02000134 	movhi	r8,4
   400c8:	42005904 	addi	r8,r8,356
   400cc:	880d883a 	mov	r6,r17
   400d0:	100f883a 	mov	r7,r2
   400d4:	8009883a 	mov	r4,r16
   400d8:	180b883a 	mov	r5,r3
   400dc:	1a000115 	stw	r8,4(r3)
   400e0:	403ee83a 	callr	r8
   400e4:	047fffc4 	movi	r17,-1
   400e8:	8009883a 	mov	r4,r16
   400ec:	01800134 	movhi	r6,4
   400f0:	31855d04 	addi	r6,r6,5492
   400f4:	01c00044 	movi	r7,1
   400f8:	1440071e 	bne	r2,r17,40118 <_puts_r+0x78>
   400fc:	00ffffc4 	movi	r3,-1
   40100:	1805883a 	mov	r2,r3
   40104:	dfc00217 	ldw	ra,8(sp)
   40108:	dc400117 	ldw	r17,4(sp)
   4010c:	dc000017 	ldw	r16,0(sp)
   40110:	dec00304 	addi	sp,sp,12
   40114:	f800283a 	ret
   40118:	81400217 	ldw	r5,8(r16)
   4011c:	28c00117 	ldw	r3,4(r5)
   40120:	183ee83a 	callr	r3
   40124:	0007883a 	mov	r3,zero
   40128:	147ff51e 	bne	r2,r17,40100 <_puts_r+0x60>
   4012c:	003ff306 	br	400fc <_puts_r+0x5c>

00040130 <puts>:
   40130:	00800134 	movhi	r2,4
   40134:	10861604 	addi	r2,r2,6232
   40138:	200b883a 	mov	r5,r4
   4013c:	11000017 	ldw	r4,0(r2)
   40140:	00400a01 	jmpi	400a0 <_puts_r>

00040144 <strlen>:
   40144:	20800007 	ldb	r2,0(r4)
   40148:	10000526 	beq	r2,zero,40160 <strlen+0x1c>
   4014c:	2007883a 	mov	r3,r4
   40150:	18c00044 	addi	r3,r3,1
   40154:	18800007 	ldb	r2,0(r3)
   40158:	103ffd1e 	bne	r2,zero,40150 <strlen+0xc>
   4015c:	1905c83a 	sub	r2,r3,r4
   40160:	f800283a 	ret

00040164 <__sfvwrite_small_dev>:
   40164:	2880000b 	ldhu	r2,0(r5)
   40168:	defffa04 	addi	sp,sp,-24
   4016c:	dcc00315 	stw	r19,12(sp)
   40170:	1080020c 	andi	r2,r2,8
   40174:	dc800215 	stw	r18,8(sp)
   40178:	dc400115 	stw	r17,4(sp)
   4017c:	dfc00515 	stw	ra,20(sp)
   40180:	dd000415 	stw	r20,16(sp)
   40184:	dc000015 	stw	r16,0(sp)
   40188:	2825883a 	mov	r18,r5
   4018c:	2027883a 	mov	r19,r4
   40190:	3023883a 	mov	r17,r6
   40194:	10002026 	beq	r2,zero,40218 <__sfvwrite_small_dev+0xb4>
   40198:	2940008f 	ldh	r5,2(r5)
   4019c:	28000f16 	blt	r5,zero,401dc <__sfvwrite_small_dev+0x78>
   401a0:	01c01b0e 	bge	zero,r7,40210 <__sfvwrite_small_dev+0xac>
   401a4:	3821883a 	mov	r16,r7
   401a8:	05010004 	movi	r20,1024
   401ac:	00000206 	br	401b8 <__sfvwrite_small_dev+0x54>
   401b0:	0400170e 	bge	zero,r16,40210 <__sfvwrite_small_dev+0xac>
   401b4:	9140008f 	ldh	r5,2(r18)
   401b8:	880d883a 	mov	r6,r17
   401bc:	9809883a 	mov	r4,r19
   401c0:	800f883a 	mov	r7,r16
   401c4:	a400010e 	bge	r20,r16,401cc <__sfvwrite_small_dev+0x68>
   401c8:	01c10004 	movi	r7,1024
   401cc:	00402200 	call	40220 <_write_r>
   401d0:	88a3883a 	add	r17,r17,r2
   401d4:	80a1c83a 	sub	r16,r16,r2
   401d8:	00bff516 	blt	zero,r2,401b0 <__sfvwrite_small_dev+0x4c>
   401dc:	9080000b 	ldhu	r2,0(r18)
   401e0:	00ffffc4 	movi	r3,-1
   401e4:	10801014 	ori	r2,r2,64
   401e8:	9080000d 	sth	r2,0(r18)
   401ec:	1805883a 	mov	r2,r3
   401f0:	dfc00517 	ldw	ra,20(sp)
   401f4:	dd000417 	ldw	r20,16(sp)
   401f8:	dcc00317 	ldw	r19,12(sp)
   401fc:	dc800217 	ldw	r18,8(sp)
   40200:	dc400117 	ldw	r17,4(sp)
   40204:	dc000017 	ldw	r16,0(sp)
   40208:	dec00604 	addi	sp,sp,24
   4020c:	f800283a 	ret
   40210:	0007883a 	mov	r3,zero
   40214:	003ff506 	br	401ec <__sfvwrite_small_dev+0x88>
   40218:	00ffffc4 	movi	r3,-1
   4021c:	003ff306 	br	401ec <__sfvwrite_small_dev+0x88>

00040220 <_write_r>:
   40220:	defffd04 	addi	sp,sp,-12
   40224:	dc000015 	stw	r16,0(sp)
   40228:	04000134 	movhi	r16,4
   4022c:	8406d304 	addi	r16,r16,6988
   40230:	dc400115 	stw	r17,4(sp)
   40234:	80000015 	stw	zero,0(r16)
   40238:	2023883a 	mov	r17,r4
   4023c:	2809883a 	mov	r4,r5
   40240:	300b883a 	mov	r5,r6
   40244:	380d883a 	mov	r6,r7
   40248:	dfc00215 	stw	ra,8(sp)
   4024c:	00403e00 	call	403e0 <write>
   40250:	1007883a 	mov	r3,r2
   40254:	00bfffc4 	movi	r2,-1
   40258:	18800626 	beq	r3,r2,40274 <_write_r+0x54>
   4025c:	1805883a 	mov	r2,r3
   40260:	dfc00217 	ldw	ra,8(sp)
   40264:	dc400117 	ldw	r17,4(sp)
   40268:	dc000017 	ldw	r16,0(sp)
   4026c:	dec00304 	addi	sp,sp,12
   40270:	f800283a 	ret
   40274:	80800017 	ldw	r2,0(r16)
   40278:	103ff826 	beq	r2,zero,4025c <_write_r+0x3c>
   4027c:	88800015 	stw	r2,0(r17)
   40280:	1805883a 	mov	r2,r3
   40284:	dfc00217 	ldw	ra,8(sp)
   40288:	dc400117 	ldw	r17,4(sp)
   4028c:	dc000017 	ldw	r16,0(sp)
   40290:	dec00304 	addi	sp,sp,12
   40294:	f800283a 	ret

00040298 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   40298:	defffe04 	addi	sp,sp,-8
   4029c:	dfc00115 	stw	ra,4(sp)
   402a0:	df000015 	stw	fp,0(sp)
   402a4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   402a8:	01000134 	movhi	r4,4
   402ac:	21061e04 	addi	r4,r4,6264
   402b0:	01400134 	movhi	r5,4
   402b4:	29456904 	addi	r5,r5,5540
   402b8:	01800134 	movhi	r6,4
   402bc:	31861e04 	addi	r6,r6,6264
   402c0:	00403180 	call	40318 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   402c4:	01000134 	movhi	r4,4
   402c8:	21000804 	addi	r4,r4,32
   402cc:	01400134 	movhi	r5,4
   402d0:	29400804 	addi	r5,r5,32
   402d4:	01800134 	movhi	r6,4
   402d8:	31800804 	addi	r6,r6,32
   402dc:	00403180 	call	40318 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   402e0:	01000134 	movhi	r4,4
   402e4:	21055804 	addi	r4,r4,5472
   402e8:	01400134 	movhi	r5,4
   402ec:	29455804 	addi	r5,r5,5472
   402f0:	01800134 	movhi	r6,4
   402f4:	31856904 	addi	r6,r6,5540
   402f8:	00403180 	call	40318 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   402fc:	00409b00 	call	409b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   40300:	0040b340 	call	40b34 <alt_icache_flush_all>
}
   40304:	e037883a 	mov	sp,fp
   40308:	dfc00117 	ldw	ra,4(sp)
   4030c:	df000017 	ldw	fp,0(sp)
   40310:	dec00204 	addi	sp,sp,8
   40314:	f800283a 	ret

00040318 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   40318:	defffc04 	addi	sp,sp,-16
   4031c:	df000315 	stw	fp,12(sp)
   40320:	df000304 	addi	fp,sp,12
   40324:	e13ffd15 	stw	r4,-12(fp)
   40328:	e17ffe15 	stw	r5,-8(fp)
   4032c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   40330:	e0fffe17 	ldw	r3,-8(fp)
   40334:	e0bffd17 	ldw	r2,-12(fp)
   40338:	18800e26 	beq	r3,r2,40374 <alt_load_section+0x5c>
  {
    while( to != end )
   4033c:	00000a06 	br	40368 <alt_load_section+0x50>
    {
      *to++ = *from++;
   40340:	e0bffd17 	ldw	r2,-12(fp)
   40344:	10c00017 	ldw	r3,0(r2)
   40348:	e0bffe17 	ldw	r2,-8(fp)
   4034c:	10c00015 	stw	r3,0(r2)
   40350:	e0bffe17 	ldw	r2,-8(fp)
   40354:	10800104 	addi	r2,r2,4
   40358:	e0bffe15 	stw	r2,-8(fp)
   4035c:	e0bffd17 	ldw	r2,-12(fp)
   40360:	10800104 	addi	r2,r2,4
   40364:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   40368:	e0fffe17 	ldw	r3,-8(fp)
   4036c:	e0bfff17 	ldw	r2,-4(fp)
   40370:	18bff31e 	bne	r3,r2,40340 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   40374:	e037883a 	mov	sp,fp
   40378:	df000017 	ldw	fp,0(sp)
   4037c:	dec00104 	addi	sp,sp,4
   40380:	f800283a 	ret

00040384 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   40384:	defffd04 	addi	sp,sp,-12
   40388:	dfc00215 	stw	ra,8(sp)
   4038c:	df000115 	stw	fp,4(sp)
   40390:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   40394:	0009883a 	mov	r4,zero
   40398:	00405600 	call	40560 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4039c:	00405940 	call	40594 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   403a0:	01000134 	movhi	r4,4
   403a4:	21055e04 	addi	r4,r4,5496
   403a8:	01400134 	movhi	r5,4
   403ac:	29455e04 	addi	r5,r5,5496
   403b0:	01800134 	movhi	r6,4
   403b4:	31855e04 	addi	r6,r6,5496
   403b8:	0040c280 	call	40c28 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   403bc:	d120be17 	ldw	r4,-32008(gp)
   403c0:	d160bf17 	ldw	r5,-32004(gp)
   403c4:	d1a0c017 	ldw	r6,-32000(gp)
   403c8:	004006c0 	call	4006c <main>
   403cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   403d0:	01000044 	movi	r4,1
   403d4:	00408540 	call	40854 <close>
  exit (result);
   403d8:	e13fff17 	ldw	r4,-4(fp)
   403dc:	00412e00 	call	412e0 <exit>

000403e0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   403e0:	defff704 	addi	sp,sp,-36
   403e4:	dfc00815 	stw	ra,32(sp)
   403e8:	df000715 	stw	fp,28(sp)
   403ec:	df000704 	addi	fp,sp,28
   403f0:	e13ffb15 	stw	r4,-20(fp)
   403f4:	e17ffc15 	stw	r5,-16(fp)
   403f8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   403fc:	e0bffb17 	ldw	r2,-20(fp)
   40400:	1004803a 	cmplt	r2,r2,zero
   40404:	1000081e 	bne	r2,zero,40428 <write+0x48>
   40408:	e0bffb17 	ldw	r2,-20(fp)
   4040c:	10800324 	muli	r2,r2,12
   40410:	1007883a 	mov	r3,r2
   40414:	00800134 	movhi	r2,4
   40418:	1085b604 	addi	r2,r2,5848
   4041c:	1887883a 	add	r3,r3,r2
   40420:	e0ffff15 	stw	r3,-4(fp)
   40424:	00000106 	br	4042c <write+0x4c>
   40428:	e03fff15 	stw	zero,-4(fp)
   4042c:	e0bfff17 	ldw	r2,-4(fp)
   40430:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   40434:	e0bffa17 	ldw	r2,-24(fp)
   40438:	1005003a 	cmpeq	r2,r2,zero
   4043c:	1000241e 	bne	r2,zero,404d0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   40440:	e0bffa17 	ldw	r2,-24(fp)
   40444:	10800217 	ldw	r2,8(r2)
   40448:	108000cc 	andi	r2,r2,3
   4044c:	1005003a 	cmpeq	r2,r2,zero
   40450:	10001a1e 	bne	r2,zero,404bc <write+0xdc>
   40454:	e0bffa17 	ldw	r2,-24(fp)
   40458:	10800017 	ldw	r2,0(r2)
   4045c:	10800617 	ldw	r2,24(r2)
   40460:	1005003a 	cmpeq	r2,r2,zero
   40464:	1000151e 	bne	r2,zero,404bc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   40468:	e0bffa17 	ldw	r2,-24(fp)
   4046c:	10800017 	ldw	r2,0(r2)
   40470:	10800617 	ldw	r2,24(r2)
   40474:	e17ffc17 	ldw	r5,-16(fp)
   40478:	e1bffd17 	ldw	r6,-12(fp)
   4047c:	e13ffa17 	ldw	r4,-24(fp)
   40480:	103ee83a 	callr	r2
   40484:	e0bff915 	stw	r2,-28(fp)
   40488:	e0bff917 	ldw	r2,-28(fp)
   4048c:	1004403a 	cmpge	r2,r2,zero
   40490:	1000071e 	bne	r2,zero,404b0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   40494:	00405000 	call	40500 <alt_get_errno>
   40498:	e0fff917 	ldw	r3,-28(fp)
   4049c:	00c7c83a 	sub	r3,zero,r3
   404a0:	10c00015 	stw	r3,0(r2)
        return -1;
   404a4:	00bfffc4 	movi	r2,-1
   404a8:	e0bffe15 	stw	r2,-8(fp)
   404ac:	00000e06 	br	404e8 <write+0x108>
      }
      return rval;
   404b0:	e0bff917 	ldw	r2,-28(fp)
   404b4:	e0bffe15 	stw	r2,-8(fp)
   404b8:	00000b06 	br	404e8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   404bc:	00405000 	call	40500 <alt_get_errno>
   404c0:	1007883a 	mov	r3,r2
   404c4:	00800344 	movi	r2,13
   404c8:	18800015 	stw	r2,0(r3)
   404cc:	00000406 	br	404e0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   404d0:	00405000 	call	40500 <alt_get_errno>
   404d4:	1007883a 	mov	r3,r2
   404d8:	00801444 	movi	r2,81
   404dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   404e0:	00bfffc4 	movi	r2,-1
   404e4:	e0bffe15 	stw	r2,-8(fp)
   404e8:	e0bffe17 	ldw	r2,-8(fp)
}
   404ec:	e037883a 	mov	sp,fp
   404f0:	dfc00117 	ldw	ra,4(sp)
   404f4:	df000017 	ldw	fp,0(sp)
   404f8:	dec00204 	addi	sp,sp,8
   404fc:	f800283a 	ret

00040500 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   40500:	defffd04 	addi	sp,sp,-12
   40504:	dfc00215 	stw	ra,8(sp)
   40508:	df000115 	stw	fp,4(sp)
   4050c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   40510:	00800134 	movhi	r2,4
   40514:	10861d04 	addi	r2,r2,6260
   40518:	10800017 	ldw	r2,0(r2)
   4051c:	1005003a 	cmpeq	r2,r2,zero
   40520:	1000061e 	bne	r2,zero,4053c <alt_get_errno+0x3c>
   40524:	00800134 	movhi	r2,4
   40528:	10861d04 	addi	r2,r2,6260
   4052c:	10800017 	ldw	r2,0(r2)
   40530:	103ee83a 	callr	r2
   40534:	e0bfff15 	stw	r2,-4(fp)
   40538:	00000306 	br	40548 <alt_get_errno+0x48>
   4053c:	00800134 	movhi	r2,4
   40540:	1086d304 	addi	r2,r2,6988
   40544:	e0bfff15 	stw	r2,-4(fp)
   40548:	e0bfff17 	ldw	r2,-4(fp)
}
   4054c:	e037883a 	mov	sp,fp
   40550:	dfc00117 	ldw	ra,4(sp)
   40554:	df000017 	ldw	fp,0(sp)
   40558:	dec00204 	addi	sp,sp,8
   4055c:	f800283a 	ret

00040560 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   40560:	defffd04 	addi	sp,sp,-12
   40564:	dfc00215 	stw	ra,8(sp)
   40568:	df000115 	stw	fp,4(sp)
   4056c:	df000104 	addi	fp,sp,4
   40570:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, cpu);
   40574:	0040fc40 	call	40fc4 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   40578:	00800044 	movi	r2,1
   4057c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   40580:	e037883a 	mov	sp,fp
   40584:	dfc00117 	ldw	ra,4(sp)
   40588:	df000017 	ldw	fp,0(sp)
   4058c:	dec00204 	addi	sp,sp,8
   40590:	f800283a 	ret

00040594 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   40594:	defffe04 	addi	sp,sp,-8
   40598:	dfc00115 	stw	ra,4(sp)
   4059c:	df000015 	stw	fp,0(sp)
   405a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   405a4:	01000134 	movhi	r4,4
   405a8:	2105a104 	addi	r4,r4,5764
   405ac:	00405c40 	call	405c4 <alt_dev_reg>
}
   405b0:	e037883a 	mov	sp,fp
   405b4:	dfc00117 	ldw	ra,4(sp)
   405b8:	df000017 	ldw	fp,0(sp)
   405bc:	dec00204 	addi	sp,sp,8
   405c0:	f800283a 	ret

000405c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   405c4:	defffd04 	addi	sp,sp,-12
   405c8:	dfc00215 	stw	ra,8(sp)
   405cc:	df000115 	stw	fp,4(sp)
   405d0:	df000104 	addi	fp,sp,4
   405d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   405d8:	e13fff17 	ldw	r4,-4(fp)
   405dc:	01400134 	movhi	r5,4
   405e0:	29461a04 	addi	r5,r5,6248
   405e4:	0040a200 	call	40a20 <alt_dev_llist_insert>
}
   405e8:	e037883a 	mov	sp,fp
   405ec:	dfc00117 	ldw	ra,4(sp)
   405f0:	df000017 	ldw	fp,0(sp)
   405f4:	dec00204 	addi	sp,sp,8
   405f8:	f800283a 	ret

000405fc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   405fc:	defffa04 	addi	sp,sp,-24
   40600:	dfc00515 	stw	ra,20(sp)
   40604:	df000415 	stw	fp,16(sp)
   40608:	df000404 	addi	fp,sp,16
   4060c:	e13ffd15 	stw	r4,-12(fp)
   40610:	e17ffe15 	stw	r5,-8(fp)
   40614:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40618:	e0bffd17 	ldw	r2,-12(fp)
   4061c:	10800017 	ldw	r2,0(r2)
   40620:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   40624:	e0bffc17 	ldw	r2,-16(fp)
   40628:	11000a04 	addi	r4,r2,40
   4062c:	e0bffd17 	ldw	r2,-12(fp)
   40630:	11c00217 	ldw	r7,8(r2)
   40634:	e17ffe17 	ldw	r5,-8(fp)
   40638:	e1bfff17 	ldw	r6,-4(fp)
   4063c:	00406ac0 	call	406ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   40640:	e037883a 	mov	sp,fp
   40644:	dfc00117 	ldw	ra,4(sp)
   40648:	df000017 	ldw	fp,0(sp)
   4064c:	dec00204 	addi	sp,sp,8
   40650:	f800283a 	ret

00040654 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   40654:	defffa04 	addi	sp,sp,-24
   40658:	dfc00515 	stw	ra,20(sp)
   4065c:	df000415 	stw	fp,16(sp)
   40660:	df000404 	addi	fp,sp,16
   40664:	e13ffd15 	stw	r4,-12(fp)
   40668:	e17ffe15 	stw	r5,-8(fp)
   4066c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40670:	e0bffd17 	ldw	r2,-12(fp)
   40674:	10800017 	ldw	r2,0(r2)
   40678:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4067c:	e0bffc17 	ldw	r2,-16(fp)
   40680:	11000a04 	addi	r4,r2,40
   40684:	e0bffd17 	ldw	r2,-12(fp)
   40688:	11c00217 	ldw	r7,8(r2)
   4068c:	e17ffe17 	ldw	r5,-8(fp)
   40690:	e1bfff17 	ldw	r6,-4(fp)
   40694:	00407b00 	call	407b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   40698:	e037883a 	mov	sp,fp
   4069c:	dfc00117 	ldw	ra,4(sp)
   406a0:	df000017 	ldw	fp,0(sp)
   406a4:	dec00204 	addi	sp,sp,8
   406a8:	f800283a 	ret

000406ac <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   406ac:	defff604 	addi	sp,sp,-40
   406b0:	df000915 	stw	fp,36(sp)
   406b4:	df000904 	addi	fp,sp,36
   406b8:	e13ffb15 	stw	r4,-20(fp)
   406bc:	e17ffc15 	stw	r5,-16(fp)
   406c0:	e1bffd15 	stw	r6,-12(fp)
   406c4:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   406c8:	e0bffb17 	ldw	r2,-20(fp)
   406cc:	10800017 	ldw	r2,0(r2)
   406d0:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   406d4:	e0bffc17 	ldw	r2,-16(fp)
   406d8:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   406dc:	e0bffd17 	ldw	r2,-12(fp)
   406e0:	1007883a 	mov	r3,r2
   406e4:	e0bffc17 	ldw	r2,-16(fp)
   406e8:	10c5883a 	add	r2,r2,r3
   406ec:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   406f0:	00001606 	br	4074c <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   406f4:	e0bffa17 	ldw	r2,-24(fp)
   406f8:	10800037 	ldwio	r2,0(r2)
   406fc:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   40700:	e0bff717 	ldw	r2,-36(fp)
   40704:	10a0000c 	andi	r2,r2,32768
   40708:	1005003a 	cmpeq	r2,r2,zero
   4070c:	1000081e 	bne	r2,zero,40730 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   40710:	e0bff717 	ldw	r2,-36(fp)
   40714:	1007883a 	mov	r3,r2
   40718:	e0bff917 	ldw	r2,-28(fp)
   4071c:	10c00005 	stb	r3,0(r2)
   40720:	e0bff917 	ldw	r2,-28(fp)
   40724:	10800044 	addi	r2,r2,1
   40728:	e0bff915 	stw	r2,-28(fp)
   4072c:	00000706 	br	4074c <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   40730:	e0fff917 	ldw	r3,-28(fp)
   40734:	e0bffc17 	ldw	r2,-16(fp)
   40738:	1880071e 	bne	r3,r2,40758 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   4073c:	e0bffe17 	ldw	r2,-8(fp)
   40740:	1090000c 	andi	r2,r2,16384
   40744:	1004c03a 	cmpne	r2,r2,zero
   40748:	1000031e 	bne	r2,zero,40758 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   4074c:	e0fff917 	ldw	r3,-28(fp)
   40750:	e0bff817 	ldw	r2,-32(fp)
   40754:	18bfe736 	bltu	r3,r2,406f4 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   40758:	e0fff917 	ldw	r3,-28(fp)
   4075c:	e0bffc17 	ldw	r2,-16(fp)
   40760:	18800526 	beq	r3,r2,40778 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   40764:	e0fff917 	ldw	r3,-28(fp)
   40768:	e0bffc17 	ldw	r2,-16(fp)
   4076c:	1887c83a 	sub	r3,r3,r2
   40770:	e0ffff15 	stw	r3,-4(fp)
   40774:	00000906 	br	4079c <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   40778:	e0bffe17 	ldw	r2,-8(fp)
   4077c:	1090000c 	andi	r2,r2,16384
   40780:	1005003a 	cmpeq	r2,r2,zero
   40784:	1000031e 	bne	r2,zero,40794 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   40788:	00bffd44 	movi	r2,-11
   4078c:	e0bfff15 	stw	r2,-4(fp)
   40790:	00000206 	br	4079c <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   40794:	00bffec4 	movi	r2,-5
   40798:	e0bfff15 	stw	r2,-4(fp)
   4079c:	e0bfff17 	ldw	r2,-4(fp)
}
   407a0:	e037883a 	mov	sp,fp
   407a4:	df000017 	ldw	fp,0(sp)
   407a8:	dec00104 	addi	sp,sp,4
   407ac:	f800283a 	ret

000407b0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   407b0:	defff904 	addi	sp,sp,-28
   407b4:	df000615 	stw	fp,24(sp)
   407b8:	df000604 	addi	fp,sp,24
   407bc:	e13ffc15 	stw	r4,-16(fp)
   407c0:	e17ffd15 	stw	r5,-12(fp)
   407c4:	e1bffe15 	stw	r6,-8(fp)
   407c8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   407cc:	e0bffc17 	ldw	r2,-16(fp)
   407d0:	10800017 	ldw	r2,0(r2)
   407d4:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   407d8:	e0bffe17 	ldw	r2,-8(fp)
   407dc:	1007883a 	mov	r3,r2
   407e0:	e0bffd17 	ldw	r2,-12(fp)
   407e4:	10c5883a 	add	r2,r2,r3
   407e8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   407ec:	00001106 	br	40834 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   407f0:	e0bffb17 	ldw	r2,-20(fp)
   407f4:	10800104 	addi	r2,r2,4
   407f8:	10800037 	ldwio	r2,0(r2)
   407fc:	10bfffec 	andhi	r2,r2,65535
   40800:	1005003a 	cmpeq	r2,r2,zero
   40804:	10000b1e 	bne	r2,zero,40834 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   40808:	e13ffb17 	ldw	r4,-20(fp)
   4080c:	e0bffd17 	ldw	r2,-12(fp)
   40810:	10800003 	ldbu	r2,0(r2)
   40814:	10c03fcc 	andi	r3,r2,255
   40818:	18c0201c 	xori	r3,r3,128
   4081c:	18ffe004 	addi	r3,r3,-128
   40820:	e0bffd17 	ldw	r2,-12(fp)
   40824:	10800044 	addi	r2,r2,1
   40828:	e0bffd15 	stw	r2,-12(fp)
   4082c:	2005883a 	mov	r2,r4
   40830:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   40834:	e0fffd17 	ldw	r3,-12(fp)
   40838:	e0bffa17 	ldw	r2,-24(fp)
   4083c:	18bfec36 	bltu	r3,r2,407f0 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   40840:	e0bffe17 	ldw	r2,-8(fp)
}
   40844:	e037883a 	mov	sp,fp
   40848:	df000017 	ldw	fp,0(sp)
   4084c:	dec00104 	addi	sp,sp,4
   40850:	f800283a 	ret

00040854 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   40854:	defff804 	addi	sp,sp,-32
   40858:	dfc00715 	stw	ra,28(sp)
   4085c:	df000615 	stw	fp,24(sp)
   40860:	df000604 	addi	fp,sp,24
   40864:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   40868:	e0bffc17 	ldw	r2,-16(fp)
   4086c:	1004803a 	cmplt	r2,r2,zero
   40870:	1000081e 	bne	r2,zero,40894 <close+0x40>
   40874:	e0bffc17 	ldw	r2,-16(fp)
   40878:	10800324 	muli	r2,r2,12
   4087c:	1007883a 	mov	r3,r2
   40880:	00800134 	movhi	r2,4
   40884:	1085b604 	addi	r2,r2,5848
   40888:	1887883a 	add	r3,r3,r2
   4088c:	e0ffff15 	stw	r3,-4(fp)
   40890:	00000106 	br	40898 <close+0x44>
   40894:	e03fff15 	stw	zero,-4(fp)
   40898:	e0bfff17 	ldw	r2,-4(fp)
   4089c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   408a0:	e0bffb17 	ldw	r2,-20(fp)
   408a4:	1005003a 	cmpeq	r2,r2,zero
   408a8:	10001d1e 	bne	r2,zero,40920 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   408ac:	e0bffb17 	ldw	r2,-20(fp)
   408b0:	10800017 	ldw	r2,0(r2)
   408b4:	10800417 	ldw	r2,16(r2)
   408b8:	1005003a 	cmpeq	r2,r2,zero
   408bc:	1000071e 	bne	r2,zero,408dc <close+0x88>
   408c0:	e0bffb17 	ldw	r2,-20(fp)
   408c4:	10800017 	ldw	r2,0(r2)
   408c8:	10800417 	ldw	r2,16(r2)
   408cc:	e13ffb17 	ldw	r4,-20(fp)
   408d0:	103ee83a 	callr	r2
   408d4:	e0bffe15 	stw	r2,-8(fp)
   408d8:	00000106 	br	408e0 <close+0x8c>
   408dc:	e03ffe15 	stw	zero,-8(fp)
   408e0:	e0bffe17 	ldw	r2,-8(fp)
   408e4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   408e8:	e13ffc17 	ldw	r4,-16(fp)
   408ec:	0040f640 	call	40f64 <alt_release_fd>
    if (rval < 0)
   408f0:	e0bffa17 	ldw	r2,-24(fp)
   408f4:	1004403a 	cmpge	r2,r2,zero
   408f8:	1000071e 	bne	r2,zero,40918 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   408fc:	00409500 	call	40950 <alt_get_errno>
   40900:	e0fffa17 	ldw	r3,-24(fp)
   40904:	00c7c83a 	sub	r3,zero,r3
   40908:	10c00015 	stw	r3,0(r2)
      return -1;
   4090c:	00bfffc4 	movi	r2,-1
   40910:	e0bffd15 	stw	r2,-12(fp)
   40914:	00000806 	br	40938 <close+0xe4>
    }
    return 0;
   40918:	e03ffd15 	stw	zero,-12(fp)
   4091c:	00000606 	br	40938 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   40920:	00409500 	call	40950 <alt_get_errno>
   40924:	1007883a 	mov	r3,r2
   40928:	00801444 	movi	r2,81
   4092c:	18800015 	stw	r2,0(r3)
    return -1;
   40930:	00bfffc4 	movi	r2,-1
   40934:	e0bffd15 	stw	r2,-12(fp)
   40938:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   4093c:	e037883a 	mov	sp,fp
   40940:	dfc00117 	ldw	ra,4(sp)
   40944:	df000017 	ldw	fp,0(sp)
   40948:	dec00204 	addi	sp,sp,8
   4094c:	f800283a 	ret

00040950 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   40950:	defffd04 	addi	sp,sp,-12
   40954:	dfc00215 	stw	ra,8(sp)
   40958:	df000115 	stw	fp,4(sp)
   4095c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   40960:	00800134 	movhi	r2,4
   40964:	10861d04 	addi	r2,r2,6260
   40968:	10800017 	ldw	r2,0(r2)
   4096c:	1005003a 	cmpeq	r2,r2,zero
   40970:	1000061e 	bne	r2,zero,4098c <alt_get_errno+0x3c>
   40974:	00800134 	movhi	r2,4
   40978:	10861d04 	addi	r2,r2,6260
   4097c:	10800017 	ldw	r2,0(r2)
   40980:	103ee83a 	callr	r2
   40984:	e0bfff15 	stw	r2,-4(fp)
   40988:	00000306 	br	40998 <alt_get_errno+0x48>
   4098c:	00800134 	movhi	r2,4
   40990:	1086d304 	addi	r2,r2,6988
   40994:	e0bfff15 	stw	r2,-4(fp)
   40998:	e0bfff17 	ldw	r2,-4(fp)
}
   4099c:	e037883a 	mov	sp,fp
   409a0:	dfc00117 	ldw	ra,4(sp)
   409a4:	df000017 	ldw	fp,0(sp)
   409a8:	dec00204 	addi	sp,sp,8
   409ac:	f800283a 	ret

000409b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   409b0:	defffe04 	addi	sp,sp,-8
   409b4:	df000115 	stw	fp,4(sp)
   409b8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   409bc:	e03fff15 	stw	zero,-4(fp)
   409c0:	00000506 	br	409d8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   409c4:	e0bfff17 	ldw	r2,-4(fp)
   409c8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   409cc:	e0bfff17 	ldw	r2,-4(fp)
   409d0:	10800804 	addi	r2,r2,32
   409d4:	e0bfff15 	stw	r2,-4(fp)
   409d8:	e0bfff17 	ldw	r2,-4(fp)
   409dc:	10820030 	cmpltui	r2,r2,2048
   409e0:	103ff81e 	bne	r2,zero,409c4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   409e4:	e037883a 	mov	sp,fp
   409e8:	df000017 	ldw	fp,0(sp)
   409ec:	dec00104 	addi	sp,sp,4
   409f0:	f800283a 	ret

000409f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   409f4:	defffc04 	addi	sp,sp,-16
   409f8:	df000315 	stw	fp,12(sp)
   409fc:	df000304 	addi	fp,sp,12
   40a00:	e13ffd15 	stw	r4,-12(fp)
   40a04:	e17ffe15 	stw	r5,-8(fp)
   40a08:	e1bfff15 	stw	r6,-4(fp)
  return len;
   40a0c:	e0bfff17 	ldw	r2,-4(fp)
}
   40a10:	e037883a 	mov	sp,fp
   40a14:	df000017 	ldw	fp,0(sp)
   40a18:	dec00104 	addi	sp,sp,4
   40a1c:	f800283a 	ret

00040a20 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   40a20:	defff904 	addi	sp,sp,-28
   40a24:	dfc00615 	stw	ra,24(sp)
   40a28:	df000515 	stw	fp,20(sp)
   40a2c:	df000504 	addi	fp,sp,20
   40a30:	e13ffd15 	stw	r4,-12(fp)
   40a34:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   40a38:	e0bffd17 	ldw	r2,-12(fp)
   40a3c:	1005003a 	cmpeq	r2,r2,zero
   40a40:	1000041e 	bne	r2,zero,40a54 <alt_dev_llist_insert+0x34>
   40a44:	e0bffd17 	ldw	r2,-12(fp)
   40a48:	10800217 	ldw	r2,8(r2)
   40a4c:	1004c03a 	cmpne	r2,r2,zero
   40a50:	1000071e 	bne	r2,zero,40a70 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   40a54:	0040ad40 	call	40ad4 <alt_get_errno>
   40a58:	1007883a 	mov	r3,r2
   40a5c:	00800584 	movi	r2,22
   40a60:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   40a64:	00bffa84 	movi	r2,-22
   40a68:	e0bfff15 	stw	r2,-4(fp)
   40a6c:	00001306 	br	40abc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   40a70:	e0fffd17 	ldw	r3,-12(fp)
   40a74:	e0bffe17 	ldw	r2,-8(fp)
   40a78:	e0bffb15 	stw	r2,-20(fp)
   40a7c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   40a80:	e0fffc17 	ldw	r3,-16(fp)
   40a84:	e0bffb17 	ldw	r2,-20(fp)
   40a88:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   40a8c:	e0bffb17 	ldw	r2,-20(fp)
   40a90:	10c00017 	ldw	r3,0(r2)
   40a94:	e0bffc17 	ldw	r2,-16(fp)
   40a98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   40a9c:	e0bffb17 	ldw	r2,-20(fp)
   40aa0:	10c00017 	ldw	r3,0(r2)
   40aa4:	e0bffc17 	ldw	r2,-16(fp)
   40aa8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   40aac:	e0fffb17 	ldw	r3,-20(fp)
   40ab0:	e0bffc17 	ldw	r2,-16(fp)
   40ab4:	18800015 	stw	r2,0(r3)

  return 0;  
   40ab8:	e03fff15 	stw	zero,-4(fp)
   40abc:	e0bfff17 	ldw	r2,-4(fp)
}
   40ac0:	e037883a 	mov	sp,fp
   40ac4:	dfc00117 	ldw	ra,4(sp)
   40ac8:	df000017 	ldw	fp,0(sp)
   40acc:	dec00204 	addi	sp,sp,8
   40ad0:	f800283a 	ret

00040ad4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   40ad4:	defffd04 	addi	sp,sp,-12
   40ad8:	dfc00215 	stw	ra,8(sp)
   40adc:	df000115 	stw	fp,4(sp)
   40ae0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   40ae4:	00800134 	movhi	r2,4
   40ae8:	10861d04 	addi	r2,r2,6260
   40aec:	10800017 	ldw	r2,0(r2)
   40af0:	1005003a 	cmpeq	r2,r2,zero
   40af4:	1000061e 	bne	r2,zero,40b10 <alt_get_errno+0x3c>
   40af8:	00800134 	movhi	r2,4
   40afc:	10861d04 	addi	r2,r2,6260
   40b00:	10800017 	ldw	r2,0(r2)
   40b04:	103ee83a 	callr	r2
   40b08:	e0bfff15 	stw	r2,-4(fp)
   40b0c:	00000306 	br	40b1c <alt_get_errno+0x48>
   40b10:	00800134 	movhi	r2,4
   40b14:	1086d304 	addi	r2,r2,6988
   40b18:	e0bfff15 	stw	r2,-4(fp)
   40b1c:	e0bfff17 	ldw	r2,-4(fp)
}
   40b20:	e037883a 	mov	sp,fp
   40b24:	dfc00117 	ldw	ra,4(sp)
   40b28:	df000017 	ldw	fp,0(sp)
   40b2c:	dec00204 	addi	sp,sp,8
   40b30:	f800283a 	ret

00040b34 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   40b34:	defffe04 	addi	sp,sp,-8
   40b38:	dfc00115 	stw	ra,4(sp)
   40b3c:	df000015 	stw	fp,0(sp)
   40b40:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   40b44:	0009883a 	mov	r4,zero
   40b48:	01440004 	movi	r5,4096
   40b4c:	00412500 	call	41250 <alt_icache_flush>
#endif
}
   40b50:	e037883a 	mov	sp,fp
   40b54:	dfc00117 	ldw	ra,4(sp)
   40b58:	df000017 	ldw	fp,0(sp)
   40b5c:	dec00204 	addi	sp,sp,8
   40b60:	f800283a 	ret

00040b64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   40b64:	defff904 	addi	sp,sp,-28
   40b68:	dfc00615 	stw	ra,24(sp)
   40b6c:	df000515 	stw	fp,20(sp)
   40b70:	df000504 	addi	fp,sp,20
   40b74:	e13ffc15 	stw	r4,-16(fp)
   40b78:	e17ffd15 	stw	r5,-12(fp)
   40b7c:	e1bffe15 	stw	r6,-8(fp)
   40b80:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   40b84:	e13ffd17 	ldw	r4,-12(fp)
   40b88:	e17ffe17 	ldw	r5,-8(fp)
   40b8c:	e1bfff17 	ldw	r6,-4(fp)
   40b90:	0040d7c0 	call	40d7c <open>
   40b94:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   40b98:	e0bffb17 	ldw	r2,-20(fp)
   40b9c:	1004803a 	cmplt	r2,r2,zero
   40ba0:	10001c1e 	bne	r2,zero,40c14 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   40ba4:	e0bffb17 	ldw	r2,-20(fp)
   40ba8:	00c00134 	movhi	r3,4
   40bac:	18c5b604 	addi	r3,r3,5848
   40bb0:	10800324 	muli	r2,r2,12
   40bb4:	10c5883a 	add	r2,r2,r3
   40bb8:	10c00017 	ldw	r3,0(r2)
   40bbc:	e0bffc17 	ldw	r2,-16(fp)
   40bc0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   40bc4:	e0bffb17 	ldw	r2,-20(fp)
   40bc8:	00c00134 	movhi	r3,4
   40bcc:	18c5b604 	addi	r3,r3,5848
   40bd0:	10800324 	muli	r2,r2,12
   40bd4:	10c5883a 	add	r2,r2,r3
   40bd8:	10800104 	addi	r2,r2,4
   40bdc:	10c00017 	ldw	r3,0(r2)
   40be0:	e0bffc17 	ldw	r2,-16(fp)
   40be4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   40be8:	e0bffb17 	ldw	r2,-20(fp)
   40bec:	00c00134 	movhi	r3,4
   40bf0:	18c5b604 	addi	r3,r3,5848
   40bf4:	10800324 	muli	r2,r2,12
   40bf8:	10c5883a 	add	r2,r2,r3
   40bfc:	10800204 	addi	r2,r2,8
   40c00:	10c00017 	ldw	r3,0(r2)
   40c04:	e0bffc17 	ldw	r2,-16(fp)
   40c08:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   40c0c:	e13ffb17 	ldw	r4,-20(fp)
   40c10:	0040f640 	call	40f64 <alt_release_fd>
  }
} 
   40c14:	e037883a 	mov	sp,fp
   40c18:	dfc00117 	ldw	ra,4(sp)
   40c1c:	df000017 	ldw	fp,0(sp)
   40c20:	dec00204 	addi	sp,sp,8
   40c24:	f800283a 	ret

00040c28 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   40c28:	defffb04 	addi	sp,sp,-20
   40c2c:	dfc00415 	stw	ra,16(sp)
   40c30:	df000315 	stw	fp,12(sp)
   40c34:	df000304 	addi	fp,sp,12
   40c38:	e13ffd15 	stw	r4,-12(fp)
   40c3c:	e17ffe15 	stw	r5,-8(fp)
   40c40:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   40c44:	01000134 	movhi	r4,4
   40c48:	2105b904 	addi	r4,r4,5860
   40c4c:	e17ffd17 	ldw	r5,-12(fp)
   40c50:	01800044 	movi	r6,1
   40c54:	01c07fc4 	movi	r7,511
   40c58:	0040b640 	call	40b64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   40c5c:	01000134 	movhi	r4,4
   40c60:	2105b604 	addi	r4,r4,5848
   40c64:	e17ffe17 	ldw	r5,-8(fp)
   40c68:	000d883a 	mov	r6,zero
   40c6c:	01c07fc4 	movi	r7,511
   40c70:	0040b640 	call	40b64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   40c74:	01000134 	movhi	r4,4
   40c78:	2105bc04 	addi	r4,r4,5872
   40c7c:	e17fff17 	ldw	r5,-4(fp)
   40c80:	01800044 	movi	r6,1
   40c84:	01c07fc4 	movi	r7,511
   40c88:	0040b640 	call	40b64 <alt_open_fd>
}  
   40c8c:	e037883a 	mov	sp,fp
   40c90:	dfc00117 	ldw	ra,4(sp)
   40c94:	df000017 	ldw	fp,0(sp)
   40c98:	dec00204 	addi	sp,sp,8
   40c9c:	f800283a 	ret

00040ca0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   40ca0:	defffc04 	addi	sp,sp,-16
   40ca4:	df000315 	stw	fp,12(sp)
   40ca8:	df000304 	addi	fp,sp,12
   40cac:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   40cb0:	e0bffe17 	ldw	r2,-8(fp)
   40cb4:	10800217 	ldw	r2,8(r2)
   40cb8:	10d00034 	orhi	r3,r2,16384
   40cbc:	e0bffe17 	ldw	r2,-8(fp)
   40cc0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   40cc4:	e03ffd15 	stw	zero,-12(fp)
   40cc8:	00002006 	br	40d4c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   40ccc:	e0bffd17 	ldw	r2,-12(fp)
   40cd0:	00c00134 	movhi	r3,4
   40cd4:	18c5b604 	addi	r3,r3,5848
   40cd8:	10800324 	muli	r2,r2,12
   40cdc:	10c5883a 	add	r2,r2,r3
   40ce0:	10c00017 	ldw	r3,0(r2)
   40ce4:	e0bffe17 	ldw	r2,-8(fp)
   40ce8:	10800017 	ldw	r2,0(r2)
   40cec:	1880141e 	bne	r3,r2,40d40 <alt_file_locked+0xa0>
   40cf0:	e0bffd17 	ldw	r2,-12(fp)
   40cf4:	00c00134 	movhi	r3,4
   40cf8:	18c5b604 	addi	r3,r3,5848
   40cfc:	10800324 	muli	r2,r2,12
   40d00:	10c5883a 	add	r2,r2,r3
   40d04:	10800204 	addi	r2,r2,8
   40d08:	10800017 	ldw	r2,0(r2)
   40d0c:	1004403a 	cmpge	r2,r2,zero
   40d10:	10000b1e 	bne	r2,zero,40d40 <alt_file_locked+0xa0>
   40d14:	e0bffd17 	ldw	r2,-12(fp)
   40d18:	10800324 	muli	r2,r2,12
   40d1c:	1007883a 	mov	r3,r2
   40d20:	00800134 	movhi	r2,4
   40d24:	1085b604 	addi	r2,r2,5848
   40d28:	1887883a 	add	r3,r3,r2
   40d2c:	e0bffe17 	ldw	r2,-8(fp)
   40d30:	18800326 	beq	r3,r2,40d40 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   40d34:	00bffcc4 	movi	r2,-13
   40d38:	e0bfff15 	stw	r2,-4(fp)
   40d3c:	00000a06 	br	40d68 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   40d40:	e0bffd17 	ldw	r2,-12(fp)
   40d44:	10800044 	addi	r2,r2,1
   40d48:	e0bffd15 	stw	r2,-12(fp)
   40d4c:	00800134 	movhi	r2,4
   40d50:	10861c04 	addi	r2,r2,6256
   40d54:	10800017 	ldw	r2,0(r2)
   40d58:	1007883a 	mov	r3,r2
   40d5c:	e0bffd17 	ldw	r2,-12(fp)
   40d60:	18bfda2e 	bgeu	r3,r2,40ccc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   40d64:	e03fff15 	stw	zero,-4(fp)
   40d68:	e0bfff17 	ldw	r2,-4(fp)
}
   40d6c:	e037883a 	mov	sp,fp
   40d70:	df000017 	ldw	fp,0(sp)
   40d74:	dec00104 	addi	sp,sp,4
   40d78:	f800283a 	ret

00040d7c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   40d7c:	defff404 	addi	sp,sp,-48
   40d80:	dfc00b15 	stw	ra,44(sp)
   40d84:	df000a15 	stw	fp,40(sp)
   40d88:	df000a04 	addi	fp,sp,40
   40d8c:	e13ffb15 	stw	r4,-20(fp)
   40d90:	e17ffc15 	stw	r5,-16(fp)
   40d94:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   40d98:	00bfffc4 	movi	r2,-1
   40d9c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   40da0:	00bffb44 	movi	r2,-19
   40da4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   40da8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   40dac:	e13ffb17 	ldw	r4,-20(fp)
   40db0:	01400134 	movhi	r5,4
   40db4:	29461a04 	addi	r5,r5,6248
   40db8:	0040fe40 	call	40fe4 <alt_find_dev>
   40dbc:	e0bffa15 	stw	r2,-24(fp)
   40dc0:	e0bffa17 	ldw	r2,-24(fp)
   40dc4:	1004c03a 	cmpne	r2,r2,zero
   40dc8:	1000051e 	bne	r2,zero,40de0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   40dcc:	e13ffb17 	ldw	r4,-20(fp)
   40dd0:	00410780 	call	41078 <alt_find_file>
   40dd4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   40dd8:	00800044 	movi	r2,1
   40ddc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   40de0:	e0bffa17 	ldw	r2,-24(fp)
   40de4:	1005003a 	cmpeq	r2,r2,zero
   40de8:	1000301e 	bne	r2,zero,40eac <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   40dec:	e13ffa17 	ldw	r4,-24(fp)
   40df0:	00411980 	call	41198 <alt_get_fd>
   40df4:	e0bff815 	stw	r2,-32(fp)
   40df8:	e0bff817 	ldw	r2,-32(fp)
   40dfc:	1004403a 	cmpge	r2,r2,zero
   40e00:	1000031e 	bne	r2,zero,40e10 <open+0x94>
    {
      status = index;
   40e04:	e0bff817 	ldw	r2,-32(fp)
   40e08:	e0bff715 	stw	r2,-36(fp)
   40e0c:	00002906 	br	40eb4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   40e10:	e0bff817 	ldw	r2,-32(fp)
   40e14:	10800324 	muli	r2,r2,12
   40e18:	1007883a 	mov	r3,r2
   40e1c:	00800134 	movhi	r2,4
   40e20:	1085b604 	addi	r2,r2,5848
   40e24:	1885883a 	add	r2,r3,r2
   40e28:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   40e2c:	e0fffc17 	ldw	r3,-16(fp)
   40e30:	00900034 	movhi	r2,16384
   40e34:	10bfffc4 	addi	r2,r2,-1
   40e38:	1886703a 	and	r3,r3,r2
   40e3c:	e0bff917 	ldw	r2,-28(fp)
   40e40:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   40e44:	e0bff617 	ldw	r2,-40(fp)
   40e48:	1004c03a 	cmpne	r2,r2,zero
   40e4c:	1000061e 	bne	r2,zero,40e68 <open+0xec>
   40e50:	e13ff917 	ldw	r4,-28(fp)
   40e54:	0040ca00 	call	40ca0 <alt_file_locked>
   40e58:	e0bff715 	stw	r2,-36(fp)
   40e5c:	e0bff717 	ldw	r2,-36(fp)
   40e60:	1004803a 	cmplt	r2,r2,zero
   40e64:	1000131e 	bne	r2,zero,40eb4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   40e68:	e0bffa17 	ldw	r2,-24(fp)
   40e6c:	10800317 	ldw	r2,12(r2)
   40e70:	1005003a 	cmpeq	r2,r2,zero
   40e74:	1000091e 	bne	r2,zero,40e9c <open+0x120>
   40e78:	e0bffa17 	ldw	r2,-24(fp)
   40e7c:	10800317 	ldw	r2,12(r2)
   40e80:	e13ff917 	ldw	r4,-28(fp)
   40e84:	e17ffb17 	ldw	r5,-20(fp)
   40e88:	e1bffc17 	ldw	r6,-16(fp)
   40e8c:	e1fffd17 	ldw	r7,-12(fp)
   40e90:	103ee83a 	callr	r2
   40e94:	e0bfff15 	stw	r2,-4(fp)
   40e98:	00000106 	br	40ea0 <open+0x124>
   40e9c:	e03fff15 	stw	zero,-4(fp)
   40ea0:	e0bfff17 	ldw	r2,-4(fp)
   40ea4:	e0bff715 	stw	r2,-36(fp)
   40ea8:	00000206 	br	40eb4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   40eac:	00bffb44 	movi	r2,-19
   40eb0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   40eb4:	e0bff717 	ldw	r2,-36(fp)
   40eb8:	1004403a 	cmpge	r2,r2,zero
   40ebc:	1000091e 	bne	r2,zero,40ee4 <open+0x168>
  {
    alt_release_fd (index);  
   40ec0:	e13ff817 	ldw	r4,-32(fp)
   40ec4:	0040f640 	call	40f64 <alt_release_fd>
    ALT_ERRNO = -status;
   40ec8:	0040f040 	call	40f04 <alt_get_errno>
   40ecc:	e0fff717 	ldw	r3,-36(fp)
   40ed0:	00c7c83a 	sub	r3,zero,r3
   40ed4:	10c00015 	stw	r3,0(r2)
    return -1;
   40ed8:	00bfffc4 	movi	r2,-1
   40edc:	e0bffe15 	stw	r2,-8(fp)
   40ee0:	00000206 	br	40eec <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   40ee4:	e0bff817 	ldw	r2,-32(fp)
   40ee8:	e0bffe15 	stw	r2,-8(fp)
   40eec:	e0bffe17 	ldw	r2,-8(fp)
}
   40ef0:	e037883a 	mov	sp,fp
   40ef4:	dfc00117 	ldw	ra,4(sp)
   40ef8:	df000017 	ldw	fp,0(sp)
   40efc:	dec00204 	addi	sp,sp,8
   40f00:	f800283a 	ret

00040f04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   40f04:	defffd04 	addi	sp,sp,-12
   40f08:	dfc00215 	stw	ra,8(sp)
   40f0c:	df000115 	stw	fp,4(sp)
   40f10:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   40f14:	00800134 	movhi	r2,4
   40f18:	10861d04 	addi	r2,r2,6260
   40f1c:	10800017 	ldw	r2,0(r2)
   40f20:	1005003a 	cmpeq	r2,r2,zero
   40f24:	1000061e 	bne	r2,zero,40f40 <alt_get_errno+0x3c>
   40f28:	00800134 	movhi	r2,4
   40f2c:	10861d04 	addi	r2,r2,6260
   40f30:	10800017 	ldw	r2,0(r2)
   40f34:	103ee83a 	callr	r2
   40f38:	e0bfff15 	stw	r2,-4(fp)
   40f3c:	00000306 	br	40f4c <alt_get_errno+0x48>
   40f40:	00800134 	movhi	r2,4
   40f44:	1086d304 	addi	r2,r2,6988
   40f48:	e0bfff15 	stw	r2,-4(fp)
   40f4c:	e0bfff17 	ldw	r2,-4(fp)
}
   40f50:	e037883a 	mov	sp,fp
   40f54:	dfc00117 	ldw	ra,4(sp)
   40f58:	df000017 	ldw	fp,0(sp)
   40f5c:	dec00204 	addi	sp,sp,8
   40f60:	f800283a 	ret

00040f64 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   40f64:	defffe04 	addi	sp,sp,-8
   40f68:	df000115 	stw	fp,4(sp)
   40f6c:	df000104 	addi	fp,sp,4
   40f70:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   40f74:	e0bfff17 	ldw	r2,-4(fp)
   40f78:	108000d0 	cmplti	r2,r2,3
   40f7c:	10000d1e 	bne	r2,zero,40fb4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   40f80:	e0bfff17 	ldw	r2,-4(fp)
   40f84:	00c00134 	movhi	r3,4
   40f88:	18c5b604 	addi	r3,r3,5848
   40f8c:	10800324 	muli	r2,r2,12
   40f90:	10c5883a 	add	r2,r2,r3
   40f94:	10800204 	addi	r2,r2,8
   40f98:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   40f9c:	e0bfff17 	ldw	r2,-4(fp)
   40fa0:	00c00134 	movhi	r3,4
   40fa4:	18c5b604 	addi	r3,r3,5848
   40fa8:	10800324 	muli	r2,r2,12
   40fac:	10c5883a 	add	r2,r2,r3
   40fb0:	10000015 	stw	zero,0(r2)
  }
}
   40fb4:	e037883a 	mov	sp,fp
   40fb8:	df000017 	ldw	fp,0(sp)
   40fbc:	dec00104 	addi	sp,sp,4
   40fc0:	f800283a 	ret

00040fc4 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
   40fc4:	deffff04 	addi	sp,sp,-4
   40fc8:	df000015 	stw	fp,0(sp)
   40fcc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   40fd0:	000170fa 	wrctl	ienable,zero
}
   40fd4:	e037883a 	mov	sp,fp
   40fd8:	df000017 	ldw	fp,0(sp)
   40fdc:	dec00104 	addi	sp,sp,4
   40fe0:	f800283a 	ret

00040fe4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   40fe4:	defff904 	addi	sp,sp,-28
   40fe8:	dfc00615 	stw	ra,24(sp)
   40fec:	df000515 	stw	fp,20(sp)
   40ff0:	df000504 	addi	fp,sp,20
   40ff4:	e13ffd15 	stw	r4,-12(fp)
   40ff8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   40ffc:	e0bffe17 	ldw	r2,-8(fp)
   41000:	10800017 	ldw	r2,0(r2)
   41004:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   41008:	e13ffd17 	ldw	r4,-12(fp)
   4100c:	00401440 	call	40144 <strlen>
   41010:	10800044 	addi	r2,r2,1
   41014:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   41018:	00000d06 	br	41050 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4101c:	e0bffc17 	ldw	r2,-16(fp)
   41020:	11000217 	ldw	r4,8(r2)
   41024:	e1bffb17 	ldw	r6,-20(fp)
   41028:	e17ffd17 	ldw	r5,-12(fp)
   4102c:	00413000 	call	41300 <memcmp>
   41030:	1004c03a 	cmpne	r2,r2,zero
   41034:	1000031e 	bne	r2,zero,41044 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   41038:	e0bffc17 	ldw	r2,-16(fp)
   4103c:	e0bfff15 	stw	r2,-4(fp)
   41040:	00000706 	br	41060 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   41044:	e0bffc17 	ldw	r2,-16(fp)
   41048:	10800017 	ldw	r2,0(r2)
   4104c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   41050:	e0fffe17 	ldw	r3,-8(fp)
   41054:	e0bffc17 	ldw	r2,-16(fp)
   41058:	10fff01e 	bne	r2,r3,4101c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4105c:	e03fff15 	stw	zero,-4(fp)
   41060:	e0bfff17 	ldw	r2,-4(fp)
}
   41064:	e037883a 	mov	sp,fp
   41068:	dfc00117 	ldw	ra,4(sp)
   4106c:	df000017 	ldw	fp,0(sp)
   41070:	dec00204 	addi	sp,sp,8
   41074:	f800283a 	ret

00041078 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   41078:	defffa04 	addi	sp,sp,-24
   4107c:	dfc00515 	stw	ra,20(sp)
   41080:	df000415 	stw	fp,16(sp)
   41084:	df000404 	addi	fp,sp,16
   41088:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4108c:	00800134 	movhi	r2,4
   41090:	10861804 	addi	r2,r2,6240
   41094:	10800017 	ldw	r2,0(r2)
   41098:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4109c:	00003306 	br	4116c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   410a0:	e0bffd17 	ldw	r2,-12(fp)
   410a4:	11000217 	ldw	r4,8(r2)
   410a8:	00401440 	call	40144 <strlen>
   410ac:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   410b0:	e0bffd17 	ldw	r2,-12(fp)
   410b4:	10c00217 	ldw	r3,8(r2)
   410b8:	e0bffc17 	ldw	r2,-16(fp)
   410bc:	1885883a 	add	r2,r3,r2
   410c0:	10bfffc4 	addi	r2,r2,-1
   410c4:	10800003 	ldbu	r2,0(r2)
   410c8:	10803fcc 	andi	r2,r2,255
   410cc:	1080201c 	xori	r2,r2,128
   410d0:	10bfe004 	addi	r2,r2,-128
   410d4:	10800bd8 	cmpnei	r2,r2,47
   410d8:	1000031e 	bne	r2,zero,410e8 <alt_find_file+0x70>
    {
      len -= 1;
   410dc:	e0bffc17 	ldw	r2,-16(fp)
   410e0:	10bfffc4 	addi	r2,r2,-1
   410e4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   410e8:	e0bffc17 	ldw	r2,-16(fp)
   410ec:	1007883a 	mov	r3,r2
   410f0:	e0bffe17 	ldw	r2,-8(fp)
   410f4:	1885883a 	add	r2,r3,r2
   410f8:	10800003 	ldbu	r2,0(r2)
   410fc:	10803fcc 	andi	r2,r2,255
   41100:	1080201c 	xori	r2,r2,128
   41104:	10bfe004 	addi	r2,r2,-128
   41108:	10800be0 	cmpeqi	r2,r2,47
   4110c:	10000a1e 	bne	r2,zero,41138 <alt_find_file+0xc0>
   41110:	e0bffc17 	ldw	r2,-16(fp)
   41114:	1007883a 	mov	r3,r2
   41118:	e0bffe17 	ldw	r2,-8(fp)
   4111c:	1885883a 	add	r2,r3,r2
   41120:	10800003 	ldbu	r2,0(r2)
   41124:	10803fcc 	andi	r2,r2,255
   41128:	1080201c 	xori	r2,r2,128
   4112c:	10bfe004 	addi	r2,r2,-128
   41130:	1004c03a 	cmpne	r2,r2,zero
   41134:	10000a1e 	bne	r2,zero,41160 <alt_find_file+0xe8>
   41138:	e0bffd17 	ldw	r2,-12(fp)
   4113c:	11000217 	ldw	r4,8(r2)
   41140:	e1bffc17 	ldw	r6,-16(fp)
   41144:	e17ffe17 	ldw	r5,-8(fp)
   41148:	00413000 	call	41300 <memcmp>
   4114c:	1004c03a 	cmpne	r2,r2,zero
   41150:	1000031e 	bne	r2,zero,41160 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   41154:	e0bffd17 	ldw	r2,-12(fp)
   41158:	e0bfff15 	stw	r2,-4(fp)
   4115c:	00000806 	br	41180 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   41160:	e0bffd17 	ldw	r2,-12(fp)
   41164:	10800017 	ldw	r2,0(r2)
   41168:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4116c:	00c00134 	movhi	r3,4
   41170:	18c61804 	addi	r3,r3,6240
   41174:	e0bffd17 	ldw	r2,-12(fp)
   41178:	10ffc91e 	bne	r2,r3,410a0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4117c:	e03fff15 	stw	zero,-4(fp)
   41180:	e0bfff17 	ldw	r2,-4(fp)
}
   41184:	e037883a 	mov	sp,fp
   41188:	dfc00117 	ldw	ra,4(sp)
   4118c:	df000017 	ldw	fp,0(sp)
   41190:	dec00204 	addi	sp,sp,8
   41194:	f800283a 	ret

00041198 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   41198:	defffc04 	addi	sp,sp,-16
   4119c:	df000315 	stw	fp,12(sp)
   411a0:	df000304 	addi	fp,sp,12
   411a4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   411a8:	00bffa04 	movi	r2,-24
   411ac:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   411b0:	e03ffe15 	stw	zero,-8(fp)
   411b4:	00001e06 	br	41230 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   411b8:	e0bffe17 	ldw	r2,-8(fp)
   411bc:	00c00134 	movhi	r3,4
   411c0:	18c5b604 	addi	r3,r3,5848
   411c4:	10800324 	muli	r2,r2,12
   411c8:	10c5883a 	add	r2,r2,r3
   411cc:	10800017 	ldw	r2,0(r2)
   411d0:	1004c03a 	cmpne	r2,r2,zero
   411d4:	1000131e 	bne	r2,zero,41224 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   411d8:	e0bffe17 	ldw	r2,-8(fp)
   411dc:	00c00134 	movhi	r3,4
   411e0:	18c5b604 	addi	r3,r3,5848
   411e4:	10800324 	muli	r2,r2,12
   411e8:	10c7883a 	add	r3,r2,r3
   411ec:	e0bfff17 	ldw	r2,-4(fp)
   411f0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   411f4:	00800134 	movhi	r2,4
   411f8:	10861c04 	addi	r2,r2,6256
   411fc:	10c00017 	ldw	r3,0(r2)
   41200:	e0bffe17 	ldw	r2,-8(fp)
   41204:	1880040e 	bge	r3,r2,41218 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   41208:	00c00134 	movhi	r3,4
   4120c:	18c61c04 	addi	r3,r3,6256
   41210:	e0bffe17 	ldw	r2,-8(fp)
   41214:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   41218:	e0bffe17 	ldw	r2,-8(fp)
   4121c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   41220:	00000606 	br	4123c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   41224:	e0bffe17 	ldw	r2,-8(fp)
   41228:	10800044 	addi	r2,r2,1
   4122c:	e0bffe15 	stw	r2,-8(fp)
   41230:	e0bffe17 	ldw	r2,-8(fp)
   41234:	10800810 	cmplti	r2,r2,32
   41238:	103fdf1e 	bne	r2,zero,411b8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4123c:	e0bffd17 	ldw	r2,-12(fp)
}
   41240:	e037883a 	mov	sp,fp
   41244:	df000017 	ldw	fp,0(sp)
   41248:	dec00104 	addi	sp,sp,4
   4124c:	f800283a 	ret

00041250 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   41250:	defffb04 	addi	sp,sp,-20
   41254:	df000415 	stw	fp,16(sp)
   41258:	df000404 	addi	fp,sp,16
   4125c:	e13ffe15 	stw	r4,-8(fp)
   41260:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   41264:	e0bfff17 	ldw	r2,-4(fp)
   41268:	10840070 	cmpltui	r2,r2,4097
   4126c:	1000021e 	bne	r2,zero,41278 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   41270:	00840004 	movi	r2,4096
   41274:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   41278:	e0fffe17 	ldw	r3,-8(fp)
   4127c:	e0bfff17 	ldw	r2,-4(fp)
   41280:	1885883a 	add	r2,r3,r2
   41284:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   41288:	e0bffe17 	ldw	r2,-8(fp)
   4128c:	e0bffd15 	stw	r2,-12(fp)
   41290:	00000506 	br	412a8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   41294:	e0bffd17 	ldw	r2,-12(fp)
   41298:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4129c:	e0bffd17 	ldw	r2,-12(fp)
   412a0:	10800804 	addi	r2,r2,32
   412a4:	e0bffd15 	stw	r2,-12(fp)
   412a8:	e0fffd17 	ldw	r3,-12(fp)
   412ac:	e0bffc17 	ldw	r2,-16(fp)
   412b0:	18bff836 	bltu	r3,r2,41294 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   412b4:	e0bffe17 	ldw	r2,-8(fp)
   412b8:	108007cc 	andi	r2,r2,31
   412bc:	1005003a 	cmpeq	r2,r2,zero
   412c0:	1000021e 	bne	r2,zero,412cc <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   412c4:	e0bffd17 	ldw	r2,-12(fp)
   412c8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   412cc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   412d0:	e037883a 	mov	sp,fp
   412d4:	df000017 	ldw	fp,0(sp)
   412d8:	dec00104 	addi	sp,sp,4
   412dc:	f800283a 	ret

000412e0 <exit>:
   412e0:	defffe04 	addi	sp,sp,-8
   412e4:	dc400015 	stw	r17,0(sp)
   412e8:	000b883a 	mov	r5,zero
   412ec:	2023883a 	mov	r17,r4
   412f0:	dfc00115 	stw	ra,4(sp)
   412f4:	00413400 	call	41340 <__call_exitprocs>
   412f8:	8809883a 	mov	r4,r17
   412fc:	004153c0 	call	4153c <_exit>

00041300 <memcmp>:
   41300:	31ffffc4 	addi	r7,r6,-1
   41304:	3000061e 	bne	r6,zero,41320 <memcmp+0x20>
   41308:	00000a06 	br	41334 <memcmp+0x34>
   4130c:	39ffffc4 	addi	r7,r7,-1
   41310:	00bfffc4 	movi	r2,-1
   41314:	21000044 	addi	r4,r4,1
   41318:	29400044 	addi	r5,r5,1
   4131c:	38800526 	beq	r7,r2,41334 <memcmp+0x34>
   41320:	20c00003 	ldbu	r3,0(r4)
   41324:	28800003 	ldbu	r2,0(r5)
   41328:	18bff826 	beq	r3,r2,4130c <memcmp+0xc>
   4132c:	1885c83a 	sub	r2,r3,r2
   41330:	f800283a 	ret
   41334:	0005883a 	mov	r2,zero
   41338:	f800283a 	ret

0004133c <register_fini>:
   4133c:	f800283a 	ret

00041340 <__call_exitprocs>:
   41340:	defff304 	addi	sp,sp,-52
   41344:	00800134 	movhi	r2,4
   41348:	10861704 	addi	r2,r2,6236
   4134c:	df000b15 	stw	fp,44(sp)
   41350:	17000017 	ldw	fp,0(r2)
   41354:	00800034 	movhi	r2,0
   41358:	10800004 	addi	r2,r2,0
   4135c:	1005003a 	cmpeq	r2,r2,zero
   41360:	d8800215 	stw	r2,8(sp)
   41364:	e0800c04 	addi	r2,fp,48
   41368:	dd800915 	stw	r22,36(sp)
   4136c:	dd400815 	stw	r21,32(sp)
   41370:	dfc00c15 	stw	ra,48(sp)
   41374:	ddc00a15 	stw	r23,40(sp)
   41378:	dd000715 	stw	r20,28(sp)
   4137c:	dcc00615 	stw	r19,24(sp)
   41380:	dc800515 	stw	r18,20(sp)
   41384:	dc400415 	stw	r17,16(sp)
   41388:	dc000315 	stw	r16,12(sp)
   4138c:	282d883a 	mov	r22,r5
   41390:	d9000115 	stw	r4,4(sp)
   41394:	d8800015 	stw	r2,0(sp)
   41398:	282b003a 	cmpeq	r21,r5,zero
   4139c:	e4400c17 	ldw	r17,48(fp)
   413a0:	88001226 	beq	r17,zero,413ec <__call_exitprocs+0xac>
   413a4:	ddc00017 	ldw	r23,0(sp)
   413a8:	88800117 	ldw	r2,4(r17)
   413ac:	8c802217 	ldw	r18,136(r17)
   413b0:	143fffc4 	addi	r16,r2,-1
   413b4:	80000b16 	blt	r16,zero,413e4 <__call_exitprocs+0xa4>
   413b8:	9027003a 	cmpeq	r19,r18,zero
   413bc:	a800171e 	bne	r21,zero,4141c <__call_exitprocs+0xdc>
   413c0:	9800051e 	bne	r19,zero,413d8 <__call_exitprocs+0x98>
   413c4:	8409883a 	add	r4,r16,r16
   413c8:	2105883a 	add	r2,r4,r4
   413cc:	1485883a 	add	r2,r2,r18
   413d0:	10c02017 	ldw	r3,128(r2)
   413d4:	b0c01226 	beq	r22,r3,41420 <__call_exitprocs+0xe0>
   413d8:	843fffc4 	addi	r16,r16,-1
   413dc:	00bfffc4 	movi	r2,-1
   413e0:	80bff61e 	bne	r16,r2,413bc <__call_exitprocs+0x7c>
   413e4:	d8800217 	ldw	r2,8(sp)
   413e8:	10003226 	beq	r2,zero,414b4 <__call_exitprocs+0x174>
   413ec:	dfc00c17 	ldw	ra,48(sp)
   413f0:	df000b17 	ldw	fp,44(sp)
   413f4:	ddc00a17 	ldw	r23,40(sp)
   413f8:	dd800917 	ldw	r22,36(sp)
   413fc:	dd400817 	ldw	r21,32(sp)
   41400:	dd000717 	ldw	r20,28(sp)
   41404:	dcc00617 	ldw	r19,24(sp)
   41408:	dc800517 	ldw	r18,20(sp)
   4140c:	dc400417 	ldw	r17,16(sp)
   41410:	dc000317 	ldw	r16,12(sp)
   41414:	dec00d04 	addi	sp,sp,52
   41418:	f800283a 	ret
   4141c:	8409883a 	add	r4,r16,r16
   41420:	88c00117 	ldw	r3,4(r17)
   41424:	2105883a 	add	r2,r4,r4
   41428:	1445883a 	add	r2,r2,r17
   4142c:	18ffffc4 	addi	r3,r3,-1
   41430:	11800217 	ldw	r6,8(r2)
   41434:	1c001826 	beq	r3,r16,41498 <__call_exitprocs+0x158>
   41438:	10000215 	stw	zero,8(r2)
   4143c:	303fe626 	beq	r6,zero,413d8 <__call_exitprocs+0x98>
   41440:	8d000117 	ldw	r20,4(r17)
   41444:	9800121e 	bne	r19,zero,41490 <__call_exitprocs+0x150>
   41448:	00c00044 	movi	r3,1
   4144c:	1c06983a 	sll	r3,r3,r16
   41450:	90804017 	ldw	r2,256(r18)
   41454:	1884703a 	and	r2,r3,r2
   41458:	10000d26 	beq	r2,zero,41490 <__call_exitprocs+0x150>
   4145c:	90804117 	ldw	r2,260(r18)
   41460:	1884703a 	and	r2,r3,r2
   41464:	10000e1e 	bne	r2,zero,414a0 <__call_exitprocs+0x160>
   41468:	2105883a 	add	r2,r4,r4
   4146c:	1485883a 	add	r2,r2,r18
   41470:	11400017 	ldw	r5,0(r2)
   41474:	d9000117 	ldw	r4,4(sp)
   41478:	303ee83a 	callr	r6
   4147c:	88800117 	ldw	r2,4(r17)
   41480:	a0bfc61e 	bne	r20,r2,4139c <__call_exitprocs+0x5c>
   41484:	b8800017 	ldw	r2,0(r23)
   41488:	147fd326 	beq	r2,r17,413d8 <__call_exitprocs+0x98>
   4148c:	003fc306 	br	4139c <__call_exitprocs+0x5c>
   41490:	303ee83a 	callr	r6
   41494:	003ff906 	br	4147c <__call_exitprocs+0x13c>
   41498:	8c000115 	stw	r16,4(r17)
   4149c:	003fe706 	br	4143c <__call_exitprocs+0xfc>
   414a0:	2105883a 	add	r2,r4,r4
   414a4:	1485883a 	add	r2,r2,r18
   414a8:	11000017 	ldw	r4,0(r2)
   414ac:	303ee83a 	callr	r6
   414b0:	003ff206 	br	4147c <__call_exitprocs+0x13c>
   414b4:	88800117 	ldw	r2,4(r17)
   414b8:	10000b1e 	bne	r2,zero,414e8 <__call_exitprocs+0x1a8>
   414bc:	89000017 	ldw	r4,0(r17)
   414c0:	20000a26 	beq	r4,zero,414ec <__call_exitprocs+0x1ac>
   414c4:	b9000015 	stw	r4,0(r23)
   414c8:	90000226 	beq	r18,zero,414d4 <__call_exitprocs+0x194>
   414cc:	9009883a 	mov	r4,r18
   414d0:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   414d4:	8809883a 	mov	r4,r17
   414d8:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   414dc:	bc400017 	ldw	r17,0(r23)
   414e0:	883fb11e 	bne	r17,zero,413a8 <__call_exitprocs+0x68>
   414e4:	003fc106 	br	413ec <__call_exitprocs+0xac>
   414e8:	89000017 	ldw	r4,0(r17)
   414ec:	882f883a 	mov	r23,r17
   414f0:	2023883a 	mov	r17,r4
   414f4:	883fac1e 	bne	r17,zero,413a8 <__call_exitprocs+0x68>
   414f8:	003fbc06 	br	413ec <__call_exitprocs+0xac>

000414fc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   414fc:	defffd04 	addi	sp,sp,-12
   41500:	df000215 	stw	fp,8(sp)
   41504:	df000204 	addi	fp,sp,8
   41508:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   4150c:	e0bfff17 	ldw	r2,-4(fp)
   41510:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   41514:	e0bffe17 	ldw	r2,-8(fp)
   41518:	1005003a 	cmpeq	r2,r2,zero
   4151c:	1000021e 	bne	r2,zero,41528 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   41520:	002af070 	cmpltui	zero,zero,43969
   41524:	00000106 	br	4152c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   41528:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   4152c:	e037883a 	mov	sp,fp
   41530:	df000017 	ldw	fp,0(sp)
   41534:	dec00104 	addi	sp,sp,4
   41538:	f800283a 	ret

0004153c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4153c:	defffd04 	addi	sp,sp,-12
   41540:	dfc00215 	stw	ra,8(sp)
   41544:	df000115 	stw	fp,4(sp)
   41548:	df000104 	addi	fp,sp,4
   4154c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   41550:	e13fff17 	ldw	r4,-4(fp)
   41554:	00414fc0 	call	414fc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   41558:	003fff06 	br	41558 <_exit+0x1c>
   4155c:	0004133c 	xorhi	zero,zero,4172
