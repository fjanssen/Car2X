	component ethernet_system is
		port (
			ethernet_subsys_clk_in_clk        : in  std_logic                     := 'X';             -- clk
			ethernet_subsys_reset_in_reset_n  : in  std_logic                     := 'X';             -- reset_n
			ethernet_bridge_s0_waitrequest    : out std_logic;                                        -- waitrequest
			ethernet_bridge_s0_readdata       : out std_logic_vector(31 downto 0);                    -- readdata
			ethernet_bridge_s0_readdatavalid  : out std_logic;                                        -- readdatavalid
			ethernet_bridge_s0_burstcount     : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			ethernet_bridge_s0_writedata      : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			ethernet_bridge_s0_address        : in  std_logic_vector(10 downto 0) := (others => 'X'); -- address
			ethernet_bridge_s0_write          : in  std_logic                     := 'X';             -- write
			ethernet_bridge_s0_read           : in  std_logic                     := 'X';             -- read
			ethernet_bridge_s0_byteenable     : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			ethernet_bridge_s0_debugaccess    : in  std_logic                     := 'X';             -- debugaccess
			tse_conduit_connection_rgmii_in   : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- rgmii_in
			tse_conduit_connection_rgmii_out  : out std_logic_vector(3 downto 0);                     -- rgmii_out
			tse_conduit_connection_rx_control : in  std_logic                     := 'X';             -- rx_control
			tse_conduit_connection_tx_control : out std_logic;                                        -- tx_control
			tse_conduit_connection_tx_clk     : in  std_logic                     := 'X';             -- tx_clk
			tse_conduit_connection_rx_clk     : in  std_logic                     := 'X';             -- rx_clk
			tse_conduit_connection_set_10     : in  std_logic                     := 'X';             -- set_10
			tse_conduit_connection_set_1000   : in  std_logic                     := 'X';             -- set_1000
			tse_conduit_connection_ena_10     : out std_logic;                                        -- ena_10
			tse_conduit_connection_eth_mode   : out std_logic;                                        -- eth_mode
			tse_conduit_connection_mdio_out   : out std_logic;                                        -- mdio_out
			tse_conduit_connection_mdio_oen   : out std_logic;                                        -- mdio_oen
			tse_conduit_connection_mdio_in    : in  std_logic                     := 'X';             -- mdio_in
			tse_conduit_connection_mdc        : out std_logic;                                        -- mdc
			sgdma_rx_csr_irq_irq              : out std_logic;                                        -- irq
			sgdma_rx_m_write_waitrequest      : in  std_logic                     := 'X';             -- waitrequest
			sgdma_rx_m_write_address          : out std_logic_vector(31 downto 0);                    -- address
			sgdma_rx_m_write_write            : out std_logic;                                        -- write
			sgdma_rx_m_write_writedata        : out std_logic_vector(31 downto 0);                    -- writedata
			sgdma_rx_m_write_byteenable       : out std_logic_vector(3 downto 0);                     -- byteenable
			sgdma_tx_csr_irq_irq              : out std_logic;                                        -- irq
			sgdma_tx_m_read_readdata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			sgdma_tx_m_read_readdatavalid     : in  std_logic                     := 'X';             -- readdatavalid
			sgdma_tx_m_read_waitrequest       : in  std_logic                     := 'X';             -- waitrequest
			sgdma_tx_m_read_address           : out std_logic_vector(31 downto 0);                    -- address
			sgdma_tx_m_read_read              : out std_logic;                                        -- read
			descriptor_memory_s2_address      : in  std_logic_vector(10 downto 0) := (others => 'X'); -- address
			descriptor_memory_s2_chipselect   : in  std_logic                     := 'X';             -- chipselect
			descriptor_memory_s2_clken        : in  std_logic                     := 'X';             -- clken
			descriptor_memory_s2_readdata     : out std_logic_vector(31 downto 0);                    -- readdata
			descriptor_memory_s2_write        : in  std_logic                     := 'X';             -- write
			descriptor_memory_s2_writedata    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			descriptor_memory_s2_byteenable   : in  std_logic_vector(3 downto 0)  := (others => 'X')  -- byteenable
		);
	end component ethernet_system;

