//This code file was generated by ComBuilder on 17.03.2014 17:43:39

/**********************************************************************************
File Description:
For general sensor information see '../sensors/'AccelerationSensor.h

All messages have to be understand by Nios2 and Linux-PC. Please use the flag
CENTRAL_ECU_BUILD to distinguish the different builds!

**********************************************************************************/


/**********************************************************************************
SubMessage Description:
Contains the acceleration values of the GSensor.
**********************************************************************************/

// Include guard for different build types
#ifndef CENTRAL_ECU_BUILD
#include "accelerometer_interface.h"
#endif /* CENTRAL_ECU_BUILD */

// Export Interfaces
#include "AccelerationValuesMessage.h"

// Import Interfaces

/*
 * Basic Constructor. Used to initialise new message-objects.
 */
CAccelerationValuesMessage::CAccelerationValuesMessage()
{
    setHeader(9, getLength(), 0);

    m_iXAcceleration = 0;
	m_iYAcceleration = 0;
	m_iZAcceleration = 0;

	m_uiAccelerationFlags = 0;
}

/*
 * Constructor. Used to reassemble object from Byte stream.
 * pMessage : Byte-Array containing the fields of the subMessage
 * iLength  : Length of the said array
 */
CAccelerationValuesMessage::CAccelerationValuesMessage(alt_u8 *pMessage, int iLength)
{
    parseHeader(pMessage, iLength);
    if(m_bValid)
    {
        m_bValid = false;
        parseMessage(pMessage+4, iLength-4);
    }

}

/*
 * Basic Destructor.
 */
CAccelerationValuesMessage::~CAccelerationValuesMessage()
{
}

/*
 * Overrided from CCarMessage.
 */
void CAccelerationValuesMessage::doAction()
{
	alt_16 iAcceleration[3];
	bool bAccelerationValid = false;

#ifndef CENTRAL_ECU_BUILD
	bAccelerationValid = getAcceleration(iAcceleration);
	if(bAccelerationValid)
		answerMessage(iAcceleration[0], iAcceleration[1], iAcceleration[2], 0x01);
	else
		answerMessage(iAcceleration[0], iAcceleration[1], iAcceleration[2], 0x00);
#endif /* CENTRAL_ECU_BUILD */

}

/*
 * Overrided from CCarMessage.
 */
void CAccelerationValuesMessage::answerMessage(alt_16 iXAcceleraition, alt_16 iYAcceleration, alt_16 iZAcceleration, alt_u8 uiAccelerationFlags)
{
    m_iXAcceleration = iXAcceleraition;
    m_iYAcceleration = iYAcceleration;
    m_iZAcceleration = iZAcceleration;
    m_uiAccelerationFlags = uiAccelerationFlags;
    m_uiFlags = m_uiFlags | 0x01; // Set response flag
}

/*
 * Overrided from CCarMessage.
 */
bool CAccelerationValuesMessage::getBytes(alt_u8 *pMessage)
{
    CCarMessage::getBytes(pMessage);

    pMessage[4] = (m_iXAcceleration >> 0) & 0xFF;
    pMessage[5] += (m_iXAcceleration >> 8) & 0xFF;
    pMessage[6] = (m_iYAcceleration >> 0) & 0xFF;
    pMessage[7] += (m_iYAcceleration >> 8) & 0xFF;
    pMessage[8] = (m_iZAcceleration >> 0) & 0xFF;
    pMessage[9] += (m_iZAcceleration >> 8) & 0xFF;
    pMessage[10] = 0;
    pMessage[11] = m_uiAccelerationFlags;
    return m_bValid;
}

/*
 * Overrided from CCarMessage.
 */
alt_u32 CAccelerationValuesMessage::getLength()
{
    return 12;
}

/*
 * Overrided from CCarMessage.
 */
void CAccelerationValuesMessage::parseMessage(alt_u8 *pMessage, int iLength)
{
    if(iLength < 8)
        return;

    m_iXAcceleration = ((alt_u32) pMessage[0]) << 0;
    m_iXAcceleration = ((alt_u32) pMessage[1]) << 8;
    m_iYAcceleration = ((alt_u32) pMessage[2]) << 0;
    m_iYAcceleration = ((alt_u32) pMessage[3]) << 8;
    m_iZAcceleration = ((alt_u32) pMessage[4]) << 0;
    m_iZAcceleration = ((alt_u32) pMessage[5]) << 8;
    m_uiAccelerationFlags = pMessage[7];

    m_bValid = true;

}

