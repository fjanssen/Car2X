//This code file was generated by ComBuilder on 17.03.2014 16:57:59

/**********************************************************************************
File Description:
For general sensor information see '../sensors/'UltrasoundSensor.h

All messages have to be understand by Nios2 and Linux-PC. Please use the flag
CENTRAL_ECU_BUILD to distinguish the different builds!

**********************************************************************************/


/**********************************************************************************
SubMessage Description:
Message contains the distance and a valid-flag.
**********************************************************************************/

// Include guard for different build types
#ifndef CENTRAL_ECU_BUILD
#include "../external_drivers/ultrasound_interface.h"
#endif /* CENTRAL_ECU_BUILD */

// Export Interfaces
#include "UltrasoundDistanceMessage.h"

// Import Interfaces

/*
 * Basic Constructor. Used to initialise new message-objects.
 */
CUltrasoundDistanceMessage::CUltrasoundDistanceMessage()
{
    setHeader(8, getLength(), 0);

    m_uiDistanceValid = 0;
	m_uiDistance = 0;

    m_bValid = true;
}

/*
 * Constructor. Used to reassemble object from Byte stream.
 * pMessage : Byte-Array containing the fields of the subMessage
 * iLength  : Length of the said array
 */
CUltrasoundDistanceMessage::CUltrasoundDistanceMessage(alt_u8 *pMessage, int iLength)
{
    parseHeader(pMessage, iLength);
    if(m_bValid)
    {
        m_bValid = false;
        parseMessage(pMessage+4, iLength-4);
    }

}

/*
 * Basic Destructor.
 */
CUltrasoundDistanceMessage::~CUltrasoundDistanceMessage()
{
}

/*
 * Overrided from CCarMessage.
 */
void CUltrasoundDistanceMessage::doAction()
{
#ifndef CENTRAL_ECU_BUILD
	alt_32 distance = measuredistance(0x6001120);
	answerMessage(distance);
#endif /* CENTRAL_ECU_BUILD */

}

/*
 * Overrided from CCarMessage.
 */
void CUltrasoundDistanceMessage::answerMessage(alt_32 iDistance)
{
    m_uiDistance = iDistance;
    if(iDistance >= 0)
		m_uiDistanceValid = 1;
	else
		m_uiDistanceValid = 0;
    m_uiFlags = m_uiFlags | 0x01; // Set response flag
}

/*
 * Overrided from CCarMessage.
 */
bool CUltrasoundDistanceMessage::getBytes(alt_u8 *pMessage)
{
    CCarMessage::getBytes(pMessage);

    pMessage[4] = (m_uiDistance >> 0) & 0xFF;
    pMessage[5] += (m_uiDistance >> 8) & 0xFF;
    pMessage[6] = 0;
    pMessage[7] = m_uiDistanceValid;
    return m_bValid;
}

/*
 * Overrided from CCarMessage.
 */
alt_u32 CUltrasoundDistanceMessage::getLength()
{
    return 8;
}

/*
 * Overrided from CCarMessage.
 */
void CUltrasoundDistanceMessage::parseMessage(alt_u8 *pMessage, int iLength)
{
    if(iLength < 4)
        return;

    m_uiDistance = ((alt_u32) pMessage[0]) << 0;
    m_uiDistance = ((alt_u32) pMessage[1]) << 8;
    m_uiDistanceValid = pMessage[3];

    m_bValid = true;
}

