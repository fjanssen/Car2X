
C:/Car2X/tse_tutorial.elf:     file format elf32-littlenios2
C:/Car2X/tse_tutorial.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080168

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00004988 memsz 0x00004988 flags r-x
    LOAD off    0x000059a8 vaddr 0x000849a8 paddr 0x00086870 align 2**12
         filesz 0x00001ec8 memsz 0x00001ec8 flags rw-
    LOAD off    0x00008738 vaddr 0x00088738 paddr 0x00088738 align 2**12
         filesz 0x00000000 memsz 0x0000055c flags rw-
    LOAD off    0x00008000 vaddr 0x00101000 paddr 0x00088c94 align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000046e4  00080168  00080168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000015c  0008484c  0008484c  0000584c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ec8  000849a8  00086870  000059a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000055c  00088738  00088738  00008738  2**2
                  ALLOC, SMALL_DATA
  6 .descriptor_memory 00000080  00101000  00088c94  00008000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .comment      00000023  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000938  00000000  00000000  000080a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00001222  00000000  00000000  000089e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00018ded  00000000  00000000  00009c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000058e8  00000000  00000000  000229ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c949  00000000  00000000  000282d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001048  00000000  00000000  00034c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000024f1  00000000  00000000  00035c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004530  00000000  00000000  00038159  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0003c68c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000002b0  00000000  00000000  0003c6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003f39e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0003f3a1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003f3a6  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003f3a7  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0003f3a8  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0003f3b1  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0003f3ba  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  0003f3c3  2**0
                  CONTENTS, READONLY
 26 .jdi          00009911  00000000  00000000  0003f3ce  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000789a9  00000000  00000000  00048cdf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080168 l    d  .text	00000000 .text
0008484c l    d  .rodata	00000000 .rodata
000849a8 l    d  .rwdata	00000000 .rwdata
00088738 l    d  .bss	00000000 .bss
00101000 l    d  .descriptor_memory	00000000 .descriptor_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tse_tutorial.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00084da8 l     O .rwdata	00001060 jtag_uart
00085e08 l     O .rwdata	00000010 mutex_shared_memory
00085e18 l     O .rwdata	00000030 sgdma_rx
00085e48 l     O .rwdata	00000030 sgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000809c4 l     F .text	00000054 altera_avalon_jtag_uart_timeout
00080a98 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00080f80 l     F .text	00000028 alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
000812b0 l     F .text	00000068 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00081810 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00081a38 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_remap_uncached.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00086020 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00082708 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00082aec l     F .text	00000058 std
00082bf8 l     F .text	00000008 __fp_lock
00082c00 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 refill.c
00083e9c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0008686c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000842f4 g     F .text	00000070 _isatty_r
00080600 g     F .text	00000050 alt_main
000801a4 g     F .text	000000c0 rx_ethernet_isr
00100000 g       *ABS*	00000000 __alt_mem_shared_memory
00088b94 g     O .bss	00000100 alt_irq
00084364 g     F .text	00000078 _lseek_r
00086870 g       *ABS*	00000000 __flash_rwdata_start
00088c94 g       *ABS*	00000000 __alt_heap_start
00081180 g     F .text	00000094 alt_avalon_sgdma_do_sync_transfer
00083f30 g     F .text	00000068 __sseek
00082b54 g     F .text	000000a4 __sinit
00082480 g     F .text	00000130 __swbuf_r
00082c54 g     F .text	00000068 __sfmoreglue
00084608 g     F .text	00000004 __malloc_unlock
00081318 g     F .text	0000012c alt_avalon_sgdma_construct_descriptor_burst
00082c44 g     F .text	00000010 _cleanup
00081040 g     F .text	00000018 altera_avalon_mutex_trylock
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000001c __reset
00080f38 g     F .text	00000028 altera_avalon_mutex_is_mine
0008151c g     F .text	0000004c alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00080020 g       *ABS*	00000000 __flash_exceptions_start
00084280 g     F .text	00000074 _fstat_r
0008875c g     O .bss	00000004 errno
000823f8 g     F .text	00000014 __srget
00088748 g     O .bss	00000004 alt_argv
0008e828 g       *ABS*	00000000 _gp
00085ea0 g     O .rwdata	00000180 alt_fd_list
0008201c g     F .text	00000090 _getc_r
00081f84 g     F .text	00000098 getc
00081888 g     F .text	00000070 alt_find_dev
00082120 g     F .text	000000a0 memcpy
00082c38 g     F .text	0000000c _cleanup_r
00081a9c g     F .text	00000098 alt_io_redirect
0008148c g     F .text	00000050 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
00080c40 g     F .text	00000168 altera_avalon_jtag_uart_read
000844e8 g     F .text	00000084 isatty
00081f10 g     F .text	0000003c alt_icache_flush
00088760 g     O .bss	00000004 __malloc_top_pad
0008114c g     F .text	0000001c alt_avalon_sgdma_stop
00083eb8 g     F .text	00000070 _sbrk_r
000843dc g     F .text	00000078 _read_r
00081de4 g     F .text	00000004 alt_dcache_flush
00086848 g     O .rwdata	00000004 alt_max_fd
0008415c g     F .text	00000110 _fclose_r
00082ab8 g     F .text	00000034 fflush
00088764 g     O .bss	00000004 __malloc_max_sbrked_mem
00080000 g       *ABS*	00000000 __alt_mem_main_memory
0008456c g     F .text	00000098 lseek
00080f28 g     F .text	00000010 altera_avalon_mutex_first_lock
00086860 g     O .rwdata	00000004 _global_impure_ptr
00088c94 g       *ABS*	00000000 __bss_end
000819d0 g     F .text	00000068 alt_iic_isr_register
00080514 g     F .text	00000028 alt_getchar
00081214 g     F .text	0000009c alt_avalon_sgdma_do_async_transfer
00081d30 g     F .text	000000ac alt_tick
00101060 g     O .descriptor_memory	00000020 rx_descriptor_end
00082c20 g     F .text	00000018 __fp_lock_all
00081918 g     F .text	00000018 alt_ic_irq_enabled
00081cfc g     F .text	00000034 alt_alarm_stop
00101000 g       *ABS*	00000000 __alt_mem_descriptor_memory
00088750 g     O .bss	00000004 alt_irq_active
000849a8 g     O .rwdata	00000400 tx_frame
000800ec g     F .exceptions	0000007c alt_irq_handler
00085e78 g     O .rwdata	00000028 alt_dev_null
00080fa8 g     F .text	0000005c altera_avalon_mutex_open
0008166c g     F .text	00000030 alt_avalon_sgdma_check_descriptor_status
0008180c g     F .text	00000004 alt_dcache_flush_all
00101040 g     O .descriptor_memory	00000020 rx_descriptor
00086870 g       *ABS*	00000000 __ram_rwdata_end
00086840 g     O .rwdata	00000008 alt_dev_list
00084754 g     F .text	000000f4 write
0008111c g     F .text	00000030 alt_avalon_sgdma_enable_desc_poll
000822c4 g     F .text	000000e8 _putc_r
00086828 g     O .rwdata	00000008 alt_mutex_list
000849a8 g       *ABS*	00000000 __ram_rodata_end
00084468 g     F .text	00000080 fstat
000814dc g     F .text	00000040 alt_avalon_sgdma_construct_mem_to_stream_desc
00081058 g     F .text	00000010 alt_avalon_sgdma_register_callback
00088c94 g       *ABS*	00000000 end
00080a18 g     F .text	00000080 altera_avalon_jtag_uart_init
00099000 g       *ABS*	00000000 __alt_stack_pointer
000810fc g     F .text	00000020 alt_avalon_sgdma_disable_desc_poll
00080da8 g     F .text	0000017c altera_avalon_jtag_uart_write
000815d8 g     F .text	00000038 alt_avalon_sgdma_construct_mem_to_mem_desc
00082b44 g     F .text	00000004 __sfp_lock_acquire
00081568 g     F .text	00000028 alt_avalon_sgdma_construct_stream_to_mem_desc
00082ed8 g     F .text	00000314 _free_r
00080650 g     F .text	000001dc alt_printf
000823ac g     F .text	0000004c __srget_r
0008270c g     F .text	000001b0 __call_exitprocs
00086868 g     O .rwdata	00000004 __malloc_sbrk_base
00080168 g     F .text	0000003c _start
00088754 g     O .bss	00000004 _alt_tick_rate
00088738 g     O .bss	00000004 sgdma_tx_dev
00081610 g     F .text	0000005c alt_avalon_sgdma_open
00088758 g     O .bss	00000004 _alt_nticks
0008873c g     O .bss	00000004 text_length
0008460c g     F .text	000000f8 read
00080854 g     F .text	00000080 alt_sys_init
00080f60 g     F .text	00000020 altera_avalon_mutex_unlock
00081cd4 g     F .text	00000028 alt_remap_uncached
0008098c g     F .text	00000038 altera_avalon_jtag_uart_close
000849a8 g       *ABS*	00000000 __ram_rwdata_start
0008484c g       *ABS*	00000000 __ram_rodata_start
00088b6c g     O .bss	00000028 __malloc_current_mallinfo
00080964 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
00081ea4 g     F .text	0000006c alt_get_fd
000840ec g     F .text	00000070 _close_r
000820ac g     F .text	00000074 memcmp
00080914 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
00088c94 g       *ABS*	00000000 __alt_stack_base
000808f4 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
000825cc g     F .text	0000013c __swsetup_r
00082cbc g     F .text	000000f0 __sfp
00086420 g     O .rwdata	00000408 __malloc_av_
00082b50 g     F .text	00000004 __sinit_lock_release
00084014 g     F .text	00000060 __sread
00081de8 g     F .text	000000bc alt_find_file
00081818 g     F .text	00000070 alt_dev_llist_insert
00084604 g     F .text	00000004 __malloc_lock
00084704 g     F .text	00000050 sbrk
00081168 g     F .text	00000018 alt_avalon_sgdma_start
000828bc g     F .text	000001fc _fflush_r
00088738 g       *ABS*	00000000 __bss_start
00083c40 g     F .text	00000098 memset
00080264 g     F .text	000002b0 main
0008874c g     O .bss	00000004 alt_envp
00088768 g     O .bss	00000004 __malloc_max_total_mem
0008093c g     F .text	00000028 altera_avalon_jtag_uart_write_fd
000825b0 g     F .text	0000001c __swbuf
00086830 g     O .rwdata	00000008 alt_sgdma_list
00083f28 g     F .text	00000008 __sclose
00099000 g       *ABS*	00000000 __alt_heap_limit
0008426c g     F .text	00000014 fclose
00081004 g     F .text	0000003c altera_avalon_mutex_lock
00083500 g     F .text	00000740 _malloc_r
0008684c g     O .rwdata	00000004 alt_errno
00101000 g     O .descriptor_memory	00000020 tx_descriptor
0008876c g     O .bss	00000400 rx_frame
000832b4 g     F .text	000000b8 _fwalk
000821c0 g     F .text	00000104 putc
00082dac g     F .text	0000012c _malloc_trim_r
0008484c g       *ABS*	00000000 __flash_rodata_start
000808d4 g     F .text	00000020 alt_irq_init
00081cb0 g     F .text	00000024 alt_release_fd
00084074 g     F .text	00000078 _write_r
0008685c g     O .rwdata	00000004 _impure_ptr
00088744 g     O .bss	00000004 alt_argc
00083cd8 g     F .text	000001c4 __srefill_r
00080020 g       .exceptions	00000000 alt_irq_entry
00082c08 g     F .text	00000018 __fp_unlock_all
00086838 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
000819b0 g     F .text	00000020 alt_ic_isr_register
00086870 g       *ABS*	00000000 _edata
00088c94 g       *ABS*	00000000 _end
00080168 g       *ABS*	00000000 __ram_exceptions_end
00080bcc g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00081970 g     F .text	00000040 alt_ic_irq_disable
00101020 g     O .descriptor_memory	00000020 tx_descriptor_end
00081444 g     F .text	00000048 alt_avalon_sgdma_construct_descriptor
00083f98 g     F .text	0000007c __swrite
00086864 g     O .rwdata	00000004 __malloc_trim_threshold
00081ddc g     F .text	00000008 altera_nios2_qsys_irq_init
00081f4c g     F .text	00000038 exit
000831ec g     F .text	000000c8 _fwalk_reent
00099000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00082b48 g     F .text	00000004 __sfp_lock_release
00088740 g     O .bss	00000004 sgdma_rx_dev
00084454 g     F .text	00000014 _exit
0008169c g     F .text	00000094 alt_alarm_start
0008336c g     F .text	00000194 __smakebuf_r
0008240c g     F .text	00000074 strlen
00081b34 g     F .text	0000017c open
0008082c g     F .text	00000028 alt_putchar
000818f8 g     F .text	00000020 alt_icache_flush_all
00086850 g     O .rwdata	00000004 alt_priority_mask
00081930 g     F .text	00000040 alt_ic_irq_enable
00080f24 g     F .text	00000004 altera_avalon_mutex_close
00081590 g     F .text	00000048 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
00086854 g     O .rwdata	00000008 alt_alarm_list
00081730 g     F .text	000000dc close
0008053c g     F .text	000000c4 alt_load
00081068 g     F .text	00000094 alt_avalon_sgdma_init
00000000  w      *UND*	00000000 free
00082b4c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08405a14 	ori	at,at,360
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__reset-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defffe04 	addi	sp,sp,-8
   800f0:	dfc00115 	stw	ra,4(sp)
   800f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800f8:	000d313a 	rdctl	r6,ipending
   800fc:	04000274 	movhi	r16,9
   80100:	8422e504 	addi	r16,r16,-29804
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80104:	3080004c 	andi	r2,r6,1
   80108:	1005003a 	cmpeq	r2,r2,zero
   8010c:	10000a1e 	bne	r2,zero,80138 <alt_irq_handler+0x4c>
   80110:	0009883a 	mov	r4,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   80114:	200490fa 	slli	r2,r4,3
   80118:	1405883a 	add	r2,r2,r16
   8011c:	10c00017 	ldw	r3,0(r2)
   80120:	11000117 	ldw	r4,4(r2)
   80124:	183ee83a 	callr	r3
   80128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   8012c:	10000a26 	beq	r2,zero,80158 <alt_irq_handler+0x6c>
   80130:	100d883a 	mov	r6,r2
   80134:	003ff306 	br	80104 <alt_irq_handler+0x18>
   80138:	00c00044 	movi	r3,1
   8013c:	0009883a 	mov	r4,zero
   80140:	180b883a 	mov	r5,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80144:	18c7883a 	add	r3,r3,r3
      i++;
   80148:	2149883a 	add	r4,r4,r5
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8014c:	30c4703a 	and	r2,r6,r3
   80150:	103ff01e 	bne	r2,zero,80114 <alt_irq_handler+0x28>
   80154:	003ffb06 	br	80144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   80158:	dfc00117 	ldw	ra,4(sp)
   8015c:	dc000017 	ldw	r16,0(sp)
   80160:	dec00204 	addi	sp,sp,8
   80164:	f800283a 	ret

Disassembly of section .text:

00080168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80168:	06c00274 	movhi	sp,9
    ori sp, sp, %lo(__alt_stack_pointer)
   8016c:	dee40014 	ori	sp,sp,36864

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   80170:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   80174:	d6ba0a14 	ori	gp,gp,59432
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80178:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   8017c:	10a1ce14 	ori	r2,r2,34616

    movhi r3, %hi(__bss_end)
   80180:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   80184:	18e32514 	ori	r3,r3,35988

    beq r2, r3, 1f
   80188:	10c00326 	beq	r2,r3,80198 <_start+0x30>

0:
    stw zero, (r2)
   8018c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80194:	10fffd36 	bltu	r2,r3,8018c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80198:	008053c0 	call	8053c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   8019c:	00806000 	call	80600 <alt_main>

000801a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801a0:	003fff06 	br	801a0 <alt_after_alt_main>

000801a4 <rx_ethernet_isr>:

/****************************************************************************************
 * Subroutine to read incoming Ethernet frames
****************************************************************************************/
void rx_ethernet_isr (void *context)
{
   801a4:	defffc04 	addi	sp,sp,-16
   801a8:	dfc00315 	stw	ra,12(sp)
   801ac:	dc400215 	stw	r17,8(sp)
   801b0:	dc000115 	stw	r16,4(sp)
	int i;

	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
   801b4:	01000434 	movhi	r4,16
   801b8:	21041004 	addi	r4,r4,4160
   801bc:	008166c0 	call	8166c <alt_avalon_sgdma_check_descriptor_status>
   801c0:	103ffc1e 	bne	r2,zero,801b4 <rx_ethernet_isr+0x10>
		;
	
	// Clear input line before writing
	for (i = 0; i < (6 + text_length); i++) {
   801c4:	d0e7c517 	ldw	r3,-24812(gp)
   801c8:	00bffe84 	movi	r2,-6
   801cc:	18800926 	beq	r3,r2,801f4 <rx_ethernet_isr+0x50>
   801d0:	0021883a 	mov	r16,zero
		alt_printf( "%c", 0x08 );		 // 0x08 --> backspace	
   801d4:	01000234 	movhi	r4,8
   801d8:	21121304 	addi	r4,r4,18508
   801dc:	01400204 	movi	r5,8
   801e0:	00806500 	call	80650 <alt_printf>
	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
		;
	
	// Clear input line before writing
	for (i = 0; i < (6 + text_length); i++) {
   801e4:	84000044 	addi	r16,r16,1
   801e8:	d0a7c517 	ldw	r2,-24812(gp)
   801ec:	10800184 	addi	r2,r2,6
   801f0:	80bff836 	bltu	r16,r2,801d4 <rx_ethernet_isr+0x30>
		alt_printf( "%c", 0x08 );		 // 0x08 --> backspace	
	}
	
	// Output received text		
	alt_printf( "receive> %s\n", rx_frame + 16 );
   801f4:	04400274 	movhi	r17,9
   801f8:	8c61df04 	addi	r17,r17,-30852
   801fc:	01000234 	movhi	r4,8
   80200:	21121404 	addi	r4,r4,18512
   80204:	880b883a 	mov	r5,r17
   80208:	00806500 	call	80650 <alt_printf>
	
	// Reprint current input line after the output
	alt_printf( "send> %s", tx_frame + 16 );
   8020c:	01000234 	movhi	r4,8
   80210:	21121804 	addi	r4,r4,18528
   80214:	01400234 	movhi	r5,8
   80218:	29526e04 	addi	r5,r5,18872
   8021c:	00806500 	call	80650 <alt_printf>
	
	// Create new receive sgdma descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, rx_frame, 0, 0 );
   80220:	04000434 	movhi	r16,16
   80224:	84041004 	addi	r16,r16,4160
   80228:	d8000015 	stw	zero,0(sp)
   8022c:	8009883a 	mov	r4,r16
   80230:	01400434 	movhi	r5,16
   80234:	29441804 	addi	r5,r5,4192
   80238:	89bffc04 	addi	r6,r17,-16
   8023c:	000f883a 	mov	r7,zero
   80240:	00815680 	call	81568 <alt_avalon_sgdma_construct_stream_to_mem_desc>
	
	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   80244:	d127c617 	ldw	r4,-24808(gp)
   80248:	800b883a 	mov	r5,r16
   8024c:	00812140 	call	81214 <alt_avalon_sgdma_do_async_transfer>
}
   80250:	dfc00317 	ldw	ra,12(sp)
   80254:	dc400217 	ldw	r17,8(sp)
   80258:	dc000117 	ldw	r16,4(sp)
   8025c:	dec00404 	addi	sp,sp,16
   80260:	f800283a 	ret

00080264 <main>:
 *  1. Records input text and transmits the text via Ethernet after Enter is 
 *     pressed
 *  2. Displays text received via Ethernet frame on the JTAG UART
********************************************************************************/
int main(void)
{	
   80264:	defff704 	addi	sp,sp,-36
   80268:	dfc00815 	stw	ra,32(sp)
   8026c:	dcc00715 	stw	r19,28(sp)
   80270:	dc800615 	stw	r18,24(sp)
   80274:	dc400515 	stw	r17,20(sp)
   80278:	dc000415 	stw	r16,16(sp)
	// Open the sgdma transmit device
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
   8027c:	01000234 	movhi	r4,8
   80280:	21121b04 	addi	r4,r4,18540
   80284:	00816100 	call	81610 <alt_avalon_sgdma_open>
   80288:	d0a7c415 	stw	r2,-24816(gp)
	if (sgdma_tx_dev == NULL) {
   8028c:	1000041e 	bne	r2,zero,802a0 <main+0x3c>
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
   80290:	01000234 	movhi	r4,8
   80294:	21121f04 	addi	r4,r4,18556
   80298:	00806500 	call	80650 <alt_printf>
   8029c:	00009506 	br	804f4 <main+0x290>
		return -1;
	} else alt_printf ("Opened scatter-gather dma transmit device\n");
   802a0:	01000234 	movhi	r4,8
   802a4:	21122e04 	addi	r4,r4,18616
   802a8:	00806500 	call	80650 <alt_printf>
		
	// Open the sgdma receive device
	sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
   802ac:	01000234 	movhi	r4,8
   802b0:	21123904 	addi	r4,r4,18660
   802b4:	00816100 	call	81610 <alt_avalon_sgdma_open>
   802b8:	d0a7c615 	stw	r2,-24808(gp)
	if (sgdma_rx_dev == NULL) {
   802bc:	1000041e 	bne	r2,zero,802d0 <main+0x6c>
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
   802c0:	01000234 	movhi	r4,8
   802c4:	21123d04 	addi	r4,r4,18676
   802c8:	00806500 	call	80650 <alt_printf>
   802cc:	00008906 	br	804f4 <main+0x290>
		return -1;
	} else alt_printf ("Opened scatter-gather dma receive device\n");
   802d0:	01000234 	movhi	r4,8
   802d4:	21124c04 	addi	r4,r4,18736
   802d8:	00806500 	call	80650 <alt_printf>

	// Set interrupts for the sgdma receive device
	alt_avalon_sgdma_register_callback( sgdma_rx_dev, (alt_avalon_sgdma_callback) rx_ethernet_isr, 0x00000014, NULL );
   802dc:	d127c617 	ldw	r4,-24808(gp)
   802e0:	01400234 	movhi	r5,8
   802e4:	29406904 	addi	r5,r5,420
   802e8:	01800504 	movi	r6,20
   802ec:	000f883a 	mov	r7,zero
   802f0:	00810580 	call	81058 <alt_avalon_sgdma_register_callback>
	
	// Create sgdma receive descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, rx_frame, 0, 0 );
   802f4:	04000434 	movhi	r16,16
   802f8:	84041004 	addi	r16,r16,4160
   802fc:	d8000015 	stw	zero,0(sp)
   80300:	8009883a 	mov	r4,r16
   80304:	01400434 	movhi	r5,16
   80308:	29441804 	addi	r5,r5,4192
   8030c:	01800274 	movhi	r6,9
   80310:	31a1db04 	addi	r6,r6,-30868
   80314:	000f883a 	mov	r7,zero
   80318:	00815680 	call	81568 <alt_avalon_sgdma_construct_stream_to_mem_desc>
	
	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   8031c:	d127c617 	ldw	r4,-24808(gp)
   80320:	800b883a 	mov	r5,r16
   80324:	00812140 	call	81214 <alt_avalon_sgdma_do_async_transfer>

	// Triple-speed Ethernet MegaCore base address
	volatile int * tse = (int *) 0x00102000;	
	
	// Initialize the MAC address 
	*(tse + 3) = 0x116E6001;
   80328:	00c45bb4 	movhi	r3,4462
   8032c:	18d80044 	addi	r3,r3,24577
   80330:	00800434 	movhi	r2,16
   80334:	10880304 	addi	r2,r2,8204
   80338:	10c00015 	stw	r3,0(r2)
	*(tse + 4) = 0x00000F02; 
   8033c:	00c3c084 	movi	r3,3842
   80340:	10800104 	addi	r2,r2,4
   80344:	10c00015 	stw	r3,0(r2)

	// Specify the addresses of the PHY devices to be accessed through MDIO interface
	*(tse + 0x0F) = 0x10;
   80348:	00c00404 	movi	r3,16
   8034c:	10800b04 	addi	r2,r2,44
   80350:	10c00015 	stw	r3,0(r2)
	*(tse + 0x10) = 0x11;
   80354:	00c00444 	movi	r3,17
   80358:	10800104 	addi	r2,r2,4
   8035c:	10c00015 	stw	r3,0(r2)
	
	// Write to register 20 of the PHY chip for Ethernet port 0 to set up line loopback
	*(tse + 0x94) = 0x4000;
   80360:	00d00004 	movi	r3,16384
   80364:	10808404 	addi	r2,r2,528
   80368:	10c00015 	stw	r3,0(r2)
	
	// Write to register 16 of the PHY chip for Ethernet port 1 to enable automatic crossover for all modes
	*(tse + 0xB0) = *(tse + 0xB0) | 0x0060;
   8036c:	00c00434 	movhi	r3,16
   80370:	18c8b004 	addi	r3,r3,8896
   80374:	18800017 	ldw	r2,0(r3)
   80378:	10801814 	ori	r2,r2,96
   8037c:	18800015 	stw	r2,0(r3)
	
	// Write to register 20 of the PHY chip for Ethernet port 2 to set up delay for input/output clk
	*(tse + 0xB4) = *(tse + 0xB4) | 0x0082;
   80380:	18c00404 	addi	r3,r3,16
   80384:	18800017 	ldw	r2,0(r3)
   80388:	10802094 	ori	r2,r2,130
   8038c:	18800015 	stw	r2,0(r3)
	
	// Software reset the second PHY chip and wait
	*(tse + 0xA0) = *(tse + 0xA0) | 0x8000;
   80390:	18ffec04 	addi	r3,r3,-80
   80394:	18800017 	ldw	r2,0(r3)
   80398:	10a00014 	ori	r2,r2,32768
   8039c:	18800015 	stw	r2,0(r3)
   803a0:	01200014 	movui	r4,32768
	while ( *(tse + 0xA0) & 0x8000  )
   803a4:	18800017 	ldw	r2,0(r3)
   803a8:	1104703a 	and	r2,r2,r4
   803ac:	103ffd1e 	bne	r2,zero,803a4 <main+0x140>
		;	 
	 
	// Enable read and write transfers, gigabit Ethernet operation, and CRC forwarding
	*(tse + 2) = *(tse + 2) | 0x0000004B;	
   803b0:	00c00434 	movhi	r3,16
   803b4:	18c80204 	addi	r3,r3,8200
   803b8:	18800017 	ldw	r2,0(r3)
   803bc:	108012d4 	ori	r2,r2,75
   803c0:	18800015 	stw	r2,0(r3)
	
	alt_printf( "send> " );
   803c4:	01000234 	movhi	r4,8
   803c8:	21125704 	addi	r4,r4,18780
   803cc:	00806500 	call	80650 <alt_printf>
	text_length = 0;
   803d0:	d027c515 	stw	zero,-24812(gp)
   803d4:	04400234 	movhi	r17,8
   803d8:	8c526a04 	addi	r17,r17,18856
   803dc:	04800404 	movi	r18,16
   803e0:	04c00434 	movhi	r19,16
   803e4:	9cc40004 	addi	r19,r19,4096
	
	while (1) {
		
		char new_char;
		tx_frame[16] = '\0';
   803e8:	88000405 	stb	zero,16(r17)
   803ec:	00002206 	br	80478 <main+0x214>
		
		// Add new typed characters to the transmit frame until the user types the return character
		while ( (new_char = alt_getchar()) != '\n'  ) {
		
			if (new_char == 0x08 && text_length > 0) {	// Check if character is a backspace and if there is anything to delete
   803f0:	81403fcc 	andi	r5,r16,255
   803f4:	2940201c 	xori	r5,r5,128
   803f8:	297fe004 	addi	r5,r5,-128
   803fc:	00800204 	movi	r2,8
   80400:	28800b1e 	bne	r5,r2,80430 <main+0x1cc>
   80404:	d0a7c517 	ldw	r2,-24812(gp)
   80408:	10000c26 	beq	r2,zero,8043c <main+0x1d8>

				alt_printf( "%c", new_char );
   8040c:	01000234 	movhi	r4,8
   80410:	21121304 	addi	r4,r4,18508
   80414:	00806500 	call	80650 <alt_printf>
				text_length--;
   80418:	d0a7c517 	ldw	r2,-24812(gp)
   8041c:	10bfffc4 	addi	r2,r2,-1
   80420:	d0a7c515 	stw	r2,-24812(gp)

				// Maintain the terminal character after the text
				tx_frame[16 + text_length] = '\0';
   80424:	1445883a 	add	r2,r2,r17
   80428:	10000405 	stb	zero,16(r2)
   8042c:	00001206 	br	80478 <main+0x214>

			} else if (text_length < 45) {				// Check if there is still room in the frame for another character
   80430:	00c00b04 	movi	r3,44
   80434:	d0a7c517 	ldw	r2,-24812(gp)
   80438:	18800f36 	bltu	r3,r2,80478 <main+0x214>
				alt_printf( "%c", new_char );
   8043c:	01000234 	movhi	r4,8
   80440:	21121304 	addi	r4,r4,18508
   80444:	81403fcc 	andi	r5,r16,255
   80448:	2940201c 	xori	r5,r5,128
   8044c:	297fe004 	addi	r5,r5,-128
   80450:	00806500 	call	80650 <alt_printf>
				
				// Add the new character to the output text
				tx_frame[16 + text_length] = new_char;
   80454:	d0e7c517 	ldw	r3,-24812(gp)
   80458:	1c45883a 	add	r2,r3,r17
   8045c:	1485883a 	add	r2,r2,r18
   80460:	14000005 	stb	r16,0(r2)
				text_length++;
   80464:	18c00044 	addi	r3,r3,1
   80468:	d0e7c515 	stw	r3,-24812(gp)

				// Maintain the terminal character after the text
				tx_frame[16 + text_length] = '\0';
   8046c:	1c47883a 	add	r3,r3,r17
   80470:	1c87883a 	add	r3,r3,r18
   80474:	18000005 	stb	zero,0(r3)
		
		char new_char;
		tx_frame[16] = '\0';
		
		// Add new typed characters to the transmit frame until the user types the return character
		while ( (new_char = alt_getchar()) != '\n'  ) {
   80478:	00805140 	call	80514 <alt_getchar>
   8047c:	1021883a 	mov	r16,r2
   80480:	10c03fcc 	andi	r3,r2,255
   80484:	18c0201c 	xori	r3,r3,128
   80488:	18ffe004 	addi	r3,r3,-128
   8048c:	00800284 	movi	r2,10
   80490:	18bfd71e 	bne	r3,r2,803f0 <main+0x18c>
				// Maintain the terminal character after the text
				tx_frame[16 + text_length] = '\0';
			}
		}

		alt_printf( "\nsend> " );
   80494:	01000234 	movhi	r4,8
   80498:	21125904 	addi	r4,r4,18788
   8049c:	00806500 	call	80650 <alt_printf>
		text_length = 0;
   804a0:	d027c515 	stw	zero,-24812(gp)
		
		// Create transmit sgdma descriptor
		alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor, &tx_descriptor_end, tx_frame, 62, 0, 1, 1, 0 );
   804a4:	d8000015 	stw	zero,0(sp)
   804a8:	00800044 	movi	r2,1
   804ac:	d8800115 	stw	r2,4(sp)
   804b0:	d8800215 	stw	r2,8(sp)
   804b4:	d8000315 	stw	zero,12(sp)
   804b8:	9809883a 	mov	r4,r19
   804bc:	01400434 	movhi	r5,16
   804c0:	29440804 	addi	r5,r5,4128
   804c4:	01800234 	movhi	r6,8
   804c8:	31926a04 	addi	r6,r6,18856
   804cc:	01c00f84 	movi	r7,62
   804d0:	00814dc0 	call	814dc <alt_avalon_sgdma_construct_mem_to_stream_desc>
		
		// Set up non-blocking transfer of sgdma transmit descriptor
		alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev, &tx_descriptor );
   804d4:	d127c417 	ldw	r4,-24816(gp)
   804d8:	980b883a 	mov	r5,r19
   804dc:	00812140 	call	81214 <alt_avalon_sgdma_do_async_transfer>
		
		// Wait until transmit descriptor transfer is complete
		while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0)
   804e0:	01000434 	movhi	r4,16
   804e4:	21040004 	addi	r4,r4,4096
   804e8:	008166c0 	call	8166c <alt_avalon_sgdma_check_descriptor_status>
   804ec:	103ffc1e 	bne	r2,zero,804e0 <main+0x27c>
   804f0:	003fbd06 	br	803e8 <main+0x184>
			;
	}    
	
	return 0;
}
   804f4:	00bfffc4 	movi	r2,-1
   804f8:	dfc00817 	ldw	ra,32(sp)
   804fc:	dcc00717 	ldw	r19,28(sp)
   80500:	dc800617 	ldw	r18,24(sp)
   80504:	dc400517 	ldw	r17,20(sp)
   80508:	dc000417 	ldw	r16,16(sp)
   8050c:	dec00904 	addi	sp,sp,36
   80510:	f800283a 	ret

00080514 <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   80514:	deffff04 	addi	sp,sp,-4
   80518:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    }
    return c;
#else
    return getchar();
   8051c:	00800234 	movhi	r2,8
   80520:	109a1704 	addi	r2,r2,26716
   80524:	10800017 	ldw	r2,0(r2)
   80528:	11000117 	ldw	r4,4(r2)
   8052c:	0081f840 	call	81f84 <getc>
#endif
}
   80530:	dfc00017 	ldw	ra,0(sp)
   80534:	dec00104 	addi	sp,sp,4
   80538:	f800283a 	ret

0008053c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8053c:	deffff04 	addi	sp,sp,-4
   80540:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   80544:	01000234 	movhi	r4,8
   80548:	211a1c04 	addi	r4,r4,26736
   8054c:	00c00234 	movhi	r3,8
   80550:	18d26a04 	addi	r3,r3,18856

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   80554:	20c00926 	beq	r4,r3,8057c <alt_load+0x40>
   80558:	01800234 	movhi	r6,8
   8055c:	319a1c04 	addi	r6,r6,26736
  {
    while( to != end )
   80560:	19800626 	beq	r3,r6,8057c <alt_load+0x40>
   80564:	01400104 	movi	r5,4
    {
      *to++ = *from++;
   80568:	20800017 	ldw	r2,0(r4)
   8056c:	18800015 	stw	r2,0(r3)
   80570:	1947883a 	add	r3,r3,r5
   80574:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   80578:	30fffb1e 	bne	r6,r3,80568 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8057c:	01000234 	movhi	r4,8
   80580:	21000804 	addi	r4,r4,32
   80584:	00c00234 	movhi	r3,8
   80588:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   8058c:	20c00926 	beq	r4,r3,805b4 <alt_load+0x78>
   80590:	01800234 	movhi	r6,8
   80594:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
   80598:	19800626 	beq	r3,r6,805b4 <alt_load+0x78>
   8059c:	01400104 	movi	r5,4
    {
      *to++ = *from++;
   805a0:	20800017 	ldw	r2,0(r4)
   805a4:	18800015 	stw	r2,0(r3)
   805a8:	1947883a 	add	r3,r3,r5
   805ac:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   805b0:	30fffb1e 	bne	r6,r3,805a0 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   805b4:	01000234 	movhi	r4,8
   805b8:	21121304 	addi	r4,r4,18508
   805bc:	00c00234 	movhi	r3,8
   805c0:	18d21304 	addi	r3,r3,18508

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   805c4:	20c00926 	beq	r4,r3,805ec <alt_load+0xb0>
   805c8:	01800234 	movhi	r6,8
   805cc:	31926a04 	addi	r6,r6,18856
  {
    while( to != end )
   805d0:	19800626 	beq	r3,r6,805ec <alt_load+0xb0>
   805d4:	01400104 	movi	r5,4
    {
      *to++ = *from++;
   805d8:	20800017 	ldw	r2,0(r4)
   805dc:	18800015 	stw	r2,0(r3)
   805e0:	1947883a 	add	r3,r3,r5
   805e4:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   805e8:	30fffb1e 	bne	r6,r3,805d8 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   805ec:	008180c0 	call	8180c <alt_dcache_flush_all>
  alt_icache_flush_all();
   805f0:	00818f80 	call	818f8 <alt_icache_flush_all>
}
   805f4:	dfc00017 	ldw	ra,0(sp)
   805f8:	dec00104 	addi	sp,sp,4
   805fc:	f800283a 	ret

00080600 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   80600:	defffe04 	addi	sp,sp,-8
   80604:	dfc00115 	stw	ra,4(sp)
   80608:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8060c:	0009883a 	mov	r4,zero
   80610:	00808d40 	call	808d4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   80614:	00808540 	call	80854 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   80618:	01800234 	movhi	r6,8
   8061c:	31925b04 	addi	r6,r6,18796
   80620:	3009883a 	mov	r4,r6
   80624:	300b883a 	mov	r5,r6
   80628:	0081a9c0 	call	81a9c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8062c:	d127c717 	ldw	r4,-24804(gp)
   80630:	d167c817 	ldw	r5,-24800(gp)
   80634:	d1a7c917 	ldw	r6,-24796(gp)
   80638:	00802640 	call	80264 <main>
   8063c:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
   80640:	01000044 	movi	r4,1
   80644:	00817300 	call	81730 <close>
  exit (result);
   80648:	8009883a 	mov	r4,r16
   8064c:	0081f4c0 	call	81f4c <exit>

00080650 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   80650:	defff804 	addi	sp,sp,-32
   80654:	dfc00415 	stw	ra,16(sp)
   80658:	dc800315 	stw	r18,12(sp)
   8065c:	dc400215 	stw	r17,8(sp)
   80660:	dc000115 	stw	r16,4(sp)
   80664:	d9400515 	stw	r5,20(sp)
   80668:	d9800615 	stw	r6,24(sp)
   8066c:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
   80670:	d8800504 	addi	r2,sp,20
   80674:	d8800015 	stw	r2,0(sp)
   80678:	2023883a 	mov	r17,r4
   8067c:	00005d06 	br	807f4 <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   80680:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   80684:	21003fcc 	andi	r4,r4,255
   80688:	2100201c 	xori	r4,r4,128
   8068c:	213fe004 	addi	r4,r4,-128
   80690:	00800944 	movi	r2,37
   80694:	20800226 	beq	r4,r2,806a0 <alt_printf+0x50>
        {
            alt_putchar(c);
   80698:	008082c0 	call	8082c <alt_putchar>
   8069c:	00005506 	br	807f4 <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   806a0:	89400003 	ldbu	r5,0(r17)
   806a4:	8c400044 	addi	r17,r17,1
   806a8:	29003fcc 	andi	r4,r5,255
   806ac:	2100201c 	xori	r4,r4,128
   806b0:	213fe004 	addi	r4,r4,-128
   806b4:	20005726 	beq	r4,zero,80814 <alt_printf+0x1c4>
            {
                if (c == '%')
   806b8:	00800944 	movi	r2,37
   806bc:	2080021e 	bne	r4,r2,806c8 <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   806c0:	008082c0 	call	8082c <alt_putchar>
   806c4:	00004b06 	br	807f4 <alt_printf+0x1a4>
                } 
                else if (c == 'c')
   806c8:	28c03fcc 	andi	r3,r5,255
   806cc:	18c0201c 	xori	r3,r3,128
   806d0:	18ffe004 	addi	r3,r3,-128
   806d4:	008018c4 	movi	r2,99
   806d8:	1880061e 	bne	r3,r2,806f4 <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
   806dc:	d8c00017 	ldw	r3,0(sp)
   806e0:	18800104 	addi	r2,r3,4
   806e4:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
   806e8:	19000017 	ldw	r4,0(r3)
   806ec:	008082c0 	call	8082c <alt_putchar>
   806f0:	00004006 	br	807f4 <alt_printf+0x1a4>
                }
                else if (c == 'x')
   806f4:	28c03fcc 	andi	r3,r5,255
   806f8:	18c0201c 	xori	r3,r3,128
   806fc:	18ffe004 	addi	r3,r3,-128
   80700:	00801e04 	movi	r2,120
   80704:	1880231e 	bne	r3,r2,80794 <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   80708:	d8c00017 	ldw	r3,0(sp)
   8070c:	18800104 	addi	r2,r3,4
   80710:	d8800015 	stw	r2,0(sp)
   80714:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   80718:	90000326 	beq	r18,zero,80728 <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   8071c:	90bc002c 	andhi	r2,r18,61440
   80720:	10000426 	beq	r2,zero,80734 <alt_printf+0xe4>
   80724:	00003906 	br	8080c <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   80728:	01000c04 	movi	r4,48
   8072c:	008082c0 	call	8082c <alt_putchar>
   80730:	00003006 	br	807f4 <alt_printf+0x1a4>
                        continue;
   80734:	04000704 	movi	r16,28
   80738:	013fff04 	movi	r4,-4
   8073c:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
   80740:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   80744:	1c04983a 	sll	r2,r3,r16
   80748:	9084703a 	and	r2,r18,r2
   8074c:	103ffc26 	beq	r2,zero,80740 <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   80750:	80002816 	blt	r16,zero,807f4 <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   80754:	008003c4 	movi	r2,15
   80758:	1404983a 	sll	r2,r2,r16
   8075c:	9084703a 	and	r2,r18,r2
   80760:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
   80764:	00800244 	movi	r2,9
   80768:	10c00236 	bltu	r2,r3,80774 <alt_printf+0x124>
                            c = '0' + digit;
   8076c:	19000c04 	addi	r4,r3,48
   80770:	00000106 	br	80778 <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
   80774:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
   80778:	21003fcc 	andi	r4,r4,255
   8077c:	2100201c 	xori	r4,r4,128
   80780:	213fe004 	addi	r4,r4,-128
   80784:	008082c0 	call	8082c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   80788:	843fff04 	addi	r16,r16,-4
   8078c:	80001916 	blt	r16,zero,807f4 <alt_printf+0x1a4>
   80790:	003ff006 	br	80754 <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   80794:	28c03fcc 	andi	r3,r5,255
   80798:	18c0201c 	xori	r3,r3,128
   8079c:	18ffe004 	addi	r3,r3,-128
   807a0:	00801cc4 	movi	r2,115
   807a4:	1880131e 	bne	r3,r2,807f4 <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   807a8:	d8800017 	ldw	r2,0(sp)
   807ac:	10c00104 	addi	r3,r2,4
   807b0:	d8c00015 	stw	r3,0(sp)
   807b4:	14000017 	ldw	r16,0(r2)

                    while(*s)
   807b8:	81000003 	ldbu	r4,0(r16)
   807bc:	20803fcc 	andi	r2,r4,255
   807c0:	1080201c 	xori	r2,r2,128
   807c4:	10bfe004 	addi	r2,r2,-128
   807c8:	10000a26 	beq	r2,zero,807f4 <alt_printf+0x1a4>
                      alt_putchar(*s++);
   807cc:	84000044 	addi	r16,r16,1
   807d0:	21003fcc 	andi	r4,r4,255
   807d4:	2100201c 	xori	r4,r4,128
   807d8:	213fe004 	addi	r4,r4,-128
   807dc:	008082c0 	call	8082c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   807e0:	81000003 	ldbu	r4,0(r16)
   807e4:	20803fcc 	andi	r2,r4,255
   807e8:	1080201c 	xori	r2,r2,128
   807ec:	10bfe004 	addi	r2,r2,-128
   807f0:	103ff61e 	bne	r2,zero,807cc <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   807f4:	89000003 	ldbu	r4,0(r17)
   807f8:	20803fcc 	andi	r2,r4,255
   807fc:	1080201c 	xori	r2,r2,128
   80800:	10bfe004 	addi	r2,r2,-128
   80804:	103f9e1e 	bne	r2,zero,80680 <alt_printf+0x30>
   80808:	00000206 	br	80814 <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
   8080c:	04000704 	movi	r16,28
   80810:	003fd006 	br	80754 <alt_printf+0x104>
   80814:	dfc00417 	ldw	ra,16(sp)
   80818:	dc800317 	ldw	r18,12(sp)
   8081c:	dc400217 	ldw	r17,8(sp)
   80820:	dc000117 	ldw	r16,4(sp)
   80824:	dec00804 	addi	sp,sp,32
   80828:	f800283a 	ret

0008082c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   8082c:	deffff04 	addi	sp,sp,-4
   80830:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   80834:	00800234 	movhi	r2,8
   80838:	109a1704 	addi	r2,r2,26716
   8083c:	10800017 	ldw	r2,0(r2)
   80840:	11400217 	ldw	r5,8(r2)
   80844:	00821c00 	call	821c0 <putc>
#endif
}
   80848:	dfc00017 	ldw	ra,0(sp)
   8084c:	dec00104 	addi	sp,sp,4
   80850:	f800283a 	ret

00080854 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   80854:	defffe04 	addi	sp,sp,-8
   80858:	dfc00115 	stw	ra,4(sp)
   8085c:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   80860:	04000234 	movhi	r16,8
   80864:	84137404 	addi	r16,r16,19920
   80868:	8009883a 	mov	r4,r16
   8086c:	000b883a 	mov	r5,zero
   80870:	000d883a 	mov	r6,zero
   80874:	0080a180 	call	80a18 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   80878:	813ff604 	addi	r4,r16,-40
   8087c:	01400234 	movhi	r5,8
   80880:	295a1004 	addi	r5,r5,26688
   80884:	00818180 	call	81818 <alt_dev_llist_insert>
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  if (!ret_code)
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
   80888:	01000234 	movhi	r4,8
   8088c:	21178204 	addi	r4,r4,24072
   80890:	01400234 	movhi	r5,8
   80894:	295a0a04 	addi	r5,r5,26664
   80898:	00818180 	call	81818 <alt_dev_llist_insert>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_SHARED_MEMORY, mutex_shared_memory);
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
   8089c:	01000234 	movhi	r4,8
   808a0:	21178604 	addi	r4,r4,24088
   808a4:	000b883a 	mov	r5,zero
   808a8:	01800044 	movi	r6,1
   808ac:	00810680 	call	81068 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
   808b0:	01000234 	movhi	r4,8
   808b4:	21179204 	addi	r4,r4,24136
   808b8:	000b883a 	mov	r5,zero
   808bc:	01800084 	movi	r6,2
   808c0:	00810680 	call	81068 <alt_avalon_sgdma_init>
    TRIPLE_SPEED_ETHERNET_INIT ( TSE_MAC, tse_mac);
}
   808c4:	dfc00117 	ldw	ra,4(sp)
   808c8:	dc000017 	ldw	r16,0(sp)
   808cc:	dec00204 	addi	sp,sp,8
   808d0:	f800283a 	ret

000808d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   808d4:	deffff04 	addi	sp,sp,-4
   808d8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
   808dc:	0081ddc0 	call	81ddc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   808e0:	00800044 	movi	r2,1
   808e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   808e8:	dfc00017 	ldw	ra,0(sp)
   808ec:	dec00104 	addi	sp,sp,4
   808f0:	f800283a 	ret

000808f4 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   808f4:	deffff04 	addi	sp,sp,-4
   808f8:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   808fc:	21000017 	ldw	r4,0(r4)
   80900:	21000a04 	addi	r4,r4,40
   80904:	0080bcc0 	call	80bcc <altera_avalon_jtag_uart_ioctl>
}
   80908:	dfc00017 	ldw	ra,0(sp)
   8090c:	dec00104 	addi	sp,sp,4
   80910:	f800283a 	ret

00080914 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   80914:	deffff04 	addi	sp,sp,-4
   80918:	dfc00015 	stw	ra,0(sp)
   8091c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   80920:	21000017 	ldw	r4,0(r4)
   80924:	21000a04 	addi	r4,r4,40
   80928:	11400217 	ldw	r5,8(r2)
   8092c:	008098c0 	call	8098c <altera_avalon_jtag_uart_close>
}
   80930:	dfc00017 	ldw	ra,0(sp)
   80934:	dec00104 	addi	sp,sp,4
   80938:	f800283a 	ret

0008093c <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8093c:	deffff04 	addi	sp,sp,-4
   80940:	dfc00015 	stw	ra,0(sp)
   80944:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   80948:	21000017 	ldw	r4,0(r4)
   8094c:	21000a04 	addi	r4,r4,40
   80950:	11c00217 	ldw	r7,8(r2)
   80954:	0080da80 	call	80da8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   80958:	dfc00017 	ldw	ra,0(sp)
   8095c:	dec00104 	addi	sp,sp,4
   80960:	f800283a 	ret

00080964 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   80964:	deffff04 	addi	sp,sp,-4
   80968:	dfc00015 	stw	ra,0(sp)
   8096c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   80970:	21000017 	ldw	r4,0(r4)
   80974:	21000a04 	addi	r4,r4,40
   80978:	11c00217 	ldw	r7,8(r2)
   8097c:	0080c400 	call	80c40 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   80980:	dfc00017 	ldw	ra,0(sp)
   80984:	dec00104 	addi	sp,sp,4
   80988:	f800283a 	ret

0008098c <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8098c:	21800c17 	ldw	r6,48(r4)
   80990:	2950000c 	andi	r5,r5,16384
   80994:	280b003a 	cmpeq	r5,r5,zero
   80998:	00000306 	br	809a8 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
   8099c:	2800021e 	bne	r5,zero,809a8 <altera_avalon_jtag_uart_close+0x1c>
   809a0:	00bffd44 	movi	r2,-11
   809a4:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   809a8:	20800d17 	ldw	r2,52(r4)
   809ac:	11800326 	beq	r2,r6,809bc <altera_avalon_jtag_uart_close+0x30>
   809b0:	20c00917 	ldw	r3,36(r4)
   809b4:	20800117 	ldw	r2,4(r4)
   809b8:	18bff836 	bltu	r3,r2,8099c <altera_avalon_jtag_uart_close+0x10>
   809bc:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
   809c0:	f800283a 	ret

000809c4 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   809c4:	20800017 	ldw	r2,0(r4)
   809c8:	10c00104 	addi	r3,r2,4
   809cc:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   809d0:	01410004 	movi	r5,1024
   809d4:	1144703a 	and	r2,r2,r5
   809d8:	10000526 	beq	r2,zero,809f0 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   809dc:	20800817 	ldw	r2,32(r4)
   809e0:	1144b03a 	or	r2,r2,r5
   809e4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   809e8:	20000915 	stw	zero,36(r4)
   809ec:	00000606 	br	80a08 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   809f0:	20c00917 	ldw	r3,36(r4)
   809f4:	00a00034 	movhi	r2,32768
   809f8:	10bfff04 	addi	r2,r2,-4
   809fc:	10c00236 	bltu	r2,r3,80a08 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
   80a00:	18800044 	addi	r2,r3,1
   80a04:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   80a08:	00800274 	movhi	r2,9
   80a0c:	10a1d504 	addi	r2,r2,-30892
   80a10:	10800017 	ldw	r2,0(r2)
   80a14:	f800283a 	ret

00080a18 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   80a18:	defffd04 	addi	sp,sp,-12
   80a1c:	dfc00215 	stw	ra,8(sp)
   80a20:	dc000115 	stw	r16,4(sp)
   80a24:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80a28:	00c00044 	movi	r3,1
   80a2c:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   80a30:	20800017 	ldw	r2,0(r4)
   80a34:	10c00135 	stwio	r3,4(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   80a38:	d8000015 	stw	zero,0(sp)
   80a3c:	2809883a 	mov	r4,r5
   80a40:	300b883a 	mov	r5,r6
   80a44:	01800234 	movhi	r6,8
   80a48:	3182a604 	addi	r6,r6,2712
   80a4c:	800f883a 	mov	r7,r16
   80a50:	00819b00 	call	819b0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   80a54:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   80a58:	81000204 	addi	r4,r16,8
   80a5c:	00800274 	movhi	r2,9
   80a60:	10a1d504 	addi	r2,r2,-30892
   80a64:	11400017 	ldw	r5,0(r2)
   80a68:	01800234 	movhi	r6,8
   80a6c:	31827104 	addi	r6,r6,2500
   80a70:	800f883a 	mov	r7,r16
   80a74:	008169c0 	call	8169c <alt_alarm_start>
   80a78:	1000030e 	bge	r2,zero,80a88 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   80a7c:	00a00034 	movhi	r2,32768
   80a80:	10bfffc4 	addi	r2,r2,-1
   80a84:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   80a88:	dfc00217 	ldw	ra,8(sp)
   80a8c:	dc000117 	ldw	r16,4(sp)
   80a90:	dec00304 	addi	sp,sp,12
   80a94:	f800283a 	ret

00080a98 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
   80a98:	22000017 	ldw	r8,0(r4)
   80a9c:	03800104 	movi	r14,4
   80aa0:	4399883a 	add	r12,r8,r14
   80aa4:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80aa8:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   80aac:	5880c00c 	andi	r2,r11,768
   80ab0:	10004526 	beq	r2,zero,80bc8 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   80ab4:	5880400c 	andi	r2,r11,256
   80ab8:	10002126 	beq	r2,zero,80b40 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80abc:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   80ac0:	10800044 	addi	r2,r2,1
   80ac4:	1081ffcc 	andi	r2,r2,2047
   80ac8:	20c00b17 	ldw	r3,44(r4)
   80acc:	10c01626 	beq	r2,r3,80b28 <altera_avalon_jtag_uart_irq+0x90>
   80ad0:	02a00014 	movui	r10,32768
   80ad4:	02400e04 	movi	r9,56
   80ad8:	01c00044 	movi	r7,1
   80adc:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   80ae0:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   80ae4:	2a84703a 	and	r2,r5,r10
   80ae8:	10000d26 	beq	r2,zero,80b20 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   80aec:	20800a17 	ldw	r2,40(r4)
   80af0:	1105883a 	add	r2,r2,r4
   80af4:	1245883a 	add	r2,r2,r9
   80af8:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80afc:	20800a17 	ldw	r2,40(r4)
   80b00:	11c5883a 	add	r2,r2,r7
   80b04:	1184703a 	and	r2,r2,r6
   80b08:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80b0c:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   80b10:	11c5883a 	add	r2,r2,r7
   80b14:	1184703a 	and	r2,r2,r6
   80b18:	20c00b17 	ldw	r3,44(r4)
   80b1c:	10fff01e 	bne	r2,r3,80ae0 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   80b20:	2b44703a 	and	r2,r5,r13
   80b24:	10000626 	beq	r2,zero,80b40 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80b28:	20800817 	ldw	r2,32(r4)
   80b2c:	00ffff84 	movi	r3,-2
   80b30:	10c4703a 	and	r2,r2,r3
   80b34:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   80b38:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80b3c:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   80b40:	5880800c 	andi	r2,r11,512
   80b44:	103fd826 	beq	r2,zero,80aa8 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   80b48:	5b44703a 	and	r2,r11,r13
   80b4c:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
   80b50:	283fd526 	beq	r5,zero,80aa8 <altera_avalon_jtag_uart_irq+0x10>
   80b54:	20c00d17 	ldw	r3,52(r4)
   80b58:	20800c17 	ldw	r2,48(r4)
   80b5c:	18801126 	beq	r3,r2,80ba4 <altera_avalon_jtag_uart_irq+0x10c>
   80b60:	02420e04 	movi	r9,2104
   80b64:	01800044 	movi	r6,1
   80b68:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   80b6c:	20800d17 	ldw	r2,52(r4)
   80b70:	1105883a 	add	r2,r2,r4
   80b74:	1245883a 	add	r2,r2,r9
   80b78:	10800007 	ldb	r2,0(r2)
   80b7c:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80b80:	20800d17 	ldw	r2,52(r4)
   80b84:	1185883a 	add	r2,r2,r6
   80b88:	11c4703a 	and	r2,r2,r7
   80b8c:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   80b90:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   80b94:	283fc426 	beq	r5,zero,80aa8 <altera_avalon_jtag_uart_irq+0x10>
   80b98:	20c00d17 	ldw	r3,52(r4)
   80b9c:	20800c17 	ldw	r2,48(r4)
   80ba0:	18bff21e 	bne	r3,r2,80b6c <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80ba4:	20c00817 	ldw	r3,32(r4)
   80ba8:	00bfff44 	movi	r2,-3
   80bac:	1886703a 	and	r3,r3,r2
   80bb0:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80bb4:	20800017 	ldw	r2,0(r4)
   80bb8:	1385883a 	add	r2,r2,r14
   80bbc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80bc0:	60800037 	ldwio	r2,0(r12)
   80bc4:	003fb806 	br	80aa8 <altera_avalon_jtag_uart_irq+0x10>
   80bc8:	f800283a 	ret

00080bcc <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
   80bcc:	009a8044 	movi	r2,27137
   80bd0:	28800326 	beq	r5,r2,80be0 <altera_avalon_jtag_uart_ioctl+0x14>
   80bd4:	009a8084 	movi	r2,27138
   80bd8:	2880171e 	bne	r5,r2,80c38 <altera_avalon_jtag_uart_ioctl+0x6c>
   80bdc:	00000d06 	br	80c14 <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   80be0:	20c00117 	ldw	r3,4(r4)
   80be4:	00a00034 	movhi	r2,32768
   80be8:	10bfffc4 	addi	r2,r2,-1
   80bec:	18801226 	beq	r3,r2,80c38 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   80bf0:	31800017 	ldw	r6,0(r6)
   80bf4:	30ffff84 	addi	r3,r6,-2
   80bf8:	10bfff44 	addi	r2,r2,-3
   80bfc:	10c0022e 	bgeu	r2,r3,80c08 <altera_avalon_jtag_uart_ioctl+0x3c>
   80c00:	01a00034 	movhi	r6,32768
   80c04:	31bfff84 	addi	r6,r6,-2
   80c08:	21800115 	stw	r6,4(r4)
   80c0c:	0005883a 	mov	r2,zero
   80c10:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   80c14:	20c00117 	ldw	r3,4(r4)
   80c18:	00a00034 	movhi	r2,32768
   80c1c:	10bfffc4 	addi	r2,r2,-1
   80c20:	18800526 	beq	r3,r2,80c38 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   80c24:	20800917 	ldw	r2,36(r4)
   80c28:	10c5803a 	cmpltu	r2,r2,r3
   80c2c:	30800015 	stw	r2,0(r6)
   80c30:	0005883a 	mov	r2,zero
   80c34:	f800283a 	ret
   80c38:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
   80c3c:	f800283a 	ret

00080c40 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   80c40:	defff604 	addi	sp,sp,-40
   80c44:	dfc00915 	stw	ra,36(sp)
   80c48:	df000815 	stw	fp,32(sp)
   80c4c:	ddc00715 	stw	r23,28(sp)
   80c50:	dd800615 	stw	r22,24(sp)
   80c54:	dd400515 	stw	r21,20(sp)
   80c58:	dd000415 	stw	r20,16(sp)
   80c5c:	dcc00315 	stw	r19,12(sp)
   80c60:	dc800215 	stw	r18,8(sp)
   80c64:	dc400115 	stw	r17,4(sp)
   80c68:	dc000015 	stw	r16,0(sp)
   80c6c:	2025883a 	mov	r18,r4
   80c70:	282f883a 	mov	r23,r5
   80c74:	3027883a 	mov	r19,r6
   80c78:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   80c7c:	0180220e 	bge	zero,r6,80d08 <altera_avalon_jtag_uart_read+0xc8>
   80c80:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   80c84:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
   80c88:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
   80c8c:	b4400236 	bltu	r22,r17,80c98 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
   80c90:	b461c83a 	sub	r16,r22,r17
   80c94:	00000206 	br	80ca0 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   80c98:	00820004 	movi	r2,2048
   80c9c:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
   80ca0:	80000d26 	beq	r16,zero,80cd8 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
   80ca4:	9829883a 	mov	r20,r19
   80ca8:	9c001d36 	bltu	r19,r16,80d20 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   80cac:	91400e04 	addi	r5,r18,56
   80cb0:	a809883a 	mov	r4,r21
   80cb4:	2c4b883a 	add	r5,r5,r17
   80cb8:	800d883a 	mov	r6,r16
   80cbc:	00821200 	call	82120 <memcpy>
      ptr   += n;
   80cc0:	ac2b883a 	add	r21,r21,r16
      space -= n;
   80cc4:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80cc8:	8445883a 	add	r2,r16,r17
   80ccc:	1081ffcc 	andi	r2,r2,2047
   80cd0:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
   80cd4:	04ffeb16 	blt	zero,r19,80c84 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
   80cd8:	adc01c1e 	bne	r21,r23,80d4c <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   80cdc:	e090000c 	andi	r2,fp,16384
   80ce0:	10000d1e 	bne	r2,zero,80d18 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   80ce4:	90800a17 	ldw	r2,40(r18)
   80ce8:	b080031e 	bne	r22,r2,80cf8 <altera_avalon_jtag_uart_read+0xb8>
   80cec:	90c00917 	ldw	r3,36(r18)
   80cf0:	90800117 	ldw	r2,4(r18)
   80cf4:	18bffb36 	bltu	r3,r2,80ce4 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   80cf8:	90800a17 	ldw	r2,40(r18)
   80cfc:	b0800426 	beq	r22,r2,80d10 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   80d00:	04c0030e 	bge	zero,r19,80d10 <altera_avalon_jtag_uart_read+0xd0>
   80d04:	003fde06 	br	80c80 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   80d08:	3890000c 	andi	r2,r7,16384
   80d0c:	1000021e 	bne	r2,zero,80d18 <altera_avalon_jtag_uart_read+0xd8>
   80d10:	00bffec4 	movi	r2,-5
   80d14:	00001806 	br	80d78 <altera_avalon_jtag_uart_read+0x138>
   80d18:	00bffd44 	movi	r2,-11
   80d1c:	00001606 	br	80d78 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   80d20:	91400e04 	addi	r5,r18,56
   80d24:	a809883a 	mov	r4,r21
   80d28:	894b883a 	add	r5,r17,r5
   80d2c:	980d883a 	mov	r6,r19
   80d30:	00821200 	call	82120 <memcpy>
      ptr   += n;
   80d34:	aceb883a 	add	r21,r21,r19
      space -= n;
   80d38:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80d3c:	a445883a 	add	r2,r20,r17
   80d40:	1081ffcc 	andi	r2,r2,2047
   80d44:	90800b15 	stw	r2,44(r18)
   80d48:	003fe306 	br	80cd8 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80d4c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80d50:	00bfff84 	movi	r2,-2
   80d54:	2084703a 	and	r2,r4,r2
   80d58:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80d5c:	90800817 	ldw	r2,32(r18)
   80d60:	10800054 	ori	r2,r2,1
   80d64:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80d68:	90c00017 	ldw	r3,0(r18)
   80d6c:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80d70:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   80d74:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
   80d78:	dfc00917 	ldw	ra,36(sp)
   80d7c:	df000817 	ldw	fp,32(sp)
   80d80:	ddc00717 	ldw	r23,28(sp)
   80d84:	dd800617 	ldw	r22,24(sp)
   80d88:	dd400517 	ldw	r21,20(sp)
   80d8c:	dd000417 	ldw	r20,16(sp)
   80d90:	dcc00317 	ldw	r19,12(sp)
   80d94:	dc800217 	ldw	r18,8(sp)
   80d98:	dc400117 	ldw	r17,4(sp)
   80d9c:	dc000017 	ldw	r16,0(sp)
   80da0:	dec00a04 	addi	sp,sp,40
   80da4:	f800283a 	ret

00080da8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   80da8:	defff804 	addi	sp,sp,-32
   80dac:	dfc00715 	stw	ra,28(sp)
   80db0:	dd800615 	stw	r22,24(sp)
   80db4:	dd400515 	stw	r21,20(sp)
   80db8:	dd000415 	stw	r20,16(sp)
   80dbc:	dcc00315 	stw	r19,12(sp)
   80dc0:	dc800215 	stw	r18,8(sp)
   80dc4:	dc400115 	stw	r17,4(sp)
   80dc8:	dc000015 	stw	r16,0(sp)
   80dcc:	2021883a 	mov	r16,r4
   80dd0:	282d883a 	mov	r22,r5
   80dd4:	3011883a 	mov	r8,r6
   80dd8:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   80ddc:	01800616 	blt	zero,r6,80df8 <altera_avalon_jtag_uart_write+0x50>
   80de0:	2829883a 	mov	r20,r5
   80de4:	00002106 	br	80e6c <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
   80de8:	a585c83a 	sub	r2,r20,r22
   80dec:	00004306 	br	80efc <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
   80df0:	00bffd44 	movi	r2,-11
   80df4:	00004106 	br	80efc <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   80df8:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   80dfc:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
   80e00:	81400d17 	ldw	r5,52(r16)

      if (in < out)
   80e04:	9140032e 	bgeu	r18,r5,80e14 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   80e08:	2c85c83a 	sub	r2,r5,r18
   80e0c:	11bfffc4 	addi	r6,r2,-1
   80e10:	00000606 	br	80e2c <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
   80e14:	28000326 	beq	r5,zero,80e24 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   80e18:	00820004 	movi	r2,2048
   80e1c:	148dc83a 	sub	r6,r2,r18
   80e20:	00000206 	br	80e2c <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   80e24:	0081ffc4 	movi	r2,2047
   80e28:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
   80e2c:	30002626 	beq	r6,zero,80ec8 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
   80e30:	4027883a 	mov	r19,r8
   80e34:	3023883a 	mov	r17,r6
   80e38:	4180012e 	bgeu	r8,r6,80e40 <altera_avalon_jtag_uart_write+0x98>
   80e3c:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   80e40:	81020e04 	addi	r4,r16,2104
   80e44:	2489883a 	add	r4,r4,r18
   80e48:	a00b883a 	mov	r5,r20
   80e4c:	880d883a 	mov	r6,r17
   80e50:	00821200 	call	82120 <memcpy>
      ptr   += n;
   80e54:	a469883a 	add	r20,r20,r17
      count -= n;
   80e58:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80e5c:	9445883a 	add	r2,r18,r17
   80e60:	1081ffcc 	andi	r2,r2,2047
   80e64:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   80e68:	023fe416 	blt	zero,r8,80dfc <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80e6c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80e70:	00bfff84 	movi	r2,-2
   80e74:	2084703a 	and	r2,r4,r2
   80e78:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80e7c:	80800817 	ldw	r2,32(r16)
   80e80:	10800094 	ori	r2,r2,2
   80e84:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80e88:	80c00017 	ldw	r3,0(r16)
   80e8c:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80e90:	2001703a 	wrctl	status,r4
   80e94:	00000706 	br	80eb4 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   80e98:	80800d17 	ldw	r2,52(r16)
   80e9c:	1140031e 	bne	r2,r5,80eac <altera_avalon_jtag_uart_write+0x104>
   80ea0:	80c00917 	ldw	r3,36(r16)
   80ea4:	80800117 	ldw	r2,4(r16)
   80ea8:	18bffb36 	bltu	r3,r2,80e98 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   80eac:	80800d17 	ldw	r2,52(r16)
   80eb0:	117fed1e 	bne	r2,r5,80e68 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   80eb4:	b53fcc1e 	bne	r22,r20,80de8 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
   80eb8:	a890000c 	andi	r2,r21,16384
   80ebc:	103fcc1e 	bne	r2,zero,80df0 <altera_avalon_jtag_uart_write+0x48>
   80ec0:	00bffec4 	movi	r2,-5
   80ec4:	00000d06 	br	80efc <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80ec8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80ecc:	00bfff84 	movi	r2,-2
   80ed0:	2084703a 	and	r2,r4,r2
   80ed4:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80ed8:	80800817 	ldw	r2,32(r16)
   80edc:	10800094 	ori	r2,r2,2
   80ee0:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80ee4:	80c00017 	ldw	r3,0(r16)
   80ee8:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80eec:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   80ef0:	a890000c 	andi	r2,r21,16384
   80ef4:	103fe826 	beq	r2,zero,80e98 <altera_avalon_jtag_uart_write+0xf0>
   80ef8:	003fee06 	br	80eb4 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
   80efc:	dfc00717 	ldw	ra,28(sp)
   80f00:	dd800617 	ldw	r22,24(sp)
   80f04:	dd400517 	ldw	r21,20(sp)
   80f08:	dd000417 	ldw	r20,16(sp)
   80f0c:	dcc00317 	ldw	r19,12(sp)
   80f10:	dc800217 	ldw	r18,8(sp)
   80f14:	dc400117 	ldw	r17,4(sp)
   80f18:	dc000017 	ldw	r16,0(sp)
   80f1c:	dec00804 	addi	sp,sp,32
   80f20:	f800283a 	ret

00080f24 <altera_avalon_mutex_close>:
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  return;
}
   80f24:	f800283a 	ret

00080f28 <altera_avalon_mutex_first_lock>:
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  alt_u32 data;
  int ret_code = 0;

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
   80f28:	20800317 	ldw	r2,12(r4)
   80f2c:	10800137 	ldwio	r2,4(r2)
  {
    ret_code = 1;
  }

  return ret_code;
}
   80f30:	1080004c 	andi	r2,r2,1
   80f34:	f800283a 	ret

00080f38 <altera_avalon_mutex_is_mine>:
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  alt_u32 id, data, owner, value;
  int ret_code = 0;

  NIOS2_READ_CPUID(id);
   80f38:	0007317a 	rdctl	r3,cpuid

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
   80f3c:	20800317 	ldw	r2,12(r4)
   80f40:	11000037 	ldwio	r4,0(r2)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
   80f44:	2004d43a 	srli	r2,r4,16
   80f48:	18800226 	beq	r3,r2,80f54 <altera_avalon_mutex_is_mine+0x1c>
   80f4c:	0005883a 	mov	r2,zero
   80f50:	f800283a 	ret
   80f54:	20bfffcc 	andi	r2,r4,65535
   80f58:	1004c03a 	cmpne	r2,r2,zero
      ret_code = 1;
    }
  }

  return ret_code;
}
   80f5c:	f800283a 	ret

00080f60 <altera_avalon_mutex_unlock>:
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  alt_u32 id;
  NIOS2_READ_CPUID(id);
   80f60:	0007317a 	rdctl	r3,cpuid

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
   80f64:	21400317 	ldw	r5,12(r4)
   80f68:	00800044 	movi	r2,1
   80f6c:	28800135 	stwio	r2,4(r5)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
   80f70:	20800317 	ldw	r2,12(r4)
   80f74:	1806943a 	slli	r3,r3,16
   80f78:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
   80f7c:	f800283a 	ret

00080f80 <alt_mutex_trylock>:
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  alt_u32 id, data, check;
  int ret_code = -1;

  NIOS2_READ_CPUID(id);
   80f80:	0005317a 	rdctl	r2,cpuid

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
   80f84:	1004943a 	slli	r2,r2,16
   80f88:	1144b03a 	or	r2,r2,r5

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
   80f8c:	20c00317 	ldw	r3,12(r4)
   80f90:	18800035 	stwio	r2,0(r3)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
   80f94:	20c00317 	ldw	r3,12(r4)
   80f98:	18c00037 	ldwio	r3,0(r3)

  if ( check == data)
   80f9c:	10c4c03a 	cmpne	r2,r2,r3
  {
    ret_code = 0;
  }

  return ret_code;
}
   80fa0:	0085c83a 	sub	r2,zero,r2
   80fa4:	f800283a 	ret

00080fa8 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
   80fa8:	defffe04 	addi	sp,sp,-8
   80fac:	dfc00115 	stw	ra,4(sp)
   80fb0:	dc000015 	stw	r16,0(sp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
   80fb4:	d1600004 	addi	r5,gp,-32768
   80fb8:	00818880 	call	81888 <alt_find_dev>
   80fbc:	1021883a 	mov	r16,r2

  if (NULL == dev)
   80fc0:	10000b1e 	bne	r2,zero,80ff0 <altera_avalon_mutex_open+0x48>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   80fc4:	00800234 	movhi	r2,8
   80fc8:	109a1304 	addi	r2,r2,26700
   80fcc:	10800017 	ldw	r2,0(r2)
   80fd0:	1000031e 	bne	r2,zero,80fe0 <altera_avalon_mutex_open+0x38>
   80fd4:	00c00274 	movhi	r3,9
   80fd8:	18e1d704 	addi	r3,r3,-30884
   80fdc:	00000206 	br	80fe8 <altera_avalon_mutex_open+0x40>
   80fe0:	103ee83a 	callr	r2
   80fe4:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = ENODEV;
   80fe8:	008004c4 	movi	r2,19
   80fec:	18800015 	stw	r2,0(r3)
  }

  return dev;
}
   80ff0:	8005883a 	mov	r2,r16
   80ff4:	dfc00117 	ldw	ra,4(sp)
   80ff8:	dc000017 	ldw	r16,0(sp)
   80ffc:	dec00204 	addi	sp,sp,8
   81000:	f800283a 	ret

00081004 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
   81004:	defffd04 	addi	sp,sp,-12
   81008:	dfc00215 	stw	ra,8(sp)
   8100c:	dc400115 	stw	r17,4(sp)
   81010:	dc000015 	stw	r16,0(sp)
   81014:	2023883a 	mov	r17,r4
   81018:	2821883a 	mov	r16,r5
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
   8101c:	8809883a 	mov	r4,r17
   81020:	800b883a 	mov	r5,r16
   81024:	0080f800 	call	80f80 <alt_mutex_trylock>
   81028:	103ffc1e 	bne	r2,zero,8101c <altera_avalon_mutex_lock+0x18>
}
   8102c:	dfc00217 	ldw	ra,8(sp)
   81030:	dc400117 	ldw	r17,4(sp)
   81034:	dc000017 	ldw	r16,0(sp)
   81038:	dec00304 	addi	sp,sp,12
   8103c:	f800283a 	ret

00081040 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
   81040:	deffff04 	addi	sp,sp,-4
   81044:	dfc00015 	stw	ra,0(sp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
   81048:	0080f800 	call	80f80 <alt_mutex_trylock>
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
}
   8104c:	dfc00017 	ldw	ra,0(sp)
   81050:	dec00104 	addi	sp,sp,4
   81054:	f800283a 	ret

00081058 <alt_avalon_sgdma_register_callback>:
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
  dev->callback         = callback;
   81058:	21400915 	stw	r5,36(r4)
  dev->callback_context = context;
   8105c:	21c00a15 	stw	r7,40(r4)
  dev->chain_control    = chain_control;
   81060:	21800b15 	stw	r6,44(r4)
}
   81064:	f800283a 	ret

00081068 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   81068:	defffb04 	addi	sp,sp,-20
   8106c:	dfc00415 	stw	ra,16(sp)
   81070:	dc800315 	stw	r18,12(sp)
   81074:	dc400215 	stw	r17,8(sp)
   81078:	dc000115 	stw	r16,4(sp)
   8107c:	2021883a 	mov	r16,r4
   81080:	2823883a 	mov	r17,r5
   81084:	3025883a 	mov	r18,r6

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   81088:	00c00404 	movi	r3,16
   8108c:	20800317 	ldw	r2,12(r4)
   81090:	10c5883a 	add	r2,r2,r3
   81094:	01400074 	movhi	r5,1
   81098:	11400035 	stwio	r5,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8109c:	20800317 	ldw	r2,12(r4)
   810a0:	10c5883a 	add	r2,r2,r3
   810a4:	11400035 	stwio	r5,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
   810a8:	20800317 	ldw	r2,12(r4)
   810ac:	10c5883a 	add	r2,r2,r3
   810b0:	10000035 	stwio	zero,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   810b4:	20c00317 	ldw	r3,12(r4)
   810b8:	00803fc4 	movi	r2,255
   810bc:	18800035 	stwio	r2,0(r3)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
   810c0:	d1600204 	addi	r5,gp,-32760
   810c4:	00818180 	call	81818 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
   810c8:	d8000015 	stw	zero,0(sp)
   810cc:	8809883a 	mov	r4,r17
   810d0:	900b883a 	mov	r5,r18
   810d4:	01800234 	movhi	r6,8
   810d8:	3184ac04 	addi	r6,r6,4784
   810dc:	800f883a 	mov	r7,r16
   810e0:	00819b00 	call	819b0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
   810e4:	dfc00417 	ldw	ra,16(sp)
   810e8:	dc800317 	ldw	r18,12(sp)
   810ec:	dc400217 	ldw	r17,8(sp)
   810f0:	dc000117 	ldw	r16,4(sp)
   810f4:	dec00504 	addi	sp,sp,20
   810f8:	f800283a 	ret

000810fc <alt_avalon_sgdma_disable_desc_poll>:
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   810fc:	20800317 	ldw	r2,12(r4)
   81100:	10800404 	addi	r2,r2,16
   81104:	10c00037 	ldwio	r3,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81108:	013fff34 	movhi	r4,65532
   8110c:	213fffc4 	addi	r4,r4,-1
   81110:	1906703a 	and	r3,r3,r4
   81114:	10c00035 	stwio	r3,0(r2)
  
  return;
}
   81118:	f800283a 	ret

0008111c <alt_avalon_sgdma_enable_desc_poll>:
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8111c:	21000317 	ldw	r4,12(r4)
   81120:	21000404 	addi	r4,r4,16
   81124:	20c00037 	ldwio	r3,0(r4)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
   81128:	00a00434 	movhi	r2,32784
   8112c:	10bfffc4 	addi	r2,r2,-1
   81130:	1886703a 	and	r3,r3,r2
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81134:	280a953a 	slli	r5,r5,20
   81138:	295ffc2c 	andhi	r5,r5,32752
   8113c:	29400134 	orhi	r5,r5,4
   81140:	1946b03a 	or	r3,r3,r5
   81144:	20c00035 	stwio	r3,0(r4)
  
  return;
}
   81148:	f800283a 	ret

0008114c <alt_avalon_sgdma_stop>:
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8114c:	20800317 	ldw	r2,12(r4)
   81150:	10800404 	addi	r2,r2,16
   81154:	10c00037 	ldwio	r3,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81158:	013ff7c4 	movi	r4,-33
   8115c:	1906703a 	and	r3,r3,r4
   81160:	10c00035 	stwio	r3,0(r2)
}
   81164:	f800283a 	ret

00081168 <alt_avalon_sgdma_start>:
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81168:	20c00317 	ldw	r3,12(r4)
   8116c:	18c00404 	addi	r3,r3,16
   81170:	18800037 	ldwio	r2,0(r3)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81174:	10800814 	ori	r2,r2,32
   81178:	18800035 	stwio	r2,0(r3)
}
   8117c:	f800283a 	ret

00081180 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   81180:	200f883a 	mov	r7,r4
   81184:	21000317 	ldw	r4,12(r4)
   81188:	01800404 	movi	r6,16
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   8118c:	20800037 	ldwio	r2,0(r4)
   81190:	1184703a 	and	r2,r2,r6
   81194:	103ffd1e 	bne	r2,zero,8118c <alt_avalon_sgdma_do_sync_transfer+0xc>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   81198:	2189883a 	add	r4,r4,r6
   8119c:	20800037 	ldwio	r2,0(r4)
   811a0:	00fff7c4 	movi	r3,-33
   811a4:	10c4703a 	and	r2,r2,r3
   811a8:	20800035 	stwio	r2,0(r4)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   811ac:	38c00317 	ldw	r3,12(r7)
   811b0:	00803fc4 	movi	r2,255
   811b4:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   811b8:	38800317 	ldw	r2,12(r7)
   811bc:	11400835 	stwio	r5,32(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   811c0:	38c00317 	ldw	r3,12(r7)
   811c4:	1987883a 	add	r3,r3,r6
   811c8:	18800037 	ldwio	r2,0(r3)
   811cc:	10801814 	ori	r2,r2,96
   811d0:	18800035 	stwio	r2,0(r3)
   811d4:	39000317 	ldw	r4,12(r7)
   811d8:	00c00404 	movi	r3,16
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   811dc:	20800037 	ldwio	r2,0(r4)
   811e0:	10c4703a 	and	r2,r2,r3
   811e4:	103ffd1e 	bne	r2,zero,811dc <alt_avalon_sgdma_do_sync_transfer+0x5c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   811e8:	20c9883a 	add	r4,r4,r3
   811ec:	20800037 	ldwio	r2,0(r4)
   811f0:	00fff7c4 	movi	r3,-33
   811f4:	10c4703a 	and	r2,r2,r3
   811f8:	20800035 	stwio	r2,0(r4)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
   811fc:	39000317 	ldw	r4,12(r7)
   81200:	20800037 	ldwio	r2,0(r4)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   81204:	00c03fc4 	movi	r3,255
   81208:	20c00035 	stwio	r3,0(r4)

  return status;
}
   8120c:	10803fcc 	andi	r2,r2,255
   81210:	f800283a 	ret

00081214 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   81214:	200d883a 	mov	r6,r4
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   81218:	20800317 	ldw	r2,12(r4)
   8121c:	10800037 	ldwio	r2,0(r2)
   81220:	1080040c 	andi	r2,r2,16
   81224:	10000226 	beq	r2,zero,81230 <alt_avalon_sgdma_do_async_transfer+0x1c>
   81228:	00bffc04 	movi	r2,-16
   8122c:	f800283a 	ret
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   81230:	01c00404 	movi	r7,16
   81234:	20c00317 	ldw	r3,12(r4)
   81238:	19c7883a 	add	r3,r3,r7
   8123c:	18800037 	ldwio	r2,0(r3)
   81240:	013ff7c4 	movi	r4,-33
   81244:	1104703a 	and	r2,r2,r4
   81248:	18800035 	stwio	r2,0(r3)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   8124c:	30c00317 	ldw	r3,12(r6)
   81250:	00803fc4 	movi	r2,255
   81254:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   81258:	30800317 	ldw	r2,12(r6)
   8125c:	11400835 	stwio	r5,32(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
   81260:	30800917 	ldw	r2,36(r6)
   81264:	10000926 	beq	r2,zero,8128c <alt_avalon_sgdma_do_async_transfer+0x78>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81268:	31000317 	ldw	r4,12(r6)
   8126c:	21c9883a 	add	r4,r4,r7
   81270:	20c00037 	ldwio	r3,0(r4)

    control |= (dev->chain_control                          |
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81274:	30800b17 	ldw	r2,44(r6)
   81278:	10801814 	ori	r2,r2,96
   8127c:	1886b03a 	or	r3,r3,r2
   81280:	20c00035 	stwio	r3,0(r4)
   81284:	0005883a 	mov	r2,zero
   81288:	f800283a 	ret
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8128c:	30800317 	ldw	r2,12(r6)
   81290:	10800404 	addi	r2,r2,16
   81294:	10c00037 	ldwio	r3,0(r2)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
   81298:	18c01814 	ori	r3,r3,96
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8129c:	013ffbc4 	movi	r4,-17
   812a0:	1906703a 	and	r3,r3,r4
   812a4:	10c00035 	stwio	r3,0(r2)
   812a8:	0005883a 	mov	r2,zero
  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
}
   812ac:	f800283a 	ret

000812b0 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
   812b0:	defffe04 	addi	sp,sp,-8
   812b4:	dfc00115 	stw	ra,4(sp)
   812b8:	dc000015 	stw	r16,0(sp)
   812bc:	200b883a 	mov	r5,r4
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   812c0:	01000404 	movi	r4,16
   812c4:	28c00317 	ldw	r3,12(r5)
   812c8:	1907883a 	add	r3,r3,r4
   812cc:	18800037 	ldwio	r2,0(r3)
   812d0:	10a00034 	orhi	r2,r2,32768
   812d4:	18800035 	stwio	r2,0(r3)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   812d8:	28800317 	ldw	r2,12(r5)
   812dc:	1105883a 	add	r2,r2,r4
   812e0:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
   812e4:	28c00917 	ldw	r3,36(r5)
   812e8:	18000726 	beq	r3,zero,81308 <alt_avalon_sgdma_irq+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   812ec:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   812f0:	00bfff84 	movi	r2,-2
   812f4:	8084703a 	and	r2,r16,r2
   812f8:	1001703a 	wrctl	status,r2
    cpu_sr = alt_irq_disable_all();
    (dev->callback)(dev->callback_context);
   812fc:	29000a17 	ldw	r4,40(r5)
   81300:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81304:	8001703a 	wrctl	status,r16
    alt_irq_enable_all(cpu_sr);
  }
}
   81308:	dfc00117 	ldw	ra,4(sp)
   8130c:	dc000017 	ldw	r16,0(sp)
   81310:	dec00204 	addi	sp,sp,8
   81314:	f800283a 	ret

00081318 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
   81318:	deffff04 	addi	sp,sp,-4
   8131c:	dfc00015 	stw	ra,0(sp)
   81320:	da000703 	ldbu	r8,28(sp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
   81324:	288007c3 	ldbu	r2,31(r5)
   81328:	10801fcc 	andi	r2,r2,127
   8132c:	288007e5 	stbio	r2,31(r5)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
   81330:	21800005 	stb	r6,0(r4)
   81334:	3004d23a 	srli	r2,r6,8
   81338:	20800045 	stb	r2,1(r4)
   8133c:	3004d43a 	srli	r2,r6,16
   81340:	20800085 	stb	r2,2(r4)
   81344:	300cd63a 	srli	r6,r6,24
   81348:	218000c5 	stb	r6,3(r4)
  desc->write_addr               = write_addr;
   8134c:	21c00205 	stb	r7,8(r4)
   81350:	3804d23a 	srli	r2,r7,8
   81354:	20800245 	stb	r2,9(r4)
   81358:	3804d43a 	srli	r2,r7,16
   8135c:	20800285 	stb	r2,10(r4)
   81360:	380ed63a 	srli	r7,r7,24
   81364:	21c002c5 	stb	r7,11(r4)
  desc->next                     = (alt_u32 *) next;
   81368:	21400405 	stb	r5,16(r4)
   8136c:	2804d23a 	srli	r2,r5,8
   81370:	20800445 	stb	r2,17(r4)
   81374:	2804d43a 	srli	r2,r5,16
   81378:	20800485 	stb	r2,18(r4)
   8137c:	280ad63a 	srli	r5,r5,24
   81380:	214004c5 	stb	r5,19(r4)
  desc->read_addr_pad            = 0x0;
   81384:	20000105 	stb	zero,4(r4)
   81388:	20000145 	stb	zero,5(r4)
   8138c:	20000185 	stb	zero,6(r4)
   81390:	200001c5 	stb	zero,7(r4)
  desc->write_addr_pad           = 0x0;
   81394:	20000305 	stb	zero,12(r4)
   81398:	20000345 	stb	zero,13(r4)
   8139c:	20000385 	stb	zero,14(r4)
   813a0:	200003c5 	stb	zero,15(r4)
  desc->next_pad                 = 0x0;
   813a4:	20000505 	stb	zero,20(r4)
   813a8:	20000545 	stb	zero,21(r4)
   813ac:	20000585 	stb	zero,22(r4)
   813b0:	200005c5 	stb	zero,23(r4)
  desc->bytes_to_transfer        = length_or_eop;
   813b4:	d880010b 	ldhu	r2,4(sp)
   813b8:	20800605 	stb	r2,24(r4)
   813bc:	1004d23a 	srli	r2,r2,8
   813c0:	20800645 	stb	r2,25(r4)
  desc->actual_bytes_transferred = 0;
   813c4:	20000705 	stb	zero,28(r4)
   813c8:	20000745 	stb	zero,29(r4)
  desc->status                   = 0x0;
   813cc:	20000785 	stb	zero,30(r4)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
   813d0:	d8800517 	ldw	r2,20(sp)
   813d4:	20800685 	stb	r2,26(r4)
  desc->write_burst              = write_burst;
   813d8:	d8800617 	ldw	r2,24(sp)
   813dc:	208006c5 	stb	r2,27(r4)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   813e0:	d8800217 	ldw	r2,8(sp)
   813e4:	1005003a 	cmpeq	r2,r2,zero
   813e8:	00ffe044 	movi	r3,-127
   813ec:	188fc83a 	sub	r7,r3,r2
   813f0:	d8800317 	ldw	r2,12(sp)
   813f4:	1004c03a 	cmpne	r2,r2,zero
   813f8:	108d883a 	add	r6,r2,r2
   813fc:	d8800417 	ldw	r2,16(sp)
   81400:	1004c03a 	cmpne	r2,r2,zero
   81404:	100a90ba 	slli	r5,r2,2
   81408:	40803fcc 	andi	r2,r8,255
   8140c:	1000021e 	bne	r2,zero,81418 <alt_avalon_sgdma_construct_descriptor_burst+0x100>
   81410:	0007883a 	mov	r3,zero
   81414:	00000206 	br	81420 <alt_avalon_sgdma_construct_descriptor_burst+0x108>
   81418:	408003cc 	andi	r2,r8,15
   8141c:	100690fa 	slli	r3,r2,3
   81420:	3144b03a 	or	r2,r6,r5
   81424:	38c6b03a 	or	r3,r7,r3
   81428:	10c4b03a 	or	r2,r2,r3
   8142c:	208007c5 	stb	r2,31(r4)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to
   */
  alt_remap_uncached(desc, sizeof(alt_sgdma_descriptor));
   81430:	01400804 	movi	r5,32
   81434:	0081cd40 	call	81cd4 <alt_remap_uncached>
}
   81438:	dfc00017 	ldw	ra,0(sp)
   8143c:	dec00104 	addi	sp,sp,4
   81440:	f800283a 	ret

00081444 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
   81444:	defff804 	addi	sp,sp,-32
   81448:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
   8144c:	d880080b 	ldhu	r2,32(sp)
   81450:	d8800015 	stw	r2,0(sp)
   81454:	d8800917 	ldw	r2,36(sp)
   81458:	d8800115 	stw	r2,4(sp)
   8145c:	d8800a17 	ldw	r2,40(sp)
   81460:	d8800215 	stw	r2,8(sp)
   81464:	d8800b17 	ldw	r2,44(sp)
   81468:	d8800315 	stw	r2,12(sp)
   8146c:	d8000415 	stw	zero,16(sp)
   81470:	d8000515 	stw	zero,20(sp)
   81474:	d8800c03 	ldbu	r2,48(sp)
   81478:	d8800615 	stw	r2,24(sp)
   8147c:	00813180 	call	81318 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
   81480:	dfc00717 	ldw	ra,28(sp)
   81484:	dec00804 	addi	sp,sp,32
   81488:	f800283a 	ret

0008148c <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
   8148c:	defff804 	addi	sp,sp,-32
   81490:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81494:	39ffffcc 	andi	r7,r7,65535
   81498:	d9c00015 	stw	r7,0(sp)
   8149c:	d8800a17 	ldw	r2,40(sp)
   814a0:	d8800115 	stw	r2,4(sp)
   814a4:	d8800817 	ldw	r2,32(sp)
   814a8:	d8800215 	stw	r2,8(sp)
   814ac:	d8800917 	ldw	r2,36(sp)
   814b0:	d8800315 	stw	r2,12(sp)
   814b4:	d8800b17 	ldw	r2,44(sp)
   814b8:	d8800415 	stw	r2,16(sp)
   814bc:	d8000515 	stw	zero,20(sp)
   814c0:	d8800c03 	ldbu	r2,48(sp)
   814c4:	d8800615 	stw	r2,24(sp)
   814c8:	000f883a 	mov	r7,zero
   814cc:	00813180 	call	81318 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
   814d0:	dfc00717 	ldw	ra,28(sp)
   814d4:	dec00804 	addi	sp,sp,32
   814d8:	f800283a 	ret

000814dc <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
   814dc:	defffa04 	addi	sp,sp,-24
   814e0:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
   814e4:	d8800617 	ldw	r2,24(sp)
   814e8:	d8800015 	stw	r2,0(sp)
   814ec:	d8800717 	ldw	r2,28(sp)
   814f0:	d8800115 	stw	r2,4(sp)
   814f4:	d8800817 	ldw	r2,32(sp)
   814f8:	d8800215 	stw	r2,8(sp)
   814fc:	d8000315 	stw	zero,12(sp)
   81500:	d8800903 	ldbu	r2,36(sp)
   81504:	d8800415 	stw	r2,16(sp)
   81508:	39ffffcc 	andi	r7,r7,65535
   8150c:	008148c0 	call	8148c <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
   81510:	dfc00517 	ldw	ra,20(sp)
   81514:	dec00604 	addi	sp,sp,24
   81518:	f800283a 	ret

0008151c <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
   8151c:	defff804 	addi	sp,sp,-32
   81520:	dfc00715 	stw	ra,28(sp)
   81524:	3007883a 	mov	r3,r6
  alt_avalon_sgdma_construct_descriptor_burst(
   81528:	39ffffcc 	andi	r7,r7,65535
   8152c:	d9c00015 	stw	r7,0(sp)
   81530:	d8000115 	stw	zero,4(sp)
   81534:	d8000215 	stw	zero,8(sp)
   81538:	d8800817 	ldw	r2,32(sp)
   8153c:	d8800315 	stw	r2,12(sp)
   81540:	d8000415 	stw	zero,16(sp)
   81544:	d8800917 	ldw	r2,36(sp)
   81548:	d8800515 	stw	r2,20(sp)
   8154c:	d8000615 	stw	zero,24(sp)
   81550:	000d883a 	mov	r6,zero
   81554:	180f883a 	mov	r7,r3
   81558:	00813180 	call	81318 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
   8155c:	dfc00717 	ldw	ra,28(sp)
   81560:	dec00804 	addi	sp,sp,32
   81564:	f800283a 	ret

00081568 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
   81568:	defffd04 	addi	sp,sp,-12
   8156c:	dfc00215 	stw	ra,8(sp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
   81570:	d8800317 	ldw	r2,12(sp)
   81574:	d8800015 	stw	r2,0(sp)
   81578:	d8000115 	stw	zero,4(sp)
   8157c:	39ffffcc 	andi	r7,r7,65535
   81580:	008151c0 	call	8151c <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
   81584:	dfc00217 	ldw	ra,8(sp)
   81588:	dec00304 	addi	sp,sp,12
   8158c:	f800283a 	ret

00081590 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
   81590:	defff804 	addi	sp,sp,-32
   81594:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81598:	d880080b 	ldhu	r2,32(sp)
   8159c:	d8800015 	stw	r2,0(sp)
   815a0:	d8000115 	stw	zero,4(sp)
   815a4:	d8800917 	ldw	r2,36(sp)
   815a8:	d8800215 	stw	r2,8(sp)
   815ac:	d8800a17 	ldw	r2,40(sp)
   815b0:	d8800315 	stw	r2,12(sp)
   815b4:	d8800b17 	ldw	r2,44(sp)
   815b8:	d8800415 	stw	r2,16(sp)
   815bc:	d8800c17 	ldw	r2,48(sp)
   815c0:	d8800515 	stw	r2,20(sp)
   815c4:	d8000615 	stw	zero,24(sp)
   815c8:	00813180 	call	81318 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
   815cc:	dfc00717 	ldw	ra,28(sp)
   815d0:	dec00804 	addi	sp,sp,32
   815d4:	f800283a 	ret

000815d8 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
   815d8:	defffa04 	addi	sp,sp,-24
   815dc:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
   815e0:	d880060b 	ldhu	r2,24(sp)
   815e4:	d8800015 	stw	r2,0(sp)
   815e8:	d8800717 	ldw	r2,28(sp)
   815ec:	d8800115 	stw	r2,4(sp)
   815f0:	d8800817 	ldw	r2,32(sp)
   815f4:	d8800215 	stw	r2,8(sp)
   815f8:	d8000315 	stw	zero,12(sp)
   815fc:	d8000415 	stw	zero,16(sp)
   81600:	00815900 	call	81590 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
   81604:	dfc00517 	ldw	ra,20(sp)
   81608:	dec00604 	addi	sp,sp,24
   8160c:	f800283a 	ret

00081610 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
   81610:	defffe04 	addi	sp,sp,-8
   81614:	dfc00115 	stw	ra,4(sp)
   81618:	dc000015 	stw	r16,0(sp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
   8161c:	d1600204 	addi	r5,gp,-32760
   81620:	00818880 	call	81888 <alt_find_dev>
   81624:	1021883a 	mov	r16,r2

  if (NULL == dev) {
   81628:	10000b1e 	bne	r2,zero,81658 <alt_avalon_sgdma_open+0x48>
   8162c:	00800234 	movhi	r2,8
   81630:	109a1304 	addi	r2,r2,26700
   81634:	10800017 	ldw	r2,0(r2)
   81638:	1000031e 	bne	r2,zero,81648 <alt_avalon_sgdma_open+0x38>
   8163c:	00c00274 	movhi	r3,9
   81640:	18e1d704 	addi	r3,r3,-30884
   81644:	00000206 	br	81650 <alt_avalon_sgdma_open+0x40>
   81648:	103ee83a 	callr	r2
   8164c:	1007883a 	mov	r3,r2
    ALT_ERRNO = ENODEV;
   81650:	008004c4 	movi	r2,19
   81654:	18800015 	stw	r2,0(r3)
  }

  return dev;
}
   81658:	8005883a 	mov	r2,r16
   8165c:	dfc00117 	ldw	ra,4(sp)
   81660:	dc000017 	ldw	r16,0(sp)
   81664:	dec00204 	addi	sp,sp,8
   81668:	f800283a 	ret

0008166c <alt_avalon_sgdma_check_descriptor_status>:
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
   8166c:	208007a3 	ldbuio	r2,30(r4)
   81670:	10801fcc 	andi	r2,r2,127
   81674:	10000226 	beq	r2,zero,81680 <alt_avalon_sgdma_check_descriptor_status+0x14>
   81678:	00bffec4 	movi	r2,-5
   8167c:	f800283a 	ret
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
  }

  if( IORD_8DIRECT(&desc->control, 0) &
   81680:	208007e3 	ldbuio	r2,31(r4)
   81684:	1080200c 	andi	r2,r2,128
   81688:	10000226 	beq	r2,zero,81694 <alt_avalon_sgdma_check_descriptor_status+0x28>
   8168c:	00bfe244 	movi	r2,-119
   81690:	f800283a 	ret
   81694:	0005883a 	mov	r2,zero
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
  }

    return 0;
}
   81698:	f800283a 	ret

0008169c <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   8169c:	00800274 	movhi	r2,9
   816a0:	10a1d504 	addi	r2,r2,-30892
   816a4:	10800017 	ldw	r2,0(r2)
   816a8:	1000021e 	bne	r2,zero,816b4 <alt_alarm_start+0x18>
   816ac:	00bfde84 	movi	r2,-134
   816b0:	f800283a 	ret
  {
    if (alarm)
   816b4:	2000021e 	bne	r4,zero,816c0 <alt_alarm_start+0x24>
   816b8:	00bffa84 	movi	r2,-22
   816bc:	f800283a 	ret
    {
      alarm->callback = callback;
   816c0:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   816c4:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   816c8:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   816cc:	00bfff84 	movi	r2,-2
   816d0:	3884703a 	and	r2,r7,r2
   816d4:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   816d8:	00800274 	movhi	r2,9
   816dc:	10a1d604 	addi	r2,r2,-30888
   816e0:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   816e4:	01800044 	movi	r6,1
   816e8:	1985883a 	add	r2,r3,r6
   816ec:	2885883a 	add	r2,r5,r2
   816f0:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   816f4:	10c0022e 	bgeu	r2,r3,81700 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
   816f8:	21800405 	stb	r6,16(r4)
   816fc:	00000106 	br	81704 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
   81700:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   81704:	00800234 	movhi	r2,8
   81708:	109a1504 	addi	r2,r2,26708
   8170c:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   81710:	10c00017 	ldw	r3,0(r2)
   81714:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
   81718:	10c00017 	ldw	r3,0(r2)
   8171c:	19000115 	stw	r4,4(r3)
  list->next           = entry;
   81720:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81724:	3801703a 	wrctl	status,r7
   81728:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
   8172c:	f800283a 	ret

00081730 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   81730:	defffd04 	addi	sp,sp,-12
   81734:	dfc00215 	stw	ra,8(sp)
   81738:	dc400115 	stw	r17,4(sp)
   8173c:	dc000015 	stw	r16,0(sp)
   81740:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   81744:	20001c16 	blt	r4,zero,817b8 <close+0x88>
   81748:	20c00324 	muli	r3,r4,12
   8174c:	00800234 	movhi	r2,8
   81750:	1097a804 	addi	r2,r2,24224
   81754:	1889883a 	add	r4,r3,r2

  if (fd)
   81758:	20001726 	beq	r4,zero,817b8 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8175c:	20800017 	ldw	r2,0(r4)
   81760:	10800417 	ldw	r2,16(r2)
   81764:	10002126 	beq	r2,zero,817ec <close+0xbc>
   81768:	103ee83a 	callr	r2
   8176c:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   81770:	8009883a 	mov	r4,r16
   81774:	0081cb00 	call	81cb0 <alt_release_fd>
    if (rval < 0)
   81778:	88000216 	blt	r17,zero,81784 <close+0x54>
   8177c:	0005883a 	mov	r2,zero
   81780:	00001d06 	br	817f8 <close+0xc8>
   81784:	00800234 	movhi	r2,8
   81788:	109a1304 	addi	r2,r2,26700
   8178c:	10800017 	ldw	r2,0(r2)
   81790:	1000031e 	bne	r2,zero,817a0 <close+0x70>
   81794:	00c00274 	movhi	r3,9
   81798:	18e1d704 	addi	r3,r3,-30884
   8179c:	00000206 	br	817a8 <close+0x78>
   817a0:	103ee83a 	callr	r2
   817a4:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
   817a8:	0445c83a 	sub	r2,zero,r17
   817ac:	18800015 	stw	r2,0(r3)
   817b0:	00bfffc4 	movi	r2,-1
   817b4:	00001006 	br	817f8 <close+0xc8>
   817b8:	00800234 	movhi	r2,8
   817bc:	109a1304 	addi	r2,r2,26700
   817c0:	10800017 	ldw	r2,0(r2)
   817c4:	1000031e 	bne	r2,zero,817d4 <close+0xa4>
   817c8:	00c00274 	movhi	r3,9
   817cc:	18e1d704 	addi	r3,r3,-30884
   817d0:	00000206 	br	817dc <close+0xac>
   817d4:	103ee83a 	callr	r2
   817d8:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
   817dc:	00801444 	movi	r2,81
   817e0:	18800015 	stw	r2,0(r3)
   817e4:	00bfffc4 	movi	r2,-1
   817e8:	00000306 	br	817f8 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   817ec:	8009883a 	mov	r4,r16
   817f0:	0081cb00 	call	81cb0 <alt_release_fd>
   817f4:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   817f8:	dfc00217 	ldw	ra,8(sp)
   817fc:	dc400117 	ldw	r17,4(sp)
   81800:	dc000017 	ldw	r16,0(sp)
   81804:	dec00304 	addi	sp,sp,12
   81808:	f800283a 	ret

0008180c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8180c:	f800283a 	ret

00081810 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   81810:	3005883a 	mov	r2,r6
   81814:	f800283a 	ret

00081818 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   81818:	deffff04 	addi	sp,sp,-4
   8181c:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   81820:	20000226 	beq	r4,zero,8182c <alt_dev_llist_insert+0x14>
   81824:	20800217 	ldw	r2,8(r4)
   81828:	10000d1e 	bne	r2,zero,81860 <alt_dev_llist_insert+0x48>
   8182c:	00800234 	movhi	r2,8
   81830:	109a1304 	addi	r2,r2,26700
   81834:	10800017 	ldw	r2,0(r2)
   81838:	1000031e 	bne	r2,zero,81848 <alt_dev_llist_insert+0x30>
   8183c:	00c00274 	movhi	r3,9
   81840:	18e1d704 	addi	r3,r3,-30884
   81844:	00000206 	br	81850 <alt_dev_llist_insert+0x38>
   81848:	103ee83a 	callr	r2
   8184c:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
   81850:	00800584 	movi	r2,22
   81854:	18800015 	stw	r2,0(r3)
   81858:	00bffa84 	movi	r2,-22
   8185c:	00000706 	br	8187c <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   81860:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   81864:	28800017 	ldw	r2,0(r5)
   81868:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   8186c:	28800017 	ldw	r2,0(r5)
   81870:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   81874:	29000015 	stw	r4,0(r5)
   81878:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   8187c:	dfc00017 	ldw	ra,0(sp)
   81880:	dec00104 	addi	sp,sp,4
   81884:	f800283a 	ret

00081888 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   81888:	defffb04 	addi	sp,sp,-20
   8188c:	dfc00415 	stw	ra,16(sp)
   81890:	dcc00315 	stw	r19,12(sp)
   81894:	dc800215 	stw	r18,8(sp)
   81898:	dc400115 	stw	r17,4(sp)
   8189c:	dc000015 	stw	r16,0(sp)
   818a0:	2027883a 	mov	r19,r4
   818a4:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
   818a8:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   818ac:	008240c0 	call	8240c <strlen>
   818b0:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   818b4:	8c000726 	beq	r17,r16,818d4 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   818b8:	89000217 	ldw	r4,8(r17)
   818bc:	980b883a 	mov	r5,r19
   818c0:	900d883a 	mov	r6,r18
   818c4:	00820ac0 	call	820ac <memcmp>
   818c8:	10000326 	beq	r2,zero,818d8 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   818cc:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   818d0:	847ff91e 	bne	r16,r17,818b8 <alt_find_dev+0x30>
   818d4:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
   818d8:	8805883a 	mov	r2,r17
   818dc:	dfc00417 	ldw	ra,16(sp)
   818e0:	dcc00317 	ldw	r19,12(sp)
   818e4:	dc800217 	ldw	r18,8(sp)
   818e8:	dc400117 	ldw	r17,4(sp)
   818ec:	dc000017 	ldw	r16,0(sp)
   818f0:	dec00504 	addi	sp,sp,20
   818f4:	f800283a 	ret

000818f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   818f8:	deffff04 	addi	sp,sp,-4
   818fc:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   81900:	0009883a 	mov	r4,zero
   81904:	01440004 	movi	r5,4096
   81908:	0081f100 	call	81f10 <alt_icache_flush>
#endif
}
   8190c:	dfc00017 	ldw	ra,0(sp)
   81910:	dec00104 	addi	sp,sp,4
   81914:	f800283a 	ret

00081918 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   81918:	000530fa 	rdctl	r2,ienable
   8191c:	00c00044 	movi	r3,1
   81920:	1946983a 	sll	r3,r3,r5
   81924:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
   81928:	1004c03a 	cmpne	r2,r2,zero
   8192c:	f800283a 	ret

00081930 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81930:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81934:	00bfff84 	movi	r2,-2
   81938:	3084703a 	and	r2,r6,r2
   8193c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   81940:	00c00274 	movhi	r3,9
   81944:	18e1d404 	addi	r3,r3,-30896
   81948:	19000017 	ldw	r4,0(r3)
   8194c:	00800044 	movi	r2,1
   81950:	1144983a 	sll	r2,r2,r5
   81954:	1104b03a 	or	r2,r2,r4
   81958:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8195c:	18800017 	ldw	r2,0(r3)
   81960:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81964:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   81968:	0005883a 	mov	r2,zero
   8196c:	f800283a 	ret

00081970 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81970:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81974:	00bfff84 	movi	r2,-2
   81978:	3084703a 	and	r2,r6,r2
   8197c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   81980:	00c00274 	movhi	r3,9
   81984:	18e1d404 	addi	r3,r3,-30896
   81988:	19000017 	ldw	r4,0(r3)
   8198c:	00bfff84 	movi	r2,-2
   81990:	1144183a 	rol	r2,r2,r5
   81994:	1104703a 	and	r2,r2,r4
   81998:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8199c:	18800017 	ldw	r2,0(r3)
   819a0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   819a4:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   819a8:	0005883a 	mov	r2,zero
   819ac:	f800283a 	ret

000819b0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   819b0:	defffe04 	addi	sp,sp,-8
   819b4:	dfc00115 	stw	ra,4(sp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   819b8:	d8800217 	ldw	r2,8(sp)
   819bc:	d8800015 	stw	r2,0(sp)
   819c0:	00819d00 	call	819d0 <alt_iic_isr_register>
}  
   819c4:	dfc00117 	ldw	ra,4(sp)
   819c8:	dec00204 	addi	sp,sp,8
   819cc:	f800283a 	ret

000819d0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   819d0:	defffe04 	addi	sp,sp,-8
   819d4:	dfc00115 	stw	ra,4(sp)
   819d8:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   819dc:	008007c4 	movi	r2,31
   819e0:	1140020e 	bge	r2,r5,819ec <alt_iic_isr_register+0x1c>
   819e4:	00bffa84 	movi	r2,-22
   819e8:	00000f06 	br	81a28 <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   819ec:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   819f0:	00bfff84 	movi	r2,-2
   819f4:	8084703a 	and	r2,r16,r2
   819f8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   819fc:	280490fa 	slli	r2,r5,3
   81a00:	00c00274 	movhi	r3,9
   81a04:	18e2e504 	addi	r3,r3,-29804
   81a08:	10c5883a 	add	r2,r2,r3
   81a0c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   81a10:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   81a14:	30000226 	beq	r6,zero,81a20 <alt_iic_isr_register+0x50>
   81a18:	00819300 	call	81930 <alt_ic_irq_enable>
   81a1c:	00000106 	br	81a24 <alt_iic_isr_register+0x54>
   81a20:	00819700 	call	81970 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81a24:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   81a28:	dfc00117 	ldw	ra,4(sp)
   81a2c:	dc000017 	ldw	r16,0(sp)
   81a30:	dec00204 	addi	sp,sp,8
   81a34:	f800283a 	ret

00081a38 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   81a38:	defffe04 	addi	sp,sp,-8
   81a3c:	dfc00115 	stw	ra,4(sp)
   81a40:	dc000015 	stw	r16,0(sp)
   81a44:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
   81a48:	2809883a 	mov	r4,r5
   81a4c:	300b883a 	mov	r5,r6
   81a50:	380d883a 	mov	r6,r7
   81a54:	0081b340 	call	81b34 <open>
   81a58:	1009883a 	mov	r4,r2

  if (old >= 0)
   81a5c:	10000b16 	blt	r2,zero,81a8c <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
   81a60:	10c00324 	muli	r3,r2,12
   81a64:	00800234 	movhi	r2,8
   81a68:	1097a804 	addi	r2,r2,24224
   81a6c:	1887883a 	add	r3,r3,r2
   81a70:	18800017 	ldw	r2,0(r3)
   81a74:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
   81a78:	18800117 	ldw	r2,4(r3)
   81a7c:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   81a80:	18800217 	ldw	r2,8(r3)
   81a84:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
   81a88:	0081cb00 	call	81cb0 <alt_release_fd>
  }
} 
   81a8c:	dfc00117 	ldw	ra,4(sp)
   81a90:	dc000017 	ldw	r16,0(sp)
   81a94:	dec00204 	addi	sp,sp,8
   81a98:	f800283a 	ret

00081a9c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   81a9c:	defffa04 	addi	sp,sp,-24
   81aa0:	dfc00515 	stw	ra,20(sp)
   81aa4:	dd000415 	stw	r20,16(sp)
   81aa8:	dcc00315 	stw	r19,12(sp)
   81aac:	dc800215 	stw	r18,8(sp)
   81ab0:	dc400115 	stw	r17,4(sp)
   81ab4:	dc000015 	stw	r16,0(sp)
   81ab8:	2005883a 	mov	r2,r4
   81abc:	2827883a 	mov	r19,r5
   81ac0:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   81ac4:	04000234 	movhi	r16,8
   81ac8:	8417ab04 	addi	r16,r16,24236
   81acc:	04800044 	movi	r18,1
   81ad0:	04407fc4 	movi	r17,511
   81ad4:	8009883a 	mov	r4,r16
   81ad8:	100b883a 	mov	r5,r2
   81adc:	900d883a 	mov	r6,r18
   81ae0:	880f883a 	mov	r7,r17
   81ae4:	0081a380 	call	81a38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   81ae8:	843ffd04 	addi	r16,r16,-12
   81aec:	8009883a 	mov	r4,r16
   81af0:	980b883a 	mov	r5,r19
   81af4:	000d883a 	mov	r6,zero
   81af8:	880f883a 	mov	r7,r17
   81afc:	0081a380 	call	81a38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   81b00:	81000604 	addi	r4,r16,24
   81b04:	a00b883a 	mov	r5,r20
   81b08:	900d883a 	mov	r6,r18
   81b0c:	880f883a 	mov	r7,r17
   81b10:	0081a380 	call	81a38 <alt_open_fd>
}  
   81b14:	dfc00517 	ldw	ra,20(sp)
   81b18:	dd000417 	ldw	r20,16(sp)
   81b1c:	dcc00317 	ldw	r19,12(sp)
   81b20:	dc800217 	ldw	r18,8(sp)
   81b24:	dc400117 	ldw	r17,4(sp)
   81b28:	dc000017 	ldw	r16,0(sp)
   81b2c:	dec00604 	addi	sp,sp,24
   81b30:	f800283a 	ret

00081b34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   81b34:	defff904 	addi	sp,sp,-28
   81b38:	dfc00615 	stw	ra,24(sp)
   81b3c:	dd400515 	stw	r21,20(sp)
   81b40:	dd000415 	stw	r20,16(sp)
   81b44:	dcc00315 	stw	r19,12(sp)
   81b48:	dc800215 	stw	r18,8(sp)
   81b4c:	dc400115 	stw	r17,4(sp)
   81b50:	dc000015 	stw	r16,0(sp)
   81b54:	2029883a 	mov	r20,r4
   81b58:	2827883a 	mov	r19,r5
   81b5c:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   81b60:	01400234 	movhi	r5,8
   81b64:	295a1004 	addi	r5,r5,26688
   81b68:	00818880 	call	81888 <alt_find_dev>
   81b6c:	1021883a 	mov	r16,r2
   81b70:	10000226 	beq	r2,zero,81b7c <open+0x48>
   81b74:	0025883a 	mov	r18,zero
   81b78:	00000a06 	br	81ba4 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   81b7c:	a009883a 	mov	r4,r20
   81b80:	0081de80 	call	81de8 <alt_find_file>
   81b84:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   81b88:	1000051e 	bne	r2,zero,81ba0 <open+0x6c>
   81b8c:	047fffc4 	movi	r17,-1
   81b90:	043ffb44 	movi	r16,-19
   81b94:	00002b06 	br	81c44 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   81b98:	043ffcc4 	movi	r16,-13
   81b9c:	00002906 	br	81c44 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   81ba0:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
   81ba4:	8009883a 	mov	r4,r16
   81ba8:	0081ea40 	call	81ea4 <alt_get_fd>
   81bac:	1023883a 	mov	r17,r2
   81bb0:	10003316 	blt	r2,zero,81c80 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   81bb4:	10800324 	muli	r2,r2,12
   81bb8:	02000234 	movhi	r8,8
   81bbc:	4217a804 	addi	r8,r8,24224
   81bc0:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   81bc4:	00900034 	movhi	r2,16384
   81bc8:	10bfffc4 	addi	r2,r2,-1
   81bcc:	9886703a 	and	r3,r19,r2
   81bd0:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   81bd4:	9004c03a 	cmpne	r2,r18,zero
   81bd8:	1000121e 	bne	r2,zero,81c24 <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   81bdc:	18900034 	orhi	r2,r3,16384
   81be0:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   81be4:	00800234 	movhi	r2,8
   81be8:	109a1204 	addi	r2,r2,26696
   81bec:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   81bf0:	21800017 	ldw	r6,0(r4)
   81bf4:	000b883a 	mov	r5,zero
   81bf8:	4007883a 	mov	r3,r8
   81bfc:	02400044 	movi	r9,1
   81c00:	02000304 	movi	r8,12
   81c04:	18800017 	ldw	r2,0(r3)
   81c08:	1180031e 	bne	r2,r6,81c18 <open+0xe4>
   81c0c:	18800217 	ldw	r2,8(r3)
   81c10:	1000010e 	bge	r2,zero,81c18 <open+0xe4>
   81c14:	193fe01e 	bne	r3,r4,81b98 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   81c18:	2a4b883a 	add	r5,r5,r9
   81c1c:	1a07883a 	add	r3,r3,r8
   81c20:	397ff82e 	bgeu	r7,r5,81c04 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   81c24:	80800317 	ldw	r2,12(r16)
   81c28:	10001726 	beq	r2,zero,81c88 <open+0x154>
   81c2c:	a00b883a 	mov	r5,r20
   81c30:	980d883a 	mov	r6,r19
   81c34:	a80f883a 	mov	r7,r21
   81c38:	103ee83a 	callr	r2
   81c3c:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   81c40:	1000110e 	bge	r2,zero,81c88 <open+0x154>
  {
    alt_release_fd (index);  
   81c44:	8809883a 	mov	r4,r17
   81c48:	0081cb00 	call	81cb0 <alt_release_fd>
   81c4c:	00800234 	movhi	r2,8
   81c50:	109a1304 	addi	r2,r2,26700
   81c54:	10800017 	ldw	r2,0(r2)
   81c58:	1000031e 	bne	r2,zero,81c68 <open+0x134>
   81c5c:	00c00274 	movhi	r3,9
   81c60:	18e1d704 	addi	r3,r3,-30884
   81c64:	00000206 	br	81c70 <open+0x13c>
   81c68:	103ee83a 	callr	r2
   81c6c:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
   81c70:	0405c83a 	sub	r2,zero,r16
   81c74:	18800015 	stw	r2,0(r3)
   81c78:	047fffc4 	movi	r17,-1
   81c7c:	00000206 	br	81c88 <open+0x154>
   81c80:	1021883a 	mov	r16,r2
   81c84:	003fef06 	br	81c44 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
   81c88:	8805883a 	mov	r2,r17
   81c8c:	dfc00617 	ldw	ra,24(sp)
   81c90:	dd400517 	ldw	r21,20(sp)
   81c94:	dd000417 	ldw	r20,16(sp)
   81c98:	dcc00317 	ldw	r19,12(sp)
   81c9c:	dc800217 	ldw	r18,8(sp)
   81ca0:	dc400117 	ldw	r17,4(sp)
   81ca4:	dc000017 	ldw	r16,0(sp)
   81ca8:	dec00704 	addi	sp,sp,28
   81cac:	f800283a 	ret

00081cb0 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
   81cb0:	00800084 	movi	r2,2
   81cb4:	1100060e 	bge	r2,r4,81cd0 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
   81cb8:	20800324 	muli	r2,r4,12
   81cbc:	00c00234 	movhi	r3,8
   81cc0:	18d7a804 	addi	r3,r3,24224
   81cc4:	10c5883a 	add	r2,r2,r3
   81cc8:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
   81ccc:	10000015 	stw	zero,0(r2)
   81cd0:	f800283a 	ret

00081cd4 <alt_remap_uncached>:
 * Convert a pointer to a block of cached memory, into a block of
 * uncached memory.
 */

volatile void* alt_remap_uncached (void* ptr, alt_u32 len)
{
   81cd4:	defffe04 	addi	sp,sp,-8
   81cd8:	dfc00115 	stw	ra,4(sp)
   81cdc:	dc000015 	stw	r16,0(sp)
   81ce0:	2021883a 	mov	r16,r4
  alt_dcache_flush (ptr, len);
   81ce4:	0081de40 	call	81de4 <alt_dcache_flush>
  return (volatile void*) (((alt_u32) ptr) | BYPASS_DCACHE_MASK);
}
   81ce8:	80a00034 	orhi	r2,r16,32768
   81cec:	dfc00117 	ldw	ra,4(sp)
   81cf0:	dc000017 	ldw	r16,0(sp)
   81cf4:	dec00204 	addi	sp,sp,8
   81cf8:	f800283a 	ret

00081cfc <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81cfc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81d00:	00bfff84 	movi	r2,-2
   81d04:	2884703a 	and	r2,r5,r2
   81d08:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   81d0c:	20c00017 	ldw	r3,0(r4)
   81d10:	20800117 	ldw	r2,4(r4)
   81d14:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   81d18:	20800117 	ldw	r2,4(r4)
   81d1c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   81d20:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   81d24:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81d28:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
   81d2c:	f800283a 	ret

00081d30 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   81d30:	defffd04 	addi	sp,sp,-12
   81d34:	dfc00215 	stw	ra,8(sp)
   81d38:	dc400115 	stw	r17,4(sp)
   81d3c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   81d40:	d4200b17 	ldw	r16,-32724(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   81d44:	d0a7cc17 	ldw	r2,-24784(gp)
   81d48:	10800044 	addi	r2,r2,1
   81d4c:	d0a7cc15 	stw	r2,-24784(gp)
   81d50:	00001b06 	br	81dc0 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   81d54:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   81d58:	80800403 	ldbu	r2,16(r16)
   81d5c:	10000326 	beq	r2,zero,81d6c <alt_tick+0x3c>
   81d60:	d0a7cc17 	ldw	r2,-24784(gp)
   81d64:	1000011e 	bne	r2,zero,81d6c <alt_tick+0x3c>
    {
      alarm->rollover = 0;
   81d68:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   81d6c:	d0e7cc17 	ldw	r3,-24784(gp)
   81d70:	80800217 	ldw	r2,8(r16)
   81d74:	18801136 	bltu	r3,r2,81dbc <alt_tick+0x8c>
   81d78:	80800403 	ldbu	r2,16(r16)
   81d7c:	10000f1e 	bne	r2,zero,81dbc <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
   81d80:	80800317 	ldw	r2,12(r16)
   81d84:	81000517 	ldw	r4,20(r16)
   81d88:	103ee83a 	callr	r2
   81d8c:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   81d90:	1000031e 	bne	r2,zero,81da0 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
   81d94:	8009883a 	mov	r4,r16
   81d98:	0081cfc0 	call	81cfc <alt_alarm_stop>
   81d9c:	00000706 	br	81dbc <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
   81da0:	80800217 	ldw	r2,8(r16)
   81da4:	1885883a 	add	r2,r3,r2
   81da8:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   81dac:	d0e7cc17 	ldw	r3,-24784(gp)
   81db0:	10c0022e 	bgeu	r2,r3,81dbc <alt_tick+0x8c>
        {
          alarm->rollover = 1;
   81db4:	00800044 	movi	r2,1
   81db8:	80800405 	stb	r2,16(r16)
   81dbc:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   81dc0:	d0a00b04 	addi	r2,gp,-32724
   81dc4:	80bfe31e 	bne	r16,r2,81d54 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   81dc8:	dfc00217 	ldw	ra,8(sp)
   81dcc:	dc400117 	ldw	r17,4(sp)
   81dd0:	dc000017 	ldw	r16,0(sp)
   81dd4:	dec00304 	addi	sp,sp,12
   81dd8:	f800283a 	ret

00081ddc <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   81ddc:	000170fa 	wrctl	ienable,zero
}
   81de0:	f800283a 	ret

00081de4 <alt_dcache_flush>:
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   81de4:	f800283a 	ret

00081de8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   81de8:	defff904 	addi	sp,sp,-28
   81dec:	dfc00615 	stw	ra,24(sp)
   81df0:	dd400515 	stw	r21,20(sp)
   81df4:	dd000415 	stw	r20,16(sp)
   81df8:	dcc00315 	stw	r19,12(sp)
   81dfc:	dc800215 	stw	r18,8(sp)
   81e00:	dc400115 	stw	r17,4(sp)
   81e04:	dc000015 	stw	r16,0(sp)
   81e08:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   81e0c:	00800234 	movhi	r2,8
   81e10:	109a0e04 	addi	r2,r2,26680
   81e14:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   81e18:	102b883a 	mov	r21,r2
   81e1c:	88801626 	beq	r17,r2,81e78 <alt_find_file+0x90>
   81e20:	053fffc4 	movi	r20,-1
   81e24:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
   81e28:	8c000217 	ldw	r16,8(r17)
   81e2c:	8009883a 	mov	r4,r16
   81e30:	008240c0 	call	8240c <strlen>
   81e34:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
   81e38:	8085883a 	add	r2,r16,r2
   81e3c:	1505883a 	add	r2,r2,r20
   81e40:	10800007 	ldb	r2,0(r2)
   81e44:	14c0011e 	bne	r2,r19,81e4c <alt_find_file+0x64>
    {
      len -= 1;
   81e48:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   81e4c:	1c85883a 	add	r2,r3,r18
   81e50:	10800007 	ldb	r2,0(r2)
   81e54:	14c00126 	beq	r2,r19,81e5c <alt_find_file+0x74>
   81e58:	1000051e 	bne	r2,zero,81e70 <alt_find_file+0x88>
   81e5c:	8009883a 	mov	r4,r16
   81e60:	900b883a 	mov	r5,r18
   81e64:	180d883a 	mov	r6,r3
   81e68:	00820ac0 	call	820ac <memcmp>
   81e6c:	10000326 	beq	r2,zero,81e7c <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   81e70:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   81e74:	8d7fec1e 	bne	r17,r21,81e28 <alt_find_file+0x40>
   81e78:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
   81e7c:	8805883a 	mov	r2,r17
   81e80:	dfc00617 	ldw	ra,24(sp)
   81e84:	dd400517 	ldw	r21,20(sp)
   81e88:	dd000417 	ldw	r20,16(sp)
   81e8c:	dcc00317 	ldw	r19,12(sp)
   81e90:	dc800217 	ldw	r18,8(sp)
   81e94:	dc400117 	ldw	r17,4(sp)
   81e98:	dc000017 	ldw	r16,0(sp)
   81e9c:	dec00704 	addi	sp,sp,28
   81ea0:	f800283a 	ret

00081ea4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   81ea4:	000b883a 	mov	r5,zero
   81ea8:	00c00234 	movhi	r3,8
   81eac:	18d7a804 	addi	r3,r3,24224
   81eb0:	02000304 	movi	r8,12
   81eb4:	02400234 	movhi	r9,8
   81eb8:	4a5a1204 	addi	r9,r9,26696
   81ebc:	01c00044 	movi	r7,1
   81ec0:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
   81ec4:	18800017 	ldw	r2,0(r3)
   81ec8:	10000c1e 	bne	r2,zero,81efc <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
   81ecc:	2a05383a 	mul	r2,r5,r8
   81ed0:	00c00234 	movhi	r3,8
   81ed4:	18d7a804 	addi	r3,r3,24224
   81ed8:	10c5883a 	add	r2,r2,r3
   81edc:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
   81ee0:	48800017 	ldw	r2,0(r9)
   81ee4:	11400216 	blt	r2,r5,81ef0 <alt_get_fd+0x4c>
   81ee8:	2805883a 	mov	r2,r5
   81eec:	f800283a 	ret
      {
        alt_max_fd = i;
   81ef0:	49400015 	stw	r5,0(r9)
   81ef4:	2805883a 	mov	r2,r5
   81ef8:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   81efc:	29cb883a 	add	r5,r5,r7
   81f00:	1a07883a 	add	r3,r3,r8
   81f04:	29bfef1e 	bne	r5,r6,81ec4 <alt_get_fd+0x20>
   81f08:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   81f0c:	f800283a 	ret

00081f10 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   81f10:	2007883a 	mov	r3,r4
   81f14:	00840004 	movi	r2,4096
   81f18:	1140012e 	bgeu	r2,r5,81f20 <alt_icache_flush+0x10>
   81f1c:	100b883a 	mov	r5,r2
   81f20:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   81f24:	1940042e 	bgeu	r3,r5,81f38 <alt_icache_flush+0x28>
   81f28:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   81f2c:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   81f30:	1887883a 	add	r3,r3,r2
   81f34:	197ffd36 	bltu	r3,r5,81f2c <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   81f38:	208007cc 	andi	r2,r4,31
   81f3c:	10000126 	beq	r2,zero,81f44 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   81f40:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   81f44:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   81f48:	f800283a 	ret

00081f4c <exit>:
   81f4c:	defffe04 	addi	sp,sp,-8
   81f50:	000b883a 	mov	r5,zero
   81f54:	dc000015 	stw	r16,0(sp)
   81f58:	dfc00115 	stw	ra,4(sp)
   81f5c:	2021883a 	mov	r16,r4
   81f60:	008270c0 	call	8270c <__call_exitprocs>
   81f64:	00800234 	movhi	r2,8
   81f68:	109a1804 	addi	r2,r2,26720
   81f6c:	11000017 	ldw	r4,0(r2)
   81f70:	20800f17 	ldw	r2,60(r4)
   81f74:	10000126 	beq	r2,zero,81f7c <exit+0x30>
   81f78:	103ee83a 	callr	r2
   81f7c:	8009883a 	mov	r4,r16
   81f80:	00844540 	call	84454 <_exit>

00081f84 <getc>:
   81f84:	defffd04 	addi	sp,sp,-12
   81f88:	dc400115 	stw	r17,4(sp)
   81f8c:	04400234 	movhi	r17,8
   81f90:	8c5a1704 	addi	r17,r17,26716
   81f94:	88c00017 	ldw	r3,0(r17)
   81f98:	dc000015 	stw	r16,0(sp)
   81f9c:	dfc00215 	stw	ra,8(sp)
   81fa0:	2021883a 	mov	r16,r4
   81fa4:	18000326 	beq	r3,zero,81fb4 <getc+0x30>
   81fa8:	18800e17 	ldw	r2,56(r3)
   81fac:	1809883a 	mov	r4,r3
   81fb0:	10000e26 	beq	r2,zero,81fec <getc+0x68>
   81fb4:	80800117 	ldw	r2,4(r16)
   81fb8:	800b883a 	mov	r5,r16
   81fbc:	10bfffc4 	addi	r2,r2,-1
   81fc0:	80800115 	stw	r2,4(r16)
   81fc4:	10000f16 	blt	r2,zero,82004 <getc+0x80>
   81fc8:	80c00017 	ldw	r3,0(r16)
   81fcc:	18800003 	ldbu	r2,0(r3)
   81fd0:	18c00044 	addi	r3,r3,1
   81fd4:	80c00015 	stw	r3,0(r16)
   81fd8:	dfc00217 	ldw	ra,8(sp)
   81fdc:	dc400117 	ldw	r17,4(sp)
   81fe0:	dc000017 	ldw	r16,0(sp)
   81fe4:	dec00304 	addi	sp,sp,12
   81fe8:	f800283a 	ret
   81fec:	0082b540 	call	82b54 <__sinit>
   81ff0:	80800117 	ldw	r2,4(r16)
   81ff4:	800b883a 	mov	r5,r16
   81ff8:	10bfffc4 	addi	r2,r2,-1
   81ffc:	80800115 	stw	r2,4(r16)
   82000:	103ff10e 	bge	r2,zero,81fc8 <getc+0x44>
   82004:	89000017 	ldw	r4,0(r17)
   82008:	dfc00217 	ldw	ra,8(sp)
   8200c:	dc400117 	ldw	r17,4(sp)
   82010:	dc000017 	ldw	r16,0(sp)
   82014:	dec00304 	addi	sp,sp,12
   82018:	00823ac1 	jmpi	823ac <__srget_r>

0008201c <_getc_r>:
   8201c:	defffd04 	addi	sp,sp,-12
   82020:	dc400115 	stw	r17,4(sp)
   82024:	dc000015 	stw	r16,0(sp)
   82028:	dfc00215 	stw	ra,8(sp)
   8202c:	2021883a 	mov	r16,r4
   82030:	2823883a 	mov	r17,r5
   82034:	20000226 	beq	r4,zero,82040 <_getc_r+0x24>
   82038:	20800e17 	ldw	r2,56(r4)
   8203c:	10000f26 	beq	r2,zero,8207c <_getc_r+0x60>
   82040:	88800117 	ldw	r2,4(r17)
   82044:	8009883a 	mov	r4,r16
   82048:	880b883a 	mov	r5,r17
   8204c:	10bfffc4 	addi	r2,r2,-1
   82050:	88800115 	stw	r2,4(r17)
   82054:	10001016 	blt	r2,zero,82098 <_getc_r+0x7c>
   82058:	88c00017 	ldw	r3,0(r17)
   8205c:	18800003 	ldbu	r2,0(r3)
   82060:	18c00044 	addi	r3,r3,1
   82064:	88c00015 	stw	r3,0(r17)
   82068:	dfc00217 	ldw	ra,8(sp)
   8206c:	dc400117 	ldw	r17,4(sp)
   82070:	dc000017 	ldw	r16,0(sp)
   82074:	dec00304 	addi	sp,sp,12
   82078:	f800283a 	ret
   8207c:	0082b540 	call	82b54 <__sinit>
   82080:	88800117 	ldw	r2,4(r17)
   82084:	8009883a 	mov	r4,r16
   82088:	880b883a 	mov	r5,r17
   8208c:	10bfffc4 	addi	r2,r2,-1
   82090:	88800115 	stw	r2,4(r17)
   82094:	103ff00e 	bge	r2,zero,82058 <_getc_r+0x3c>
   82098:	dfc00217 	ldw	ra,8(sp)
   8209c:	dc400117 	ldw	r17,4(sp)
   820a0:	dc000017 	ldw	r16,0(sp)
   820a4:	dec00304 	addi	sp,sp,12
   820a8:	00823ac1 	jmpi	823ac <__srget_r>

000820ac <memcmp>:
   820ac:	00c000c4 	movi	r3,3
   820b0:	1980032e 	bgeu	r3,r6,820c0 <memcmp+0x14>
   820b4:	2144b03a 	or	r2,r4,r5
   820b8:	10c4703a 	and	r2,r2,r3
   820bc:	10000f26 	beq	r2,zero,820fc <memcmp+0x50>
   820c0:	31ffffc4 	addi	r7,r6,-1
   820c4:	3000061e 	bne	r6,zero,820e0 <memcmp+0x34>
   820c8:	00000a06 	br	820f4 <memcmp+0x48>
   820cc:	39ffffc4 	addi	r7,r7,-1
   820d0:	00bfffc4 	movi	r2,-1
   820d4:	21000044 	addi	r4,r4,1
   820d8:	29400044 	addi	r5,r5,1
   820dc:	38800526 	beq	r7,r2,820f4 <memcmp+0x48>
   820e0:	20c00003 	ldbu	r3,0(r4)
   820e4:	28800003 	ldbu	r2,0(r5)
   820e8:	18bff826 	beq	r3,r2,820cc <memcmp+0x20>
   820ec:	1885c83a 	sub	r2,r3,r2
   820f0:	f800283a 	ret
   820f4:	0005883a 	mov	r2,zero
   820f8:	f800283a 	ret
   820fc:	180f883a 	mov	r7,r3
   82100:	20c00017 	ldw	r3,0(r4)
   82104:	28800017 	ldw	r2,0(r5)
   82108:	18bfed1e 	bne	r3,r2,820c0 <memcmp+0x14>
   8210c:	31bfff04 	addi	r6,r6,-4
   82110:	21000104 	addi	r4,r4,4
   82114:	29400104 	addi	r5,r5,4
   82118:	39bff936 	bltu	r7,r6,82100 <memcmp+0x54>
   8211c:	003fe806 	br	820c0 <memcmp+0x14>

00082120 <memcpy>:
   82120:	01c003c4 	movi	r7,15
   82124:	2007883a 	mov	r3,r4
   82128:	3980032e 	bgeu	r7,r6,82138 <memcpy+0x18>
   8212c:	2904b03a 	or	r2,r5,r4
   82130:	108000cc 	andi	r2,r2,3
   82134:	10000926 	beq	r2,zero,8215c <memcpy+0x3c>
   82138:	30000626 	beq	r6,zero,82154 <memcpy+0x34>
   8213c:	30cd883a 	add	r6,r6,r3
   82140:	28800003 	ldbu	r2,0(r5)
   82144:	29400044 	addi	r5,r5,1
   82148:	18800005 	stb	r2,0(r3)
   8214c:	18c00044 	addi	r3,r3,1
   82150:	30fffb1e 	bne	r6,r3,82140 <memcpy+0x20>
   82154:	2005883a 	mov	r2,r4
   82158:	f800283a 	ret
   8215c:	3811883a 	mov	r8,r7
   82160:	200f883a 	mov	r7,r4
   82164:	28c00017 	ldw	r3,0(r5)
   82168:	31bffc04 	addi	r6,r6,-16
   8216c:	38c00015 	stw	r3,0(r7)
   82170:	28800117 	ldw	r2,4(r5)
   82174:	38800115 	stw	r2,4(r7)
   82178:	28c00217 	ldw	r3,8(r5)
   8217c:	38c00215 	stw	r3,8(r7)
   82180:	28800317 	ldw	r2,12(r5)
   82184:	29400404 	addi	r5,r5,16
   82188:	38800315 	stw	r2,12(r7)
   8218c:	39c00404 	addi	r7,r7,16
   82190:	41bff436 	bltu	r8,r6,82164 <memcpy+0x44>
   82194:	008000c4 	movi	r2,3
   82198:	1180072e 	bgeu	r2,r6,821b8 <memcpy+0x98>
   8219c:	1007883a 	mov	r3,r2
   821a0:	28800017 	ldw	r2,0(r5)
   821a4:	31bfff04 	addi	r6,r6,-4
   821a8:	29400104 	addi	r5,r5,4
   821ac:	38800015 	stw	r2,0(r7)
   821b0:	39c00104 	addi	r7,r7,4
   821b4:	19bffa36 	bltu	r3,r6,821a0 <memcpy+0x80>
   821b8:	3807883a 	mov	r3,r7
   821bc:	003fde06 	br	82138 <memcpy+0x18>

000821c0 <putc>:
   821c0:	defffc04 	addi	sp,sp,-16
   821c4:	dc800215 	stw	r18,8(sp)
   821c8:	04800234 	movhi	r18,8
   821cc:	949a1704 	addi	r18,r18,26716
   821d0:	90c00017 	ldw	r3,0(r18)
   821d4:	dc400115 	stw	r17,4(sp)
   821d8:	dc000015 	stw	r16,0(sp)
   821dc:	dfc00315 	stw	ra,12(sp)
   821e0:	2023883a 	mov	r17,r4
   821e4:	2821883a 	mov	r16,r5
   821e8:	18000226 	beq	r3,zero,821f4 <putc+0x34>
   821ec:	18800e17 	ldw	r2,56(r3)
   821f0:	10001126 	beq	r2,zero,82238 <putc+0x78>
   821f4:	80800217 	ldw	r2,8(r16)
   821f8:	10ffffc4 	addi	r3,r2,-1
   821fc:	80c00215 	stw	r3,8(r16)
   82200:	18001316 	blt	r3,zero,82250 <putc+0x90>
   82204:	80800017 	ldw	r2,0(r16)
   82208:	14400005 	stb	r17,0(r2)
   8220c:	80c00017 	ldw	r3,0(r16)
   82210:	18800044 	addi	r2,r3,1
   82214:	18c00003 	ldbu	r3,0(r3)
   82218:	80800015 	stw	r2,0(r16)
   8221c:	1805883a 	mov	r2,r3
   82220:	dfc00317 	ldw	ra,12(sp)
   82224:	dc800217 	ldw	r18,8(sp)
   82228:	dc400117 	ldw	r17,4(sp)
   8222c:	dc000017 	ldw	r16,0(sp)
   82230:	dec00404 	addi	sp,sp,16
   82234:	f800283a 	ret
   82238:	1809883a 	mov	r4,r3
   8223c:	0082b540 	call	82b54 <__sinit>
   82240:	80800217 	ldw	r2,8(r16)
   82244:	10ffffc4 	addi	r3,r2,-1
   82248:	80c00215 	stw	r3,8(r16)
   8224c:	183fed0e 	bge	r3,zero,82204 <putc+0x44>
   82250:	80800617 	ldw	r2,24(r16)
   82254:	18800f16 	blt	r3,r2,82294 <putc+0xd4>
   82258:	80800017 	ldw	r2,0(r16)
   8225c:	14400005 	stb	r17,0(r2)
   82260:	81000017 	ldw	r4,0(r16)
   82264:	00800284 	movi	r2,10
   82268:	20c00003 	ldbu	r3,0(r4)
   8226c:	18801226 	beq	r3,r2,822b8 <putc+0xf8>
   82270:	20800044 	addi	r2,r4,1
   82274:	80800015 	stw	r2,0(r16)
   82278:	1805883a 	mov	r2,r3
   8227c:	dfc00317 	ldw	ra,12(sp)
   82280:	dc800217 	ldw	r18,8(sp)
   82284:	dc400117 	ldw	r17,4(sp)
   82288:	dc000017 	ldw	r16,0(sp)
   8228c:	dec00404 	addi	sp,sp,16
   82290:	f800283a 	ret
   82294:	91000017 	ldw	r4,0(r18)
   82298:	880b883a 	mov	r5,r17
   8229c:	800d883a 	mov	r6,r16
   822a0:	dfc00317 	ldw	ra,12(sp)
   822a4:	dc800217 	ldw	r18,8(sp)
   822a8:	dc400117 	ldw	r17,4(sp)
   822ac:	dc000017 	ldw	r16,0(sp)
   822b0:	dec00404 	addi	sp,sp,16
   822b4:	00824801 	jmpi	82480 <__swbuf_r>
   822b8:	91000017 	ldw	r4,0(r18)
   822bc:	180b883a 	mov	r5,r3
   822c0:	003ff606 	br	8229c <putc+0xdc>

000822c4 <_putc_r>:
   822c4:	defffc04 	addi	sp,sp,-16
   822c8:	dc400215 	stw	r17,8(sp)
   822cc:	dc000115 	stw	r16,4(sp)
   822d0:	dfc00315 	stw	ra,12(sp)
   822d4:	2021883a 	mov	r16,r4
   822d8:	2823883a 	mov	r17,r5
   822dc:	20000226 	beq	r4,zero,822e8 <_putc_r+0x24>
   822e0:	20800e17 	ldw	r2,56(r4)
   822e4:	10001026 	beq	r2,zero,82328 <_putc_r+0x64>
   822e8:	30800217 	ldw	r2,8(r6)
   822ec:	10ffffc4 	addi	r3,r2,-1
   822f0:	30c00215 	stw	r3,8(r6)
   822f4:	18001316 	blt	r3,zero,82344 <_putc_r+0x80>
   822f8:	30800017 	ldw	r2,0(r6)
   822fc:	14400005 	stb	r17,0(r2)
   82300:	30c00017 	ldw	r3,0(r6)
   82304:	18800044 	addi	r2,r3,1
   82308:	18c00003 	ldbu	r3,0(r3)
   8230c:	30800015 	stw	r2,0(r6)
   82310:	1805883a 	mov	r2,r3
   82314:	dfc00317 	ldw	ra,12(sp)
   82318:	dc400217 	ldw	r17,8(sp)
   8231c:	dc000117 	ldw	r16,4(sp)
   82320:	dec00404 	addi	sp,sp,16
   82324:	f800283a 	ret
   82328:	d9800015 	stw	r6,0(sp)
   8232c:	0082b540 	call	82b54 <__sinit>
   82330:	d9800017 	ldw	r6,0(sp)
   82334:	30800217 	ldw	r2,8(r6)
   82338:	10ffffc4 	addi	r3,r2,-1
   8233c:	30c00215 	stw	r3,8(r6)
   82340:	183fed0e 	bge	r3,zero,822f8 <_putc_r+0x34>
   82344:	30800617 	ldw	r2,24(r6)
   82348:	18800e16 	blt	r3,r2,82384 <_putc_r+0xc0>
   8234c:	30800017 	ldw	r2,0(r6)
   82350:	14400005 	stb	r17,0(r2)
   82354:	31000017 	ldw	r4,0(r6)
   82358:	00800284 	movi	r2,10
   8235c:	20c00003 	ldbu	r3,0(r4)
   82360:	18800f26 	beq	r3,r2,823a0 <_putc_r+0xdc>
   82364:	20800044 	addi	r2,r4,1
   82368:	30800015 	stw	r2,0(r6)
   8236c:	1805883a 	mov	r2,r3
   82370:	dfc00317 	ldw	ra,12(sp)
   82374:	dc400217 	ldw	r17,8(sp)
   82378:	dc000117 	ldw	r16,4(sp)
   8237c:	dec00404 	addi	sp,sp,16
   82380:	f800283a 	ret
   82384:	8009883a 	mov	r4,r16
   82388:	880b883a 	mov	r5,r17
   8238c:	dfc00317 	ldw	ra,12(sp)
   82390:	dc400217 	ldw	r17,8(sp)
   82394:	dc000117 	ldw	r16,4(sp)
   82398:	dec00404 	addi	sp,sp,16
   8239c:	00824801 	jmpi	82480 <__swbuf_r>
   823a0:	8009883a 	mov	r4,r16
   823a4:	180b883a 	mov	r5,r3
   823a8:	003ff806 	br	8238c <_putc_r+0xc8>

000823ac <__srget_r>:
   823ac:	defffe04 	addi	sp,sp,-8
   823b0:	dc000015 	stw	r16,0(sp)
   823b4:	dfc00115 	stw	ra,4(sp)
   823b8:	2821883a 	mov	r16,r5
   823bc:	0083cd80 	call	83cd8 <__srefill_r>
   823c0:	013fffc4 	movi	r4,-1
   823c4:	1000071e 	bne	r2,zero,823e4 <__srget_r+0x38>
   823c8:	80800117 	ldw	r2,4(r16)
   823cc:	81000017 	ldw	r4,0(r16)
   823d0:	10bfffc4 	addi	r2,r2,-1
   823d4:	20c00044 	addi	r3,r4,1
   823d8:	80800115 	stw	r2,4(r16)
   823dc:	21000003 	ldbu	r4,0(r4)
   823e0:	80c00015 	stw	r3,0(r16)
   823e4:	2005883a 	mov	r2,r4
   823e8:	dfc00117 	ldw	ra,4(sp)
   823ec:	dc000017 	ldw	r16,0(sp)
   823f0:	dec00204 	addi	sp,sp,8
   823f4:	f800283a 	ret

000823f8 <__srget>:
   823f8:	00800234 	movhi	r2,8
   823fc:	109a1704 	addi	r2,r2,26716
   82400:	200b883a 	mov	r5,r4
   82404:	11000017 	ldw	r4,0(r2)
   82408:	00823ac1 	jmpi	823ac <__srget_r>

0008240c <strlen>:
   8240c:	208000cc 	andi	r2,r4,3
   82410:	2011883a 	mov	r8,r4
   82414:	1000161e 	bne	r2,zero,82470 <strlen+0x64>
   82418:	20c00017 	ldw	r3,0(r4)
   8241c:	017fbff4 	movhi	r5,65279
   82420:	297fbfc4 	addi	r5,r5,-257
   82424:	01e02074 	movhi	r7,32897
   82428:	39e02004 	addi	r7,r7,-32640
   8242c:	1945883a 	add	r2,r3,r5
   82430:	11c4703a 	and	r2,r2,r7
   82434:	00c6303a 	nor	r3,zero,r3
   82438:	1886703a 	and	r3,r3,r2
   8243c:	18000c1e 	bne	r3,zero,82470 <strlen+0x64>
   82440:	280d883a 	mov	r6,r5
   82444:	380b883a 	mov	r5,r7
   82448:	21000104 	addi	r4,r4,4
   8244c:	20800017 	ldw	r2,0(r4)
   82450:	1187883a 	add	r3,r2,r6
   82454:	1946703a 	and	r3,r3,r5
   82458:	0084303a 	nor	r2,zero,r2
   8245c:	10c4703a 	and	r2,r2,r3
   82460:	103ff926 	beq	r2,zero,82448 <strlen+0x3c>
   82464:	20800007 	ldb	r2,0(r4)
   82468:	10000326 	beq	r2,zero,82478 <strlen+0x6c>
   8246c:	21000044 	addi	r4,r4,1
   82470:	20800007 	ldb	r2,0(r4)
   82474:	103ffd1e 	bne	r2,zero,8246c <strlen+0x60>
   82478:	2205c83a 	sub	r2,r4,r8
   8247c:	f800283a 	ret

00082480 <__swbuf_r>:
   82480:	defffc04 	addi	sp,sp,-16
   82484:	dc400215 	stw	r17,8(sp)
   82488:	dc000115 	stw	r16,4(sp)
   8248c:	dfc00315 	stw	ra,12(sp)
   82490:	2023883a 	mov	r17,r4
   82494:	2821883a 	mov	r16,r5
   82498:	20000226 	beq	r4,zero,824a4 <__swbuf_r+0x24>
   8249c:	20800e17 	ldw	r2,56(r4)
   824a0:	10002f26 	beq	r2,zero,82560 <__swbuf_r+0xe0>
   824a4:	3080030b 	ldhu	r2,12(r6)
   824a8:	30c00617 	ldw	r3,24(r6)
   824ac:	1080020c 	andi	r2,r2,8
   824b0:	30c00215 	stw	r3,8(r6)
   824b4:	10002226 	beq	r2,zero,82540 <__swbuf_r+0xc0>
   824b8:	30c00417 	ldw	r3,16(r6)
   824bc:	18002026 	beq	r3,zero,82540 <__swbuf_r+0xc0>
   824c0:	31000017 	ldw	r4,0(r6)
   824c4:	30800517 	ldw	r2,20(r6)
   824c8:	20c7c83a 	sub	r3,r4,r3
   824cc:	18802f0e 	bge	r3,r2,8258c <__swbuf_r+0x10c>
   824d0:	19400044 	addi	r5,r3,1
   824d4:	30800217 	ldw	r2,8(r6)
   824d8:	84003fcc 	andi	r16,r16,255
   824dc:	20c00044 	addi	r3,r4,1
   824e0:	10bfffc4 	addi	r2,r2,-1
   824e4:	30800215 	stw	r2,8(r6)
   824e8:	24000005 	stb	r16,0(r4)
   824ec:	30800517 	ldw	r2,20(r6)
   824f0:	30c00015 	stw	r3,0(r6)
   824f4:	11400c26 	beq	r2,r5,82528 <__swbuf_r+0xa8>
   824f8:	3080030b 	ldhu	r2,12(r6)
   824fc:	1080004c 	andi	r2,r2,1
   82500:	1005003a 	cmpeq	r2,r2,zero
   82504:	10000626 	beq	r2,zero,82520 <__swbuf_r+0xa0>
   82508:	8005883a 	mov	r2,r16
   8250c:	dfc00317 	ldw	ra,12(sp)
   82510:	dc400217 	ldw	r17,8(sp)
   82514:	dc000117 	ldw	r16,4(sp)
   82518:	dec00404 	addi	sp,sp,16
   8251c:	f800283a 	ret
   82520:	00800284 	movi	r2,10
   82524:	80bff81e 	bne	r16,r2,82508 <__swbuf_r+0x88>
   82528:	8809883a 	mov	r4,r17
   8252c:	300b883a 	mov	r5,r6
   82530:	00828bc0 	call	828bc <_fflush_r>
   82534:	103ff426 	beq	r2,zero,82508 <__swbuf_r+0x88>
   82538:	043fffc4 	movi	r16,-1
   8253c:	003ff206 	br	82508 <__swbuf_r+0x88>
   82540:	300b883a 	mov	r5,r6
   82544:	8809883a 	mov	r4,r17
   82548:	d9800015 	stw	r6,0(sp)
   8254c:	00825cc0 	call	825cc <__swsetup_r>
   82550:	d9800017 	ldw	r6,0(sp)
   82554:	1000061e 	bne	r2,zero,82570 <__swbuf_r+0xf0>
   82558:	30c00417 	ldw	r3,16(r6)
   8255c:	003fd806 	br	824c0 <__swbuf_r+0x40>
   82560:	d9800015 	stw	r6,0(sp)
   82564:	0082b540 	call	82b54 <__sinit>
   82568:	d9800017 	ldw	r6,0(sp)
   8256c:	003fcd06 	br	824a4 <__swbuf_r+0x24>
   82570:	3080030b 	ldhu	r2,12(r6)
   82574:	00c00244 	movi	r3,9
   82578:	043fffc4 	movi	r16,-1
   8257c:	10801014 	ori	r2,r2,64
   82580:	3080030d 	sth	r2,12(r6)
   82584:	88c00015 	stw	r3,0(r17)
   82588:	003fdf06 	br	82508 <__swbuf_r+0x88>
   8258c:	300b883a 	mov	r5,r6
   82590:	8809883a 	mov	r4,r17
   82594:	d9800015 	stw	r6,0(sp)
   82598:	00828bc0 	call	828bc <_fflush_r>
   8259c:	d9800017 	ldw	r6,0(sp)
   825a0:	103fe51e 	bne	r2,zero,82538 <__swbuf_r+0xb8>
   825a4:	31000017 	ldw	r4,0(r6)
   825a8:	01400044 	movi	r5,1
   825ac:	003fc906 	br	824d4 <__swbuf_r+0x54>

000825b0 <__swbuf>:
   825b0:	01800234 	movhi	r6,8
   825b4:	319a1704 	addi	r6,r6,26716
   825b8:	2007883a 	mov	r3,r4
   825bc:	31000017 	ldw	r4,0(r6)
   825c0:	280d883a 	mov	r6,r5
   825c4:	180b883a 	mov	r5,r3
   825c8:	00824801 	jmpi	82480 <__swbuf_r>

000825cc <__swsetup_r>:
   825cc:	00800234 	movhi	r2,8
   825d0:	109a1704 	addi	r2,r2,26716
   825d4:	10c00017 	ldw	r3,0(r2)
   825d8:	defffd04 	addi	sp,sp,-12
   825dc:	dc400115 	stw	r17,4(sp)
   825e0:	dc000015 	stw	r16,0(sp)
   825e4:	dfc00215 	stw	ra,8(sp)
   825e8:	2023883a 	mov	r17,r4
   825ec:	2821883a 	mov	r16,r5
   825f0:	18000226 	beq	r3,zero,825fc <__swsetup_r+0x30>
   825f4:	18800e17 	ldw	r2,56(r3)
   825f8:	10001f26 	beq	r2,zero,82678 <__swsetup_r+0xac>
   825fc:	8100030b 	ldhu	r4,12(r16)
   82600:	2080020c 	andi	r2,r4,8
   82604:	10002826 	beq	r2,zero,826a8 <__swsetup_r+0xdc>
   82608:	81400417 	ldw	r5,16(r16)
   8260c:	28001d26 	beq	r5,zero,82684 <__swsetup_r+0xb8>
   82610:	2080004c 	andi	r2,r4,1
   82614:	1005003a 	cmpeq	r2,r2,zero
   82618:	10000b26 	beq	r2,zero,82648 <__swsetup_r+0x7c>
   8261c:	2080008c 	andi	r2,r4,2
   82620:	10001226 	beq	r2,zero,8266c <__swsetup_r+0xa0>
   82624:	0005883a 	mov	r2,zero
   82628:	80800215 	stw	r2,8(r16)
   8262c:	28000b26 	beq	r5,zero,8265c <__swsetup_r+0x90>
   82630:	0005883a 	mov	r2,zero
   82634:	dfc00217 	ldw	ra,8(sp)
   82638:	dc400117 	ldw	r17,4(sp)
   8263c:	dc000017 	ldw	r16,0(sp)
   82640:	dec00304 	addi	sp,sp,12
   82644:	f800283a 	ret
   82648:	80800517 	ldw	r2,20(r16)
   8264c:	80000215 	stw	zero,8(r16)
   82650:	0085c83a 	sub	r2,zero,r2
   82654:	80800615 	stw	r2,24(r16)
   82658:	283ff51e 	bne	r5,zero,82630 <__swsetup_r+0x64>
   8265c:	2080200c 	andi	r2,r4,128
   82660:	103ff326 	beq	r2,zero,82630 <__swsetup_r+0x64>
   82664:	00bfffc4 	movi	r2,-1
   82668:	003ff206 	br	82634 <__swsetup_r+0x68>
   8266c:	80800517 	ldw	r2,20(r16)
   82670:	80800215 	stw	r2,8(r16)
   82674:	003fed06 	br	8262c <__swsetup_r+0x60>
   82678:	1809883a 	mov	r4,r3
   8267c:	0082b540 	call	82b54 <__sinit>
   82680:	003fde06 	br	825fc <__swsetup_r+0x30>
   82684:	20c0a00c 	andi	r3,r4,640
   82688:	00808004 	movi	r2,512
   8268c:	18bfe026 	beq	r3,r2,82610 <__swsetup_r+0x44>
   82690:	8809883a 	mov	r4,r17
   82694:	800b883a 	mov	r5,r16
   82698:	008336c0 	call	8336c <__smakebuf_r>
   8269c:	8100030b 	ldhu	r4,12(r16)
   826a0:	81400417 	ldw	r5,16(r16)
   826a4:	003fda06 	br	82610 <__swsetup_r+0x44>
   826a8:	2080040c 	andi	r2,r4,16
   826ac:	103fed26 	beq	r2,zero,82664 <__swsetup_r+0x98>
   826b0:	2080010c 	andi	r2,r4,4
   826b4:	10001226 	beq	r2,zero,82700 <__swsetup_r+0x134>
   826b8:	81400c17 	ldw	r5,48(r16)
   826bc:	28000526 	beq	r5,zero,826d4 <__swsetup_r+0x108>
   826c0:	80801004 	addi	r2,r16,64
   826c4:	28800226 	beq	r5,r2,826d0 <__swsetup_r+0x104>
   826c8:	8809883a 	mov	r4,r17
   826cc:	0082ed80 	call	82ed8 <_free_r>
   826d0:	80000c15 	stw	zero,48(r16)
   826d4:	8080030b 	ldhu	r2,12(r16)
   826d8:	81400417 	ldw	r5,16(r16)
   826dc:	80000115 	stw	zero,4(r16)
   826e0:	10bff6cc 	andi	r2,r2,65499
   826e4:	8080030d 	sth	r2,12(r16)
   826e8:	81400015 	stw	r5,0(r16)
   826ec:	8080030b 	ldhu	r2,12(r16)
   826f0:	10800214 	ori	r2,r2,8
   826f4:	113fffcc 	andi	r4,r2,65535
   826f8:	8080030d 	sth	r2,12(r16)
   826fc:	003fc306 	br	8260c <__swsetup_r+0x40>
   82700:	81400417 	ldw	r5,16(r16)
   82704:	003ff906 	br	826ec <__swsetup_r+0x120>

00082708 <register_fini>:
   82708:	f800283a 	ret

0008270c <__call_exitprocs>:
   8270c:	00800234 	movhi	r2,8
   82710:	109a1804 	addi	r2,r2,26720
   82714:	10800017 	ldw	r2,0(r2)
   82718:	defff304 	addi	sp,sp,-52
   8271c:	df000b15 	stw	fp,44(sp)
   82720:	d8800115 	stw	r2,4(sp)
   82724:	00800034 	movhi	r2,0
   82728:	10800004 	addi	r2,r2,0
   8272c:	1005003a 	cmpeq	r2,r2,zero
   82730:	d8800215 	stw	r2,8(sp)
   82734:	d8800117 	ldw	r2,4(sp)
   82738:	dd400815 	stw	r21,32(sp)
   8273c:	dd000715 	stw	r20,28(sp)
   82740:	10805204 	addi	r2,r2,328
   82744:	dfc00c15 	stw	ra,48(sp)
   82748:	ddc00a15 	stw	r23,40(sp)
   8274c:	dd800915 	stw	r22,36(sp)
   82750:	dcc00615 	stw	r19,24(sp)
   82754:	dc800515 	stw	r18,20(sp)
   82758:	dc400415 	stw	r17,16(sp)
   8275c:	dc000315 	stw	r16,12(sp)
   82760:	282b883a 	mov	r21,r5
   82764:	2039883a 	mov	fp,r4
   82768:	d8800015 	stw	r2,0(sp)
   8276c:	2829003a 	cmpeq	r20,r5,zero
   82770:	d8800117 	ldw	r2,4(sp)
   82774:	14405217 	ldw	r17,328(r2)
   82778:	88001026 	beq	r17,zero,827bc <__call_exitprocs+0xb0>
   8277c:	ddc00017 	ldw	r23,0(sp)
   82780:	88800117 	ldw	r2,4(r17)
   82784:	8c802204 	addi	r18,r17,136
   82788:	143fffc4 	addi	r16,r2,-1
   8278c:	80000916 	blt	r16,zero,827b4 <__call_exitprocs+0xa8>
   82790:	05bfffc4 	movi	r22,-1
   82794:	a000151e 	bne	r20,zero,827ec <__call_exitprocs+0xe0>
   82798:	8409883a 	add	r4,r16,r16
   8279c:	2105883a 	add	r2,r4,r4
   827a0:	1485883a 	add	r2,r2,r18
   827a4:	10c02017 	ldw	r3,128(r2)
   827a8:	a8c01126 	beq	r21,r3,827f0 <__call_exitprocs+0xe4>
   827ac:	843fffc4 	addi	r16,r16,-1
   827b0:	85bff81e 	bne	r16,r22,82794 <__call_exitprocs+0x88>
   827b4:	d8800217 	ldw	r2,8(sp)
   827b8:	10003126 	beq	r2,zero,82880 <__call_exitprocs+0x174>
   827bc:	dfc00c17 	ldw	ra,48(sp)
   827c0:	df000b17 	ldw	fp,44(sp)
   827c4:	ddc00a17 	ldw	r23,40(sp)
   827c8:	dd800917 	ldw	r22,36(sp)
   827cc:	dd400817 	ldw	r21,32(sp)
   827d0:	dd000717 	ldw	r20,28(sp)
   827d4:	dcc00617 	ldw	r19,24(sp)
   827d8:	dc800517 	ldw	r18,20(sp)
   827dc:	dc400417 	ldw	r17,16(sp)
   827e0:	dc000317 	ldw	r16,12(sp)
   827e4:	dec00d04 	addi	sp,sp,52
   827e8:	f800283a 	ret
   827ec:	8409883a 	add	r4,r16,r16
   827f0:	88c00117 	ldw	r3,4(r17)
   827f4:	2105883a 	add	r2,r4,r4
   827f8:	1445883a 	add	r2,r2,r17
   827fc:	18ffffc4 	addi	r3,r3,-1
   82800:	11800217 	ldw	r6,8(r2)
   82804:	1c001526 	beq	r3,r16,8285c <__call_exitprocs+0x150>
   82808:	10000215 	stw	zero,8(r2)
   8280c:	303fe726 	beq	r6,zero,827ac <__call_exitprocs+0xa0>
   82810:	00c00044 	movi	r3,1
   82814:	1c06983a 	sll	r3,r3,r16
   82818:	90804017 	ldw	r2,256(r18)
   8281c:	8cc00117 	ldw	r19,4(r17)
   82820:	1884703a 	and	r2,r3,r2
   82824:	10001426 	beq	r2,zero,82878 <__call_exitprocs+0x16c>
   82828:	90804117 	ldw	r2,260(r18)
   8282c:	1884703a 	and	r2,r3,r2
   82830:	10000c1e 	bne	r2,zero,82864 <__call_exitprocs+0x158>
   82834:	2105883a 	add	r2,r4,r4
   82838:	1485883a 	add	r2,r2,r18
   8283c:	11400017 	ldw	r5,0(r2)
   82840:	e009883a 	mov	r4,fp
   82844:	303ee83a 	callr	r6
   82848:	88800117 	ldw	r2,4(r17)
   8284c:	98bfc81e 	bne	r19,r2,82770 <__call_exitprocs+0x64>
   82850:	b8800017 	ldw	r2,0(r23)
   82854:	147fd526 	beq	r2,r17,827ac <__call_exitprocs+0xa0>
   82858:	003fc506 	br	82770 <__call_exitprocs+0x64>
   8285c:	8c000115 	stw	r16,4(r17)
   82860:	003fea06 	br	8280c <__call_exitprocs+0x100>
   82864:	2105883a 	add	r2,r4,r4
   82868:	1485883a 	add	r2,r2,r18
   8286c:	11000017 	ldw	r4,0(r2)
   82870:	303ee83a 	callr	r6
   82874:	003ff406 	br	82848 <__call_exitprocs+0x13c>
   82878:	303ee83a 	callr	r6
   8287c:	003ff206 	br	82848 <__call_exitprocs+0x13c>
   82880:	88800117 	ldw	r2,4(r17)
   82884:	1000081e 	bne	r2,zero,828a8 <__call_exitprocs+0x19c>
   82888:	89000017 	ldw	r4,0(r17)
   8288c:	20000726 	beq	r4,zero,828ac <__call_exitprocs+0x1a0>
   82890:	b9000015 	stw	r4,0(r23)
   82894:	8809883a 	mov	r4,r17
   82898:	00000000 	call	0 <__reset-0x80000>
   8289c:	bc400017 	ldw	r17,0(r23)
   828a0:	883fb71e 	bne	r17,zero,82780 <__call_exitprocs+0x74>
   828a4:	003fc506 	br	827bc <__call_exitprocs+0xb0>
   828a8:	89000017 	ldw	r4,0(r17)
   828ac:	882f883a 	mov	r23,r17
   828b0:	2023883a 	mov	r17,r4
   828b4:	883fb21e 	bne	r17,zero,82780 <__call_exitprocs+0x74>
   828b8:	003fc006 	br	827bc <__call_exitprocs+0xb0>

000828bc <_fflush_r>:
   828bc:	defffb04 	addi	sp,sp,-20
   828c0:	dcc00315 	stw	r19,12(sp)
   828c4:	dc800215 	stw	r18,8(sp)
   828c8:	dfc00415 	stw	ra,16(sp)
   828cc:	dc400115 	stw	r17,4(sp)
   828d0:	dc000015 	stw	r16,0(sp)
   828d4:	2027883a 	mov	r19,r4
   828d8:	2825883a 	mov	r18,r5
   828dc:	20000226 	beq	r4,zero,828e8 <_fflush_r+0x2c>
   828e0:	20800e17 	ldw	r2,56(r4)
   828e4:	10005626 	beq	r2,zero,82a40 <_fflush_r+0x184>
   828e8:	9100030b 	ldhu	r4,12(r18)
   828ec:	20ffffcc 	andi	r3,r4,65535
   828f0:	18e0001c 	xori	r3,r3,32768
   828f4:	18e00004 	addi	r3,r3,-32768
   828f8:	1880020c 	andi	r2,r3,8
   828fc:	1000261e 	bne	r2,zero,82998 <_fflush_r+0xdc>
   82900:	90c00117 	ldw	r3,4(r18)
   82904:	20820014 	ori	r2,r4,2048
   82908:	9080030d 	sth	r2,12(r18)
   8290c:	1009883a 	mov	r4,r2
   82910:	00c0400e 	bge	zero,r3,82a14 <_fflush_r+0x158>
   82914:	92000a17 	ldw	r8,40(r18)
   82918:	40004026 	beq	r8,zero,82a1c <_fflush_r+0x160>
   8291c:	2084000c 	andi	r2,r4,4096
   82920:	10005326 	beq	r2,zero,82a70 <_fflush_r+0x1b4>
   82924:	94001417 	ldw	r16,80(r18)
   82928:	9080030b 	ldhu	r2,12(r18)
   8292c:	1080010c 	andi	r2,r2,4
   82930:	1000481e 	bne	r2,zero,82a54 <_fflush_r+0x198>
   82934:	91400717 	ldw	r5,28(r18)
   82938:	9809883a 	mov	r4,r19
   8293c:	800d883a 	mov	r6,r16
   82940:	000f883a 	mov	r7,zero
   82944:	403ee83a 	callr	r8
   82948:	8080261e 	bne	r16,r2,829e4 <_fflush_r+0x128>
   8294c:	9080030b 	ldhu	r2,12(r18)
   82950:	91000417 	ldw	r4,16(r18)
   82954:	90000115 	stw	zero,4(r18)
   82958:	10bdffcc 	andi	r2,r2,63487
   8295c:	10ffffcc 	andi	r3,r2,65535
   82960:	18c4000c 	andi	r3,r3,4096
   82964:	9080030d 	sth	r2,12(r18)
   82968:	91000015 	stw	r4,0(r18)
   8296c:	18002b26 	beq	r3,zero,82a1c <_fflush_r+0x160>
   82970:	0007883a 	mov	r3,zero
   82974:	1805883a 	mov	r2,r3
   82978:	94001415 	stw	r16,80(r18)
   8297c:	dfc00417 	ldw	ra,16(sp)
   82980:	dcc00317 	ldw	r19,12(sp)
   82984:	dc800217 	ldw	r18,8(sp)
   82988:	dc400117 	ldw	r17,4(sp)
   8298c:	dc000017 	ldw	r16,0(sp)
   82990:	dec00504 	addi	sp,sp,20
   82994:	f800283a 	ret
   82998:	94400417 	ldw	r17,16(r18)
   8299c:	88001f26 	beq	r17,zero,82a1c <_fflush_r+0x160>
   829a0:	90800017 	ldw	r2,0(r18)
   829a4:	18c000cc 	andi	r3,r3,3
   829a8:	94400015 	stw	r17,0(r18)
   829ac:	1461c83a 	sub	r16,r2,r17
   829b0:	18002526 	beq	r3,zero,82a48 <_fflush_r+0x18c>
   829b4:	0005883a 	mov	r2,zero
   829b8:	90800215 	stw	r2,8(r18)
   829bc:	0400170e 	bge	zero,r16,82a1c <_fflush_r+0x160>
   829c0:	90c00917 	ldw	r3,36(r18)
   829c4:	91400717 	ldw	r5,28(r18)
   829c8:	880d883a 	mov	r6,r17
   829cc:	800f883a 	mov	r7,r16
   829d0:	9809883a 	mov	r4,r19
   829d4:	183ee83a 	callr	r3
   829d8:	88a3883a 	add	r17,r17,r2
   829dc:	80a1c83a 	sub	r16,r16,r2
   829e0:	00bff616 	blt	zero,r2,829bc <_fflush_r+0x100>
   829e4:	9080030b 	ldhu	r2,12(r18)
   829e8:	00ffffc4 	movi	r3,-1
   829ec:	10801014 	ori	r2,r2,64
   829f0:	9080030d 	sth	r2,12(r18)
   829f4:	1805883a 	mov	r2,r3
   829f8:	dfc00417 	ldw	ra,16(sp)
   829fc:	dcc00317 	ldw	r19,12(sp)
   82a00:	dc800217 	ldw	r18,8(sp)
   82a04:	dc400117 	ldw	r17,4(sp)
   82a08:	dc000017 	ldw	r16,0(sp)
   82a0c:	dec00504 	addi	sp,sp,20
   82a10:	f800283a 	ret
   82a14:	90800f17 	ldw	r2,60(r18)
   82a18:	00bfbe16 	blt	zero,r2,82914 <_fflush_r+0x58>
   82a1c:	0007883a 	mov	r3,zero
   82a20:	1805883a 	mov	r2,r3
   82a24:	dfc00417 	ldw	ra,16(sp)
   82a28:	dcc00317 	ldw	r19,12(sp)
   82a2c:	dc800217 	ldw	r18,8(sp)
   82a30:	dc400117 	ldw	r17,4(sp)
   82a34:	dc000017 	ldw	r16,0(sp)
   82a38:	dec00504 	addi	sp,sp,20
   82a3c:	f800283a 	ret
   82a40:	0082b540 	call	82b54 <__sinit>
   82a44:	003fa806 	br	828e8 <_fflush_r+0x2c>
   82a48:	90800517 	ldw	r2,20(r18)
   82a4c:	90800215 	stw	r2,8(r18)
   82a50:	003fda06 	br	829bc <_fflush_r+0x100>
   82a54:	90800117 	ldw	r2,4(r18)
   82a58:	90c00c17 	ldw	r3,48(r18)
   82a5c:	80a1c83a 	sub	r16,r16,r2
   82a60:	183fb426 	beq	r3,zero,82934 <_fflush_r+0x78>
   82a64:	90800f17 	ldw	r2,60(r18)
   82a68:	80a1c83a 	sub	r16,r16,r2
   82a6c:	003fb106 	br	82934 <_fflush_r+0x78>
   82a70:	91400717 	ldw	r5,28(r18)
   82a74:	9809883a 	mov	r4,r19
   82a78:	000d883a 	mov	r6,zero
   82a7c:	01c00044 	movi	r7,1
   82a80:	403ee83a 	callr	r8
   82a84:	1021883a 	mov	r16,r2
   82a88:	00bfffc4 	movi	r2,-1
   82a8c:	80800226 	beq	r16,r2,82a98 <_fflush_r+0x1dc>
   82a90:	92000a17 	ldw	r8,40(r18)
   82a94:	003fa406 	br	82928 <_fflush_r+0x6c>
   82a98:	98c00017 	ldw	r3,0(r19)
   82a9c:	00800744 	movi	r2,29
   82aa0:	18bfde26 	beq	r3,r2,82a1c <_fflush_r+0x160>
   82aa4:	9080030b 	ldhu	r2,12(r18)
   82aa8:	8007883a 	mov	r3,r16
   82aac:	10801014 	ori	r2,r2,64
   82ab0:	9080030d 	sth	r2,12(r18)
   82ab4:	003fcf06 	br	829f4 <_fflush_r+0x138>

00082ab8 <fflush>:
   82ab8:	01400234 	movhi	r5,8
   82abc:	294a2f04 	addi	r5,r5,10428
   82ac0:	2007883a 	mov	r3,r4
   82ac4:	20000526 	beq	r4,zero,82adc <fflush+0x24>
   82ac8:	00800234 	movhi	r2,8
   82acc:	109a1704 	addi	r2,r2,26716
   82ad0:	11000017 	ldw	r4,0(r2)
   82ad4:	180b883a 	mov	r5,r3
   82ad8:	00828bc1 	jmpi	828bc <_fflush_r>
   82adc:	00800234 	movhi	r2,8
   82ae0:	109a1804 	addi	r2,r2,26720
   82ae4:	11000017 	ldw	r4,0(r2)
   82ae8:	00831ec1 	jmpi	831ec <_fwalk_reent>

00082aec <std>:
   82aec:	00800234 	movhi	r2,8
   82af0:	108fca04 	addi	r2,r2,16168
   82af4:	20800b15 	stw	r2,44(r4)
   82af8:	00800234 	movhi	r2,8
   82afc:	10900504 	addi	r2,r2,16404
   82b00:	20800815 	stw	r2,32(r4)
   82b04:	00c00234 	movhi	r3,8
   82b08:	18cfe604 	addi	r3,r3,16280
   82b0c:	00800234 	movhi	r2,8
   82b10:	108fcc04 	addi	r2,r2,16176
   82b14:	2140030d 	sth	r5,12(r4)
   82b18:	2180038d 	sth	r6,14(r4)
   82b1c:	20c00915 	stw	r3,36(r4)
   82b20:	20800a15 	stw	r2,40(r4)
   82b24:	20000015 	stw	zero,0(r4)
   82b28:	20000115 	stw	zero,4(r4)
   82b2c:	20000215 	stw	zero,8(r4)
   82b30:	20000415 	stw	zero,16(r4)
   82b34:	20000515 	stw	zero,20(r4)
   82b38:	20000615 	stw	zero,24(r4)
   82b3c:	21000715 	stw	r4,28(r4)
   82b40:	f800283a 	ret

00082b44 <__sfp_lock_acquire>:
   82b44:	f800283a 	ret

00082b48 <__sfp_lock_release>:
   82b48:	f800283a 	ret

00082b4c <__sinit_lock_acquire>:
   82b4c:	f800283a 	ret

00082b50 <__sinit_lock_release>:
   82b50:	f800283a 	ret

00082b54 <__sinit>:
   82b54:	20800e17 	ldw	r2,56(r4)
   82b58:	defffd04 	addi	sp,sp,-12
   82b5c:	dc400115 	stw	r17,4(sp)
   82b60:	dc000015 	stw	r16,0(sp)
   82b64:	dfc00215 	stw	ra,8(sp)
   82b68:	04400044 	movi	r17,1
   82b6c:	01400104 	movi	r5,4
   82b70:	000d883a 	mov	r6,zero
   82b74:	2021883a 	mov	r16,r4
   82b78:	2200bb04 	addi	r8,r4,748
   82b7c:	200f883a 	mov	r7,r4
   82b80:	10000526 	beq	r2,zero,82b98 <__sinit+0x44>
   82b84:	dfc00217 	ldw	ra,8(sp)
   82b88:	dc400117 	ldw	r17,4(sp)
   82b8c:	dc000017 	ldw	r16,0(sp)
   82b90:	dec00304 	addi	sp,sp,12
   82b94:	f800283a 	ret
   82b98:	21000117 	ldw	r4,4(r4)
   82b9c:	00800234 	movhi	r2,8
   82ba0:	108b0e04 	addi	r2,r2,11320
   82ba4:	00c000c4 	movi	r3,3
   82ba8:	80800f15 	stw	r2,60(r16)
   82bac:	80c0b915 	stw	r3,740(r16)
   82bb0:	8200ba15 	stw	r8,744(r16)
   82bb4:	84400e15 	stw	r17,56(r16)
   82bb8:	8000b815 	stw	zero,736(r16)
   82bbc:	0082aec0 	call	82aec <std>
   82bc0:	81000217 	ldw	r4,8(r16)
   82bc4:	880d883a 	mov	r6,r17
   82bc8:	800f883a 	mov	r7,r16
   82bcc:	01400284 	movi	r5,10
   82bd0:	0082aec0 	call	82aec <std>
   82bd4:	81000317 	ldw	r4,12(r16)
   82bd8:	800f883a 	mov	r7,r16
   82bdc:	01400484 	movi	r5,18
   82be0:	01800084 	movi	r6,2
   82be4:	dfc00217 	ldw	ra,8(sp)
   82be8:	dc400117 	ldw	r17,4(sp)
   82bec:	dc000017 	ldw	r16,0(sp)
   82bf0:	dec00304 	addi	sp,sp,12
   82bf4:	0082aec1 	jmpi	82aec <std>

00082bf8 <__fp_lock>:
   82bf8:	0005883a 	mov	r2,zero
   82bfc:	f800283a 	ret

00082c00 <__fp_unlock>:
   82c00:	0005883a 	mov	r2,zero
   82c04:	f800283a 	ret

00082c08 <__fp_unlock_all>:
   82c08:	00800234 	movhi	r2,8
   82c0c:	109a1704 	addi	r2,r2,26716
   82c10:	11000017 	ldw	r4,0(r2)
   82c14:	01400234 	movhi	r5,8
   82c18:	294b0004 	addi	r5,r5,11264
   82c1c:	00832b41 	jmpi	832b4 <_fwalk>

00082c20 <__fp_lock_all>:
   82c20:	00800234 	movhi	r2,8
   82c24:	109a1704 	addi	r2,r2,26716
   82c28:	11000017 	ldw	r4,0(r2)
   82c2c:	01400234 	movhi	r5,8
   82c30:	294afe04 	addi	r5,r5,11256
   82c34:	00832b41 	jmpi	832b4 <_fwalk>

00082c38 <_cleanup_r>:
   82c38:	01400234 	movhi	r5,8
   82c3c:	29509b04 	addi	r5,r5,17004
   82c40:	00832b41 	jmpi	832b4 <_fwalk>

00082c44 <_cleanup>:
   82c44:	00800234 	movhi	r2,8
   82c48:	109a1804 	addi	r2,r2,26720
   82c4c:	11000017 	ldw	r4,0(r2)
   82c50:	0082c381 	jmpi	82c38 <_cleanup_r>

00082c54 <__sfmoreglue>:
   82c54:	defffc04 	addi	sp,sp,-16
   82c58:	dc400115 	stw	r17,4(sp)
   82c5c:	2c401724 	muli	r17,r5,92
   82c60:	dc800215 	stw	r18,8(sp)
   82c64:	2825883a 	mov	r18,r5
   82c68:	89400304 	addi	r5,r17,12
   82c6c:	dc000015 	stw	r16,0(sp)
   82c70:	dfc00315 	stw	ra,12(sp)
   82c74:	00835000 	call	83500 <_malloc_r>
   82c78:	0021883a 	mov	r16,zero
   82c7c:	880d883a 	mov	r6,r17
   82c80:	000b883a 	mov	r5,zero
   82c84:	10000626 	beq	r2,zero,82ca0 <__sfmoreglue+0x4c>
   82c88:	11000304 	addi	r4,r2,12
   82c8c:	14800115 	stw	r18,4(r2)
   82c90:	10000015 	stw	zero,0(r2)
   82c94:	11000215 	stw	r4,8(r2)
   82c98:	1021883a 	mov	r16,r2
   82c9c:	0083c400 	call	83c40 <memset>
   82ca0:	8005883a 	mov	r2,r16
   82ca4:	dfc00317 	ldw	ra,12(sp)
   82ca8:	dc800217 	ldw	r18,8(sp)
   82cac:	dc400117 	ldw	r17,4(sp)
   82cb0:	dc000017 	ldw	r16,0(sp)
   82cb4:	dec00404 	addi	sp,sp,16
   82cb8:	f800283a 	ret

00082cbc <__sfp>:
   82cbc:	defffd04 	addi	sp,sp,-12
   82cc0:	00800234 	movhi	r2,8
   82cc4:	109a1804 	addi	r2,r2,26720
   82cc8:	dc000015 	stw	r16,0(sp)
   82ccc:	14000017 	ldw	r16,0(r2)
   82cd0:	dc400115 	stw	r17,4(sp)
   82cd4:	dfc00215 	stw	ra,8(sp)
   82cd8:	80800e17 	ldw	r2,56(r16)
   82cdc:	2023883a 	mov	r17,r4
   82ce0:	10002626 	beq	r2,zero,82d7c <__sfp+0xc0>
   82ce4:	8400b804 	addi	r16,r16,736
   82ce8:	80800117 	ldw	r2,4(r16)
   82cec:	81000217 	ldw	r4,8(r16)
   82cf0:	10ffffc4 	addi	r3,r2,-1
   82cf4:	18000916 	blt	r3,zero,82d1c <__sfp+0x60>
   82cf8:	2080030f 	ldh	r2,12(r4)
   82cfc:	10000b26 	beq	r2,zero,82d2c <__sfp+0x70>
   82d00:	017fffc4 	movi	r5,-1
   82d04:	00000206 	br	82d10 <__sfp+0x54>
   82d08:	2080030f 	ldh	r2,12(r4)
   82d0c:	10000726 	beq	r2,zero,82d2c <__sfp+0x70>
   82d10:	18ffffc4 	addi	r3,r3,-1
   82d14:	21001704 	addi	r4,r4,92
   82d18:	197ffb1e 	bne	r3,r5,82d08 <__sfp+0x4c>
   82d1c:	80800017 	ldw	r2,0(r16)
   82d20:	10001926 	beq	r2,zero,82d88 <__sfp+0xcc>
   82d24:	1021883a 	mov	r16,r2
   82d28:	003fef06 	br	82ce8 <__sfp+0x2c>
   82d2c:	00bfffc4 	movi	r2,-1
   82d30:	00c00044 	movi	r3,1
   82d34:	2080038d 	sth	r2,14(r4)
   82d38:	20c0030d 	sth	r3,12(r4)
   82d3c:	20000015 	stw	zero,0(r4)
   82d40:	20000215 	stw	zero,8(r4)
   82d44:	20000115 	stw	zero,4(r4)
   82d48:	20000415 	stw	zero,16(r4)
   82d4c:	20000515 	stw	zero,20(r4)
   82d50:	20000615 	stw	zero,24(r4)
   82d54:	20000c15 	stw	zero,48(r4)
   82d58:	20000d15 	stw	zero,52(r4)
   82d5c:	20001115 	stw	zero,68(r4)
   82d60:	20001215 	stw	zero,72(r4)
   82d64:	2005883a 	mov	r2,r4
   82d68:	dfc00217 	ldw	ra,8(sp)
   82d6c:	dc400117 	ldw	r17,4(sp)
   82d70:	dc000017 	ldw	r16,0(sp)
   82d74:	dec00304 	addi	sp,sp,12
   82d78:	f800283a 	ret
   82d7c:	8009883a 	mov	r4,r16
   82d80:	0082b540 	call	82b54 <__sinit>
   82d84:	003fd706 	br	82ce4 <__sfp+0x28>
   82d88:	8809883a 	mov	r4,r17
   82d8c:	01400104 	movi	r5,4
   82d90:	0082c540 	call	82c54 <__sfmoreglue>
   82d94:	80800015 	stw	r2,0(r16)
   82d98:	103fe21e 	bne	r2,zero,82d24 <__sfp+0x68>
   82d9c:	00800304 	movi	r2,12
   82da0:	0009883a 	mov	r4,zero
   82da4:	88800015 	stw	r2,0(r17)
   82da8:	003fee06 	br	82d64 <__sfp+0xa8>

00082dac <_malloc_trim_r>:
   82dac:	defffb04 	addi	sp,sp,-20
   82db0:	dcc00315 	stw	r19,12(sp)
   82db4:	04c00234 	movhi	r19,8
   82db8:	9cd90804 	addi	r19,r19,25632
   82dbc:	dc800215 	stw	r18,8(sp)
   82dc0:	dc400115 	stw	r17,4(sp)
   82dc4:	dc000015 	stw	r16,0(sp)
   82dc8:	2823883a 	mov	r17,r5
   82dcc:	2025883a 	mov	r18,r4
   82dd0:	dfc00415 	stw	ra,16(sp)
   82dd4:	00846040 	call	84604 <__malloc_lock>
   82dd8:	98800217 	ldw	r2,8(r19)
   82ddc:	9009883a 	mov	r4,r18
   82de0:	000b883a 	mov	r5,zero
   82de4:	10c00117 	ldw	r3,4(r2)
   82de8:	00bfff04 	movi	r2,-4
   82dec:	18a0703a 	and	r16,r3,r2
   82df0:	8463c83a 	sub	r17,r16,r17
   82df4:	8c43fbc4 	addi	r17,r17,4079
   82df8:	8822d33a 	srli	r17,r17,12
   82dfc:	0083ffc4 	movi	r2,4095
   82e00:	8c7fffc4 	addi	r17,r17,-1
   82e04:	8822933a 	slli	r17,r17,12
   82e08:	1440060e 	bge	r2,r17,82e24 <_malloc_trim_r+0x78>
   82e0c:	0083eb80 	call	83eb8 <_sbrk_r>
   82e10:	98c00217 	ldw	r3,8(r19)
   82e14:	9009883a 	mov	r4,r18
   82e18:	044bc83a 	sub	r5,zero,r17
   82e1c:	80c7883a 	add	r3,r16,r3
   82e20:	10c00926 	beq	r2,r3,82e48 <_malloc_trim_r+0x9c>
   82e24:	00846080 	call	84608 <__malloc_unlock>
   82e28:	0005883a 	mov	r2,zero
   82e2c:	dfc00417 	ldw	ra,16(sp)
   82e30:	dcc00317 	ldw	r19,12(sp)
   82e34:	dc800217 	ldw	r18,8(sp)
   82e38:	dc400117 	ldw	r17,4(sp)
   82e3c:	dc000017 	ldw	r16,0(sp)
   82e40:	dec00504 	addi	sp,sp,20
   82e44:	f800283a 	ret
   82e48:	9009883a 	mov	r4,r18
   82e4c:	0083eb80 	call	83eb8 <_sbrk_r>
   82e50:	844dc83a 	sub	r6,r16,r17
   82e54:	00ffffc4 	movi	r3,-1
   82e58:	9009883a 	mov	r4,r18
   82e5c:	000b883a 	mov	r5,zero
   82e60:	01c00274 	movhi	r7,9
   82e64:	39e2db04 	addi	r7,r7,-29844
   82e68:	31800054 	ori	r6,r6,1
   82e6c:	10c00926 	beq	r2,r3,82e94 <_malloc_trim_r+0xe8>
   82e70:	38800017 	ldw	r2,0(r7)
   82e74:	98c00217 	ldw	r3,8(r19)
   82e78:	9009883a 	mov	r4,r18
   82e7c:	1445c83a 	sub	r2,r2,r17
   82e80:	38800015 	stw	r2,0(r7)
   82e84:	19800115 	stw	r6,4(r3)
   82e88:	00846080 	call	84608 <__malloc_unlock>
   82e8c:	00800044 	movi	r2,1
   82e90:	003fe606 	br	82e2c <_malloc_trim_r+0x80>
   82e94:	0083eb80 	call	83eb8 <_sbrk_r>
   82e98:	99800217 	ldw	r6,8(r19)
   82e9c:	100f883a 	mov	r7,r2
   82ea0:	9009883a 	mov	r4,r18
   82ea4:	1187c83a 	sub	r3,r2,r6
   82ea8:	008003c4 	movi	r2,15
   82eac:	19400054 	ori	r5,r3,1
   82eb0:	10ffdc0e 	bge	r2,r3,82e24 <_malloc_trim_r+0x78>
   82eb4:	00800234 	movhi	r2,8
   82eb8:	109a1a04 	addi	r2,r2,26728
   82ebc:	10c00017 	ldw	r3,0(r2)
   82ec0:	00800274 	movhi	r2,9
   82ec4:	10a2db04 	addi	r2,r2,-29844
   82ec8:	31400115 	stw	r5,4(r6)
   82ecc:	38c7c83a 	sub	r3,r7,r3
   82ed0:	10c00015 	stw	r3,0(r2)
   82ed4:	003fd306 	br	82e24 <_malloc_trim_r+0x78>

00082ed8 <_free_r>:
   82ed8:	defffd04 	addi	sp,sp,-12
   82edc:	dc400115 	stw	r17,4(sp)
   82ee0:	dc000015 	stw	r16,0(sp)
   82ee4:	dfc00215 	stw	ra,8(sp)
   82ee8:	2821883a 	mov	r16,r5
   82eec:	2023883a 	mov	r17,r4
   82ef0:	28005a26 	beq	r5,zero,8305c <_free_r+0x184>
   82ef4:	00846040 	call	84604 <__malloc_lock>
   82ef8:	823ffe04 	addi	r8,r16,-8
   82efc:	41400117 	ldw	r5,4(r8)
   82f00:	00bfff84 	movi	r2,-2
   82f04:	02800234 	movhi	r10,8
   82f08:	52990804 	addi	r10,r10,25632
   82f0c:	288e703a 	and	r7,r5,r2
   82f10:	41cd883a 	add	r6,r8,r7
   82f14:	30c00117 	ldw	r3,4(r6)
   82f18:	51000217 	ldw	r4,8(r10)
   82f1c:	00bfff04 	movi	r2,-4
   82f20:	1892703a 	and	r9,r3,r2
   82f24:	5017883a 	mov	r11,r10
   82f28:	31006726 	beq	r6,r4,830c8 <_free_r+0x1f0>
   82f2c:	2880004c 	andi	r2,r5,1
   82f30:	1005003a 	cmpeq	r2,r2,zero
   82f34:	32400115 	stw	r9,4(r6)
   82f38:	10001a1e 	bne	r2,zero,82fa4 <_free_r+0xcc>
   82f3c:	000b883a 	mov	r5,zero
   82f40:	3247883a 	add	r3,r6,r9
   82f44:	18800117 	ldw	r2,4(r3)
   82f48:	1080004c 	andi	r2,r2,1
   82f4c:	1000231e 	bne	r2,zero,82fdc <_free_r+0x104>
   82f50:	280ac03a 	cmpne	r5,r5,zero
   82f54:	3a4f883a 	add	r7,r7,r9
   82f58:	2800451e 	bne	r5,zero,83070 <_free_r+0x198>
   82f5c:	31000217 	ldw	r4,8(r6)
   82f60:	00800234 	movhi	r2,8
   82f64:	10990a04 	addi	r2,r2,25640
   82f68:	20807b26 	beq	r4,r2,83158 <_free_r+0x280>
   82f6c:	30800317 	ldw	r2,12(r6)
   82f70:	3a07883a 	add	r3,r7,r8
   82f74:	19c00015 	stw	r7,0(r3)
   82f78:	11000215 	stw	r4,8(r2)
   82f7c:	20800315 	stw	r2,12(r4)
   82f80:	38800054 	ori	r2,r7,1
   82f84:	40800115 	stw	r2,4(r8)
   82f88:	28001a26 	beq	r5,zero,82ff4 <_free_r+0x11c>
   82f8c:	8809883a 	mov	r4,r17
   82f90:	dfc00217 	ldw	ra,8(sp)
   82f94:	dc400117 	ldw	r17,4(sp)
   82f98:	dc000017 	ldw	r16,0(sp)
   82f9c:	dec00304 	addi	sp,sp,12
   82fa0:	00846081 	jmpi	84608 <__malloc_unlock>
   82fa4:	80bffe17 	ldw	r2,-8(r16)
   82fa8:	50c00204 	addi	r3,r10,8
   82fac:	4091c83a 	sub	r8,r8,r2
   82fb0:	41000217 	ldw	r4,8(r8)
   82fb4:	388f883a 	add	r7,r7,r2
   82fb8:	20c06126 	beq	r4,r3,83140 <_free_r+0x268>
   82fbc:	40800317 	ldw	r2,12(r8)
   82fc0:	3247883a 	add	r3,r6,r9
   82fc4:	000b883a 	mov	r5,zero
   82fc8:	11000215 	stw	r4,8(r2)
   82fcc:	20800315 	stw	r2,12(r4)
   82fd0:	18800117 	ldw	r2,4(r3)
   82fd4:	1080004c 	andi	r2,r2,1
   82fd8:	103fdd26 	beq	r2,zero,82f50 <_free_r+0x78>
   82fdc:	38800054 	ori	r2,r7,1
   82fe0:	3a07883a 	add	r3,r7,r8
   82fe4:	280ac03a 	cmpne	r5,r5,zero
   82fe8:	40800115 	stw	r2,4(r8)
   82fec:	19c00015 	stw	r7,0(r3)
   82ff0:	283fe61e 	bne	r5,zero,82f8c <_free_r+0xb4>
   82ff4:	00807fc4 	movi	r2,511
   82ff8:	11c01f2e 	bgeu	r2,r7,83078 <_free_r+0x1a0>
   82ffc:	3806d27a 	srli	r3,r7,9
   83000:	1800481e 	bne	r3,zero,83124 <_free_r+0x24c>
   83004:	3804d0fa 	srli	r2,r7,3
   83008:	100690fa 	slli	r3,r2,3
   8300c:	1acd883a 	add	r6,r3,r11
   83010:	31400217 	ldw	r5,8(r6)
   83014:	31405926 	beq	r6,r5,8317c <_free_r+0x2a4>
   83018:	28800117 	ldw	r2,4(r5)
   8301c:	00ffff04 	movi	r3,-4
   83020:	10c4703a 	and	r2,r2,r3
   83024:	3880022e 	bgeu	r7,r2,83030 <_free_r+0x158>
   83028:	29400217 	ldw	r5,8(r5)
   8302c:	317ffa1e 	bne	r6,r5,83018 <_free_r+0x140>
   83030:	29800317 	ldw	r6,12(r5)
   83034:	41800315 	stw	r6,12(r8)
   83038:	41400215 	stw	r5,8(r8)
   8303c:	8809883a 	mov	r4,r17
   83040:	2a000315 	stw	r8,12(r5)
   83044:	32000215 	stw	r8,8(r6)
   83048:	dfc00217 	ldw	ra,8(sp)
   8304c:	dc400117 	ldw	r17,4(sp)
   83050:	dc000017 	ldw	r16,0(sp)
   83054:	dec00304 	addi	sp,sp,12
   83058:	00846081 	jmpi	84608 <__malloc_unlock>
   8305c:	dfc00217 	ldw	ra,8(sp)
   83060:	dc400117 	ldw	r17,4(sp)
   83064:	dc000017 	ldw	r16,0(sp)
   83068:	dec00304 	addi	sp,sp,12
   8306c:	f800283a 	ret
   83070:	31000217 	ldw	r4,8(r6)
   83074:	003fbd06 	br	82f6c <_free_r+0x94>
   83078:	3806d0fa 	srli	r3,r7,3
   8307c:	00800044 	movi	r2,1
   83080:	51400117 	ldw	r5,4(r10)
   83084:	180890fa 	slli	r4,r3,3
   83088:	1807d0ba 	srai	r3,r3,2
   8308c:	22c9883a 	add	r4,r4,r11
   83090:	21800217 	ldw	r6,8(r4)
   83094:	10c4983a 	sll	r2,r2,r3
   83098:	41000315 	stw	r4,12(r8)
   8309c:	41800215 	stw	r6,8(r8)
   830a0:	288ab03a 	or	r5,r5,r2
   830a4:	22000215 	stw	r8,8(r4)
   830a8:	8809883a 	mov	r4,r17
   830ac:	51400115 	stw	r5,4(r10)
   830b0:	32000315 	stw	r8,12(r6)
   830b4:	dfc00217 	ldw	ra,8(sp)
   830b8:	dc400117 	ldw	r17,4(sp)
   830bc:	dc000017 	ldw	r16,0(sp)
   830c0:	dec00304 	addi	sp,sp,12
   830c4:	00846081 	jmpi	84608 <__malloc_unlock>
   830c8:	2880004c 	andi	r2,r5,1
   830cc:	3a4d883a 	add	r6,r7,r9
   830d0:	1000071e 	bne	r2,zero,830f0 <_free_r+0x218>
   830d4:	80bffe17 	ldw	r2,-8(r16)
   830d8:	4091c83a 	sub	r8,r8,r2
   830dc:	41000317 	ldw	r4,12(r8)
   830e0:	40c00217 	ldw	r3,8(r8)
   830e4:	308d883a 	add	r6,r6,r2
   830e8:	20c00215 	stw	r3,8(r4)
   830ec:	19000315 	stw	r4,12(r3)
   830f0:	00800234 	movhi	r2,8
   830f4:	109a1904 	addi	r2,r2,26724
   830f8:	11000017 	ldw	r4,0(r2)
   830fc:	30c00054 	ori	r3,r6,1
   83100:	52000215 	stw	r8,8(r10)
   83104:	40c00115 	stw	r3,4(r8)
   83108:	313fa036 	bltu	r6,r4,82f8c <_free_r+0xb4>
   8310c:	00800274 	movhi	r2,9
   83110:	10a1d804 	addi	r2,r2,-30880
   83114:	11400017 	ldw	r5,0(r2)
   83118:	8809883a 	mov	r4,r17
   8311c:	0082dac0 	call	82dac <_malloc_trim_r>
   83120:	003f9a06 	br	82f8c <_free_r+0xb4>
   83124:	00800104 	movi	r2,4
   83128:	10c0072e 	bgeu	r2,r3,83148 <_free_r+0x270>
   8312c:	00800504 	movi	r2,20
   83130:	10c01936 	bltu	r2,r3,83198 <_free_r+0x2c0>
   83134:	188016c4 	addi	r2,r3,91
   83138:	100690fa 	slli	r3,r2,3
   8313c:	003fb306 	br	8300c <_free_r+0x134>
   83140:	01400044 	movi	r5,1
   83144:	003f7e06 	br	82f40 <_free_r+0x68>
   83148:	3804d1ba 	srli	r2,r7,6
   8314c:	10800e04 	addi	r2,r2,56
   83150:	100690fa 	slli	r3,r2,3
   83154:	003fad06 	br	8300c <_free_r+0x134>
   83158:	22000315 	stw	r8,12(r4)
   8315c:	22000215 	stw	r8,8(r4)
   83160:	3a05883a 	add	r2,r7,r8
   83164:	38c00054 	ori	r3,r7,1
   83168:	11c00015 	stw	r7,0(r2)
   8316c:	41000215 	stw	r4,8(r8)
   83170:	40c00115 	stw	r3,4(r8)
   83174:	41000315 	stw	r4,12(r8)
   83178:	003f8406 	br	82f8c <_free_r+0xb4>
   8317c:	1005d0ba 	srai	r2,r2,2
   83180:	00c00044 	movi	r3,1
   83184:	51000117 	ldw	r4,4(r10)
   83188:	1886983a 	sll	r3,r3,r2
   8318c:	20c8b03a 	or	r4,r4,r3
   83190:	51000115 	stw	r4,4(r10)
   83194:	003fa706 	br	83034 <_free_r+0x15c>
   83198:	00801504 	movi	r2,84
   8319c:	10c00436 	bltu	r2,r3,831b0 <_free_r+0x2d8>
   831a0:	3804d33a 	srli	r2,r7,12
   831a4:	10801b84 	addi	r2,r2,110
   831a8:	100690fa 	slli	r3,r2,3
   831ac:	003f9706 	br	8300c <_free_r+0x134>
   831b0:	00805504 	movi	r2,340
   831b4:	10c00436 	bltu	r2,r3,831c8 <_free_r+0x2f0>
   831b8:	3804d3fa 	srli	r2,r7,15
   831bc:	10801dc4 	addi	r2,r2,119
   831c0:	100690fa 	slli	r3,r2,3
   831c4:	003f9106 	br	8300c <_free_r+0x134>
   831c8:	00815504 	movi	r2,1364
   831cc:	10c0032e 	bgeu	r2,r3,831dc <_free_r+0x304>
   831d0:	00801f84 	movi	r2,126
   831d4:	00c0fc04 	movi	r3,1008
   831d8:	003f8c06 	br	8300c <_free_r+0x134>
   831dc:	3804d4ba 	srli	r2,r7,18
   831e0:	10801f04 	addi	r2,r2,124
   831e4:	100690fa 	slli	r3,r2,3
   831e8:	003f8806 	br	8300c <_free_r+0x134>

000831ec <_fwalk_reent>:
   831ec:	defff704 	addi	sp,sp,-36
   831f0:	dcc00315 	stw	r19,12(sp)
   831f4:	24c0b804 	addi	r19,r4,736
   831f8:	dd800615 	stw	r22,24(sp)
   831fc:	dd400515 	stw	r21,20(sp)
   83200:	dfc00815 	stw	ra,32(sp)
   83204:	ddc00715 	stw	r23,28(sp)
   83208:	dd000415 	stw	r20,16(sp)
   8320c:	dc800215 	stw	r18,8(sp)
   83210:	dc400115 	stw	r17,4(sp)
   83214:	dc000015 	stw	r16,0(sp)
   83218:	202b883a 	mov	r21,r4
   8321c:	282d883a 	mov	r22,r5
   83220:	0082b440 	call	82b44 <__sfp_lock_acquire>
   83224:	98002126 	beq	r19,zero,832ac <_fwalk_reent+0xc0>
   83228:	002f883a 	mov	r23,zero
   8322c:	9c800117 	ldw	r18,4(r19)
   83230:	9c000217 	ldw	r16,8(r19)
   83234:	90bfffc4 	addi	r2,r18,-1
   83238:	10000d16 	blt	r2,zero,83270 <_fwalk_reent+0x84>
   8323c:	0023883a 	mov	r17,zero
   83240:	053fffc4 	movi	r20,-1
   83244:	8080030f 	ldh	r2,12(r16)
   83248:	8c400044 	addi	r17,r17,1
   8324c:	10000626 	beq	r2,zero,83268 <_fwalk_reent+0x7c>
   83250:	8080038f 	ldh	r2,14(r16)
   83254:	800b883a 	mov	r5,r16
   83258:	a809883a 	mov	r4,r21
   8325c:	15000226 	beq	r2,r20,83268 <_fwalk_reent+0x7c>
   83260:	b03ee83a 	callr	r22
   83264:	b8aeb03a 	or	r23,r23,r2
   83268:	84001704 	addi	r16,r16,92
   8326c:	947ff51e 	bne	r18,r17,83244 <_fwalk_reent+0x58>
   83270:	9cc00017 	ldw	r19,0(r19)
   83274:	983fed1e 	bne	r19,zero,8322c <_fwalk_reent+0x40>
   83278:	0082b480 	call	82b48 <__sfp_lock_release>
   8327c:	b805883a 	mov	r2,r23
   83280:	dfc00817 	ldw	ra,32(sp)
   83284:	ddc00717 	ldw	r23,28(sp)
   83288:	dd800617 	ldw	r22,24(sp)
   8328c:	dd400517 	ldw	r21,20(sp)
   83290:	dd000417 	ldw	r20,16(sp)
   83294:	dcc00317 	ldw	r19,12(sp)
   83298:	dc800217 	ldw	r18,8(sp)
   8329c:	dc400117 	ldw	r17,4(sp)
   832a0:	dc000017 	ldw	r16,0(sp)
   832a4:	dec00904 	addi	sp,sp,36
   832a8:	f800283a 	ret
   832ac:	002f883a 	mov	r23,zero
   832b0:	003ff106 	br	83278 <_fwalk_reent+0x8c>

000832b4 <_fwalk>:
   832b4:	defff804 	addi	sp,sp,-32
   832b8:	dcc00315 	stw	r19,12(sp)
   832bc:	24c0b804 	addi	r19,r4,736
   832c0:	dd400515 	stw	r21,20(sp)
   832c4:	dfc00715 	stw	ra,28(sp)
   832c8:	dd800615 	stw	r22,24(sp)
   832cc:	dd000415 	stw	r20,16(sp)
   832d0:	dc800215 	stw	r18,8(sp)
   832d4:	dc400115 	stw	r17,4(sp)
   832d8:	dc000015 	stw	r16,0(sp)
   832dc:	282b883a 	mov	r21,r5
   832e0:	0082b440 	call	82b44 <__sfp_lock_acquire>
   832e4:	98001f26 	beq	r19,zero,83364 <_fwalk+0xb0>
   832e8:	002d883a 	mov	r22,zero
   832ec:	9c800117 	ldw	r18,4(r19)
   832f0:	9c000217 	ldw	r16,8(r19)
   832f4:	90bfffc4 	addi	r2,r18,-1
   832f8:	10000c16 	blt	r2,zero,8332c <_fwalk+0x78>
   832fc:	0023883a 	mov	r17,zero
   83300:	053fffc4 	movi	r20,-1
   83304:	8080030f 	ldh	r2,12(r16)
   83308:	8c400044 	addi	r17,r17,1
   8330c:	10000526 	beq	r2,zero,83324 <_fwalk+0x70>
   83310:	8080038f 	ldh	r2,14(r16)
   83314:	8009883a 	mov	r4,r16
   83318:	15000226 	beq	r2,r20,83324 <_fwalk+0x70>
   8331c:	a83ee83a 	callr	r21
   83320:	b0acb03a 	or	r22,r22,r2
   83324:	84001704 	addi	r16,r16,92
   83328:	947ff61e 	bne	r18,r17,83304 <_fwalk+0x50>
   8332c:	9cc00017 	ldw	r19,0(r19)
   83330:	983fee1e 	bne	r19,zero,832ec <_fwalk+0x38>
   83334:	0082b480 	call	82b48 <__sfp_lock_release>
   83338:	b005883a 	mov	r2,r22
   8333c:	dfc00717 	ldw	ra,28(sp)
   83340:	dd800617 	ldw	r22,24(sp)
   83344:	dd400517 	ldw	r21,20(sp)
   83348:	dd000417 	ldw	r20,16(sp)
   8334c:	dcc00317 	ldw	r19,12(sp)
   83350:	dc800217 	ldw	r18,8(sp)
   83354:	dc400117 	ldw	r17,4(sp)
   83358:	dc000017 	ldw	r16,0(sp)
   8335c:	dec00804 	addi	sp,sp,32
   83360:	f800283a 	ret
   83364:	002d883a 	mov	r22,zero
   83368:	003ff206 	br	83334 <_fwalk+0x80>

0008336c <__smakebuf_r>:
   8336c:	2880030b 	ldhu	r2,12(r5)
   83370:	deffed04 	addi	sp,sp,-76
   83374:	dc401015 	stw	r17,64(sp)
   83378:	1080008c 	andi	r2,r2,2
   8337c:	dc000f15 	stw	r16,60(sp)
   83380:	dfc01215 	stw	ra,72(sp)
   83384:	dc801115 	stw	r18,68(sp)
   83388:	2821883a 	mov	r16,r5
   8338c:	2023883a 	mov	r17,r4
   83390:	10000b26 	beq	r2,zero,833c0 <__smakebuf_r+0x54>
   83394:	28c010c4 	addi	r3,r5,67
   83398:	00800044 	movi	r2,1
   8339c:	28800515 	stw	r2,20(r5)
   833a0:	28c00415 	stw	r3,16(r5)
   833a4:	28c00015 	stw	r3,0(r5)
   833a8:	dfc01217 	ldw	ra,72(sp)
   833ac:	dc801117 	ldw	r18,68(sp)
   833b0:	dc401017 	ldw	r17,64(sp)
   833b4:	dc000f17 	ldw	r16,60(sp)
   833b8:	dec01304 	addi	sp,sp,76
   833bc:	f800283a 	ret
   833c0:	2940038f 	ldh	r5,14(r5)
   833c4:	28002116 	blt	r5,zero,8344c <__smakebuf_r+0xe0>
   833c8:	d80d883a 	mov	r6,sp
   833cc:	00842800 	call	84280 <_fstat_r>
   833d0:	10001e16 	blt	r2,zero,8344c <__smakebuf_r+0xe0>
   833d4:	d8800117 	ldw	r2,4(sp)
   833d8:	00e00014 	movui	r3,32768
   833dc:	113c000c 	andi	r4,r2,61440
   833e0:	20c03126 	beq	r4,r3,834a8 <__smakebuf_r+0x13c>
   833e4:	8080030b 	ldhu	r2,12(r16)
   833e8:	00c80004 	movi	r3,8192
   833ec:	10820014 	ori	r2,r2,2048
   833f0:	8080030d 	sth	r2,12(r16)
   833f4:	20c01e26 	beq	r4,r3,83470 <__smakebuf_r+0x104>
   833f8:	04810004 	movi	r18,1024
   833fc:	8809883a 	mov	r4,r17
   83400:	900b883a 	mov	r5,r18
   83404:	00835000 	call	83500 <_malloc_r>
   83408:	1009883a 	mov	r4,r2
   8340c:	10003126 	beq	r2,zero,834d4 <__smakebuf_r+0x168>
   83410:	80c0030b 	ldhu	r3,12(r16)
   83414:	00800234 	movhi	r2,8
   83418:	108b0e04 	addi	r2,r2,11320
   8341c:	88800f15 	stw	r2,60(r17)
   83420:	18c02014 	ori	r3,r3,128
   83424:	84800515 	stw	r18,20(r16)
   83428:	80c0030d 	sth	r3,12(r16)
   8342c:	81000415 	stw	r4,16(r16)
   83430:	81000015 	stw	r4,0(r16)
   83434:	dfc01217 	ldw	ra,72(sp)
   83438:	dc801117 	ldw	r18,68(sp)
   8343c:	dc401017 	ldw	r17,64(sp)
   83440:	dc000f17 	ldw	r16,60(sp)
   83444:	dec01304 	addi	sp,sp,76
   83448:	f800283a 	ret
   8344c:	80c0030b 	ldhu	r3,12(r16)
   83450:	1880200c 	andi	r2,r3,128
   83454:	10000426 	beq	r2,zero,83468 <__smakebuf_r+0xfc>
   83458:	04801004 	movi	r18,64
   8345c:	18820014 	ori	r2,r3,2048
   83460:	8080030d 	sth	r2,12(r16)
   83464:	003fe506 	br	833fc <__smakebuf_r+0x90>
   83468:	04810004 	movi	r18,1024
   8346c:	003ffb06 	br	8345c <__smakebuf_r+0xf0>
   83470:	8140038f 	ldh	r5,14(r16)
   83474:	8809883a 	mov	r4,r17
   83478:	00842f40 	call	842f4 <_isatty_r>
   8347c:	103fde26 	beq	r2,zero,833f8 <__smakebuf_r+0x8c>
   83480:	8080030b 	ldhu	r2,12(r16)
   83484:	80c010c4 	addi	r3,r16,67
   83488:	04810004 	movi	r18,1024
   8348c:	10800054 	ori	r2,r2,1
   83490:	8080030d 	sth	r2,12(r16)
   83494:	00800044 	movi	r2,1
   83498:	80c00415 	stw	r3,16(r16)
   8349c:	80800515 	stw	r2,20(r16)
   834a0:	80c00015 	stw	r3,0(r16)
   834a4:	003fd506 	br	833fc <__smakebuf_r+0x90>
   834a8:	80c00a17 	ldw	r3,40(r16)
   834ac:	00800234 	movhi	r2,8
   834b0:	108fcc04 	addi	r2,r2,16176
   834b4:	18bfcb1e 	bne	r3,r2,833e4 <__smakebuf_r+0x78>
   834b8:	8080030b 	ldhu	r2,12(r16)
   834bc:	00c10004 	movi	r3,1024
   834c0:	1825883a 	mov	r18,r3
   834c4:	10c4b03a 	or	r2,r2,r3
   834c8:	8080030d 	sth	r2,12(r16)
   834cc:	80c01315 	stw	r3,76(r16)
   834d0:	003fca06 	br	833fc <__smakebuf_r+0x90>
   834d4:	8100030b 	ldhu	r4,12(r16)
   834d8:	2080800c 	andi	r2,r4,512
   834dc:	103fb21e 	bne	r2,zero,833a8 <__smakebuf_r+0x3c>
   834e0:	80c010c4 	addi	r3,r16,67
   834e4:	21000094 	ori	r4,r4,2
   834e8:	00800044 	movi	r2,1
   834ec:	80800515 	stw	r2,20(r16)
   834f0:	8100030d 	sth	r4,12(r16)
   834f4:	80c00415 	stw	r3,16(r16)
   834f8:	80c00015 	stw	r3,0(r16)
   834fc:	003faa06 	br	833a8 <__smakebuf_r+0x3c>

00083500 <_malloc_r>:
   83500:	defff604 	addi	sp,sp,-40
   83504:	28c002c4 	addi	r3,r5,11
   83508:	00800584 	movi	r2,22
   8350c:	dc800215 	stw	r18,8(sp)
   83510:	dfc00915 	stw	ra,36(sp)
   83514:	df000815 	stw	fp,32(sp)
   83518:	ddc00715 	stw	r23,28(sp)
   8351c:	dd800615 	stw	r22,24(sp)
   83520:	dd400515 	stw	r21,20(sp)
   83524:	dd000415 	stw	r20,16(sp)
   83528:	dcc00315 	stw	r19,12(sp)
   8352c:	dc400115 	stw	r17,4(sp)
   83530:	dc000015 	stw	r16,0(sp)
   83534:	2025883a 	mov	r18,r4
   83538:	10c01236 	bltu	r2,r3,83584 <_malloc_r+0x84>
   8353c:	04400404 	movi	r17,16
   83540:	8940142e 	bgeu	r17,r5,83594 <_malloc_r+0x94>
   83544:	00800304 	movi	r2,12
   83548:	0007883a 	mov	r3,zero
   8354c:	90800015 	stw	r2,0(r18)
   83550:	1805883a 	mov	r2,r3
   83554:	dfc00917 	ldw	ra,36(sp)
   83558:	df000817 	ldw	fp,32(sp)
   8355c:	ddc00717 	ldw	r23,28(sp)
   83560:	dd800617 	ldw	r22,24(sp)
   83564:	dd400517 	ldw	r21,20(sp)
   83568:	dd000417 	ldw	r20,16(sp)
   8356c:	dcc00317 	ldw	r19,12(sp)
   83570:	dc800217 	ldw	r18,8(sp)
   83574:	dc400117 	ldw	r17,4(sp)
   83578:	dc000017 	ldw	r16,0(sp)
   8357c:	dec00a04 	addi	sp,sp,40
   83580:	f800283a 	ret
   83584:	00bffe04 	movi	r2,-8
   83588:	18a2703a 	and	r17,r3,r2
   8358c:	883fed16 	blt	r17,zero,83544 <_malloc_r+0x44>
   83590:	897fec36 	bltu	r17,r5,83544 <_malloc_r+0x44>
   83594:	9009883a 	mov	r4,r18
   83598:	00846040 	call	84604 <__malloc_lock>
   8359c:	00807dc4 	movi	r2,503
   835a0:	14402b2e 	bgeu	r2,r17,83650 <_malloc_r+0x150>
   835a4:	8806d27a 	srli	r3,r17,9
   835a8:	18003f1e 	bne	r3,zero,836a8 <_malloc_r+0x1a8>
   835ac:	880cd0fa 	srli	r6,r17,3
   835b0:	300490fa 	slli	r2,r6,3
   835b4:	02c00234 	movhi	r11,8
   835b8:	5ad90804 	addi	r11,r11,25632
   835bc:	12cb883a 	add	r5,r2,r11
   835c0:	2c000317 	ldw	r16,12(r5)
   835c4:	580f883a 	mov	r7,r11
   835c8:	2c00041e 	bne	r5,r16,835dc <_malloc_r+0xdc>
   835cc:	00000a06 	br	835f8 <_malloc_r+0xf8>
   835d0:	1800860e 	bge	r3,zero,837ec <_malloc_r+0x2ec>
   835d4:	84000317 	ldw	r16,12(r16)
   835d8:	2c000726 	beq	r5,r16,835f8 <_malloc_r+0xf8>
   835dc:	80800117 	ldw	r2,4(r16)
   835e0:	00ffff04 	movi	r3,-4
   835e4:	10c8703a 	and	r4,r2,r3
   835e8:	2447c83a 	sub	r3,r4,r17
   835ec:	008003c4 	movi	r2,15
   835f0:	10fff70e 	bge	r2,r3,835d0 <_malloc_r+0xd0>
   835f4:	31bfffc4 	addi	r6,r6,-1
   835f8:	32400044 	addi	r9,r6,1
   835fc:	02800234 	movhi	r10,8
   83600:	52990a04 	addi	r10,r10,25640
   83604:	54000217 	ldw	r16,8(r10)
   83608:	8280a026 	beq	r16,r10,8388c <_malloc_r+0x38c>
   8360c:	80800117 	ldw	r2,4(r16)
   83610:	00ffff04 	movi	r3,-4
   83614:	10ca703a 	and	r5,r2,r3
   83618:	2c4dc83a 	sub	r6,r5,r17
   8361c:	008003c4 	movi	r2,15
   83620:	11808316 	blt	r2,r6,83830 <_malloc_r+0x330>
   83624:	52800315 	stw	r10,12(r10)
   83628:	52800215 	stw	r10,8(r10)
   8362c:	30002916 	blt	r6,zero,836d4 <_malloc_r+0x1d4>
   83630:	8147883a 	add	r3,r16,r5
   83634:	18800117 	ldw	r2,4(r3)
   83638:	9009883a 	mov	r4,r18
   8363c:	10800054 	ori	r2,r2,1
   83640:	18800115 	stw	r2,4(r3)
   83644:	00846080 	call	84608 <__malloc_unlock>
   83648:	80c00204 	addi	r3,r16,8
   8364c:	003fc006 	br	83550 <_malloc_r+0x50>
   83650:	02c00234 	movhi	r11,8
   83654:	5ad90804 	addi	r11,r11,25632
   83658:	8ac5883a 	add	r2,r17,r11
   8365c:	14000317 	ldw	r16,12(r2)
   83660:	580f883a 	mov	r7,r11
   83664:	8806d0fa 	srli	r3,r17,3
   83668:	14006c26 	beq	r2,r16,8381c <_malloc_r+0x31c>
   8366c:	80c00117 	ldw	r3,4(r16)
   83670:	00bfff04 	movi	r2,-4
   83674:	81800317 	ldw	r6,12(r16)
   83678:	1886703a 	and	r3,r3,r2
   8367c:	80c7883a 	add	r3,r16,r3
   83680:	18800117 	ldw	r2,4(r3)
   83684:	81400217 	ldw	r5,8(r16)
   83688:	9009883a 	mov	r4,r18
   8368c:	10800054 	ori	r2,r2,1
   83690:	18800115 	stw	r2,4(r3)
   83694:	31400215 	stw	r5,8(r6)
   83698:	29800315 	stw	r6,12(r5)
   8369c:	00846080 	call	84608 <__malloc_unlock>
   836a0:	80c00204 	addi	r3,r16,8
   836a4:	003faa06 	br	83550 <_malloc_r+0x50>
   836a8:	00800104 	movi	r2,4
   836ac:	10c0052e 	bgeu	r2,r3,836c4 <_malloc_r+0x1c4>
   836b0:	00800504 	movi	r2,20
   836b4:	10c07836 	bltu	r2,r3,83898 <_malloc_r+0x398>
   836b8:	198016c4 	addi	r6,r3,91
   836bc:	300490fa 	slli	r2,r6,3
   836c0:	003fbc06 	br	835b4 <_malloc_r+0xb4>
   836c4:	8804d1ba 	srli	r2,r17,6
   836c8:	11800e04 	addi	r6,r2,56
   836cc:	300490fa 	slli	r2,r6,3
   836d0:	003fb806 	br	835b4 <_malloc_r+0xb4>
   836d4:	00807fc4 	movi	r2,511
   836d8:	1140bb36 	bltu	r2,r5,839c8 <_malloc_r+0x4c8>
   836dc:	2806d0fa 	srli	r3,r5,3
   836e0:	573ffe04 	addi	fp,r10,-8
   836e4:	00800044 	movi	r2,1
   836e8:	180890fa 	slli	r4,r3,3
   836ec:	1807d0ba 	srai	r3,r3,2
   836f0:	e1c00117 	ldw	r7,4(fp)
   836f4:	5909883a 	add	r4,r11,r4
   836f8:	21400217 	ldw	r5,8(r4)
   836fc:	10c4983a 	sll	r2,r2,r3
   83700:	81000315 	stw	r4,12(r16)
   83704:	81400215 	stw	r5,8(r16)
   83708:	388eb03a 	or	r7,r7,r2
   8370c:	2c000315 	stw	r16,12(r5)
   83710:	24000215 	stw	r16,8(r4)
   83714:	e1c00115 	stw	r7,4(fp)
   83718:	4807883a 	mov	r3,r9
   8371c:	4800cd16 	blt	r9,zero,83a54 <_malloc_r+0x554>
   83720:	1807d0ba 	srai	r3,r3,2
   83724:	00800044 	movi	r2,1
   83728:	10c8983a 	sll	r4,r2,r3
   8372c:	39004436 	bltu	r7,r4,83840 <_malloc_r+0x340>
   83730:	21c4703a 	and	r2,r4,r7
   83734:	10000a1e 	bne	r2,zero,83760 <_malloc_r+0x260>
   83738:	2109883a 	add	r4,r4,r4
   8373c:	00bfff04 	movi	r2,-4
   83740:	4884703a 	and	r2,r9,r2
   83744:	3906703a 	and	r3,r7,r4
   83748:	12400104 	addi	r9,r2,4
   8374c:	1800041e 	bne	r3,zero,83760 <_malloc_r+0x260>
   83750:	2109883a 	add	r4,r4,r4
   83754:	3904703a 	and	r2,r7,r4
   83758:	4a400104 	addi	r9,r9,4
   8375c:	103ffc26 	beq	r2,zero,83750 <_malloc_r+0x250>
   83760:	480490fa 	slli	r2,r9,3
   83764:	4819883a 	mov	r12,r9
   83768:	023fff04 	movi	r8,-4
   8376c:	589b883a 	add	r13,r11,r2
   83770:	6807883a 	mov	r3,r13
   83774:	014003c4 	movi	r5,15
   83778:	1c000317 	ldw	r16,12(r3)
   8377c:	1c00041e 	bne	r3,r16,83790 <_malloc_r+0x290>
   83780:	0000a706 	br	83a20 <_malloc_r+0x520>
   83784:	3000ab0e 	bge	r6,zero,83a34 <_malloc_r+0x534>
   83788:	84000317 	ldw	r16,12(r16)
   8378c:	1c00a426 	beq	r3,r16,83a20 <_malloc_r+0x520>
   83790:	80800117 	ldw	r2,4(r16)
   83794:	1204703a 	and	r2,r2,r8
   83798:	144dc83a 	sub	r6,r2,r17
   8379c:	29bff90e 	bge	r5,r6,83784 <_malloc_r+0x284>
   837a0:	81000317 	ldw	r4,12(r16)
   837a4:	80c00217 	ldw	r3,8(r16)
   837a8:	89400054 	ori	r5,r17,1
   837ac:	8445883a 	add	r2,r16,r17
   837b0:	20c00215 	stw	r3,8(r4)
   837b4:	19000315 	stw	r4,12(r3)
   837b8:	81400115 	stw	r5,4(r16)
   837bc:	1187883a 	add	r3,r2,r6
   837c0:	31000054 	ori	r4,r6,1
   837c4:	50800315 	stw	r2,12(r10)
   837c8:	50800215 	stw	r2,8(r10)
   837cc:	19800015 	stw	r6,0(r3)
   837d0:	11000115 	stw	r4,4(r2)
   837d4:	12800215 	stw	r10,8(r2)
   837d8:	12800315 	stw	r10,12(r2)
   837dc:	9009883a 	mov	r4,r18
   837e0:	00846080 	call	84608 <__malloc_unlock>
   837e4:	80c00204 	addi	r3,r16,8
   837e8:	003f5906 	br	83550 <_malloc_r+0x50>
   837ec:	8109883a 	add	r4,r16,r4
   837f0:	20800117 	ldw	r2,4(r4)
   837f4:	80c00217 	ldw	r3,8(r16)
   837f8:	81400317 	ldw	r5,12(r16)
   837fc:	10800054 	ori	r2,r2,1
   83800:	20800115 	stw	r2,4(r4)
   83804:	28c00215 	stw	r3,8(r5)
   83808:	19400315 	stw	r5,12(r3)
   8380c:	9009883a 	mov	r4,r18
   83810:	00846080 	call	84608 <__malloc_unlock>
   83814:	80c00204 	addi	r3,r16,8
   83818:	003f4d06 	br	83550 <_malloc_r+0x50>
   8381c:	80800204 	addi	r2,r16,8
   83820:	14000317 	ldw	r16,12(r2)
   83824:	143f911e 	bne	r2,r16,8366c <_malloc_r+0x16c>
   83828:	1a400084 	addi	r9,r3,2
   8382c:	003f7306 	br	835fc <_malloc_r+0xfc>
   83830:	88c00054 	ori	r3,r17,1
   83834:	8445883a 	add	r2,r16,r17
   83838:	80c00115 	stw	r3,4(r16)
   8383c:	003fdf06 	br	837bc <_malloc_r+0x2bc>
   83840:	e4000217 	ldw	r16,8(fp)
   83844:	00bfff04 	movi	r2,-4
   83848:	80c00117 	ldw	r3,4(r16)
   8384c:	802d883a 	mov	r22,r16
   83850:	18aa703a 	and	r21,r3,r2
   83854:	ac401636 	bltu	r21,r17,838b0 <_malloc_r+0x3b0>
   83858:	ac49c83a 	sub	r4,r21,r17
   8385c:	008003c4 	movi	r2,15
   83860:	1100130e 	bge	r2,r4,838b0 <_malloc_r+0x3b0>
   83864:	88800054 	ori	r2,r17,1
   83868:	8447883a 	add	r3,r16,r17
   8386c:	80800115 	stw	r2,4(r16)
   83870:	20800054 	ori	r2,r4,1
   83874:	18800115 	stw	r2,4(r3)
   83878:	e0c00215 	stw	r3,8(fp)
   8387c:	9009883a 	mov	r4,r18
   83880:	00846080 	call	84608 <__malloc_unlock>
   83884:	80c00204 	addi	r3,r16,8
   83888:	003f3106 	br	83550 <_malloc_r+0x50>
   8388c:	39c00117 	ldw	r7,4(r7)
   83890:	573ffe04 	addi	fp,r10,-8
   83894:	003fa006 	br	83718 <_malloc_r+0x218>
   83898:	00801504 	movi	r2,84
   8389c:	10c06736 	bltu	r2,r3,83a3c <_malloc_r+0x53c>
   838a0:	8804d33a 	srli	r2,r17,12
   838a4:	11801b84 	addi	r6,r2,110
   838a8:	300490fa 	slli	r2,r6,3
   838ac:	003f4106 	br	835b4 <_malloc_r+0xb4>
   838b0:	d0a7ce17 	ldw	r2,-24776(gp)
   838b4:	d0e01017 	ldw	r3,-32704(gp)
   838b8:	053fffc4 	movi	r20,-1
   838bc:	10800404 	addi	r2,r2,16
   838c0:	88a7883a 	add	r19,r17,r2
   838c4:	1d000326 	beq	r3,r20,838d4 <_malloc_r+0x3d4>
   838c8:	98c3ffc4 	addi	r3,r19,4095
   838cc:	00bc0004 	movi	r2,-4096
   838d0:	18a6703a 	and	r19,r3,r2
   838d4:	9009883a 	mov	r4,r18
   838d8:	980b883a 	mov	r5,r19
   838dc:	0083eb80 	call	83eb8 <_sbrk_r>
   838e0:	1009883a 	mov	r4,r2
   838e4:	15000426 	beq	r2,r20,838f8 <_malloc_r+0x3f8>
   838e8:	854b883a 	add	r5,r16,r21
   838ec:	1029883a 	mov	r20,r2
   838f0:	11405a2e 	bgeu	r2,r5,83a5c <_malloc_r+0x55c>
   838f4:	87000c26 	beq	r16,fp,83928 <_malloc_r+0x428>
   838f8:	e4000217 	ldw	r16,8(fp)
   838fc:	80c00117 	ldw	r3,4(r16)
   83900:	00bfff04 	movi	r2,-4
   83904:	1884703a 	and	r2,r3,r2
   83908:	14400336 	bltu	r2,r17,83918 <_malloc_r+0x418>
   8390c:	1449c83a 	sub	r4,r2,r17
   83910:	008003c4 	movi	r2,15
   83914:	113fd316 	blt	r2,r4,83864 <_malloc_r+0x364>
   83918:	9009883a 	mov	r4,r18
   8391c:	00846080 	call	84608 <__malloc_unlock>
   83920:	0007883a 	mov	r3,zero
   83924:	003f0a06 	br	83550 <_malloc_r+0x50>
   83928:	05c00274 	movhi	r23,9
   8392c:	bde2db04 	addi	r23,r23,-29844
   83930:	b8800017 	ldw	r2,0(r23)
   83934:	988d883a 	add	r6,r19,r2
   83938:	b9800015 	stw	r6,0(r23)
   8393c:	d0e01017 	ldw	r3,-32704(gp)
   83940:	00bfffc4 	movi	r2,-1
   83944:	18808e26 	beq	r3,r2,83b80 <_malloc_r+0x680>
   83948:	2145c83a 	sub	r2,r4,r5
   8394c:	3085883a 	add	r2,r6,r2
   83950:	b8800015 	stw	r2,0(r23)
   83954:	20c001cc 	andi	r3,r4,7
   83958:	18005f1e 	bne	r3,zero,83ad8 <_malloc_r+0x5d8>
   8395c:	000b883a 	mov	r5,zero
   83960:	a4c5883a 	add	r2,r20,r19
   83964:	1083ffcc 	andi	r2,r2,4095
   83968:	00c40004 	movi	r3,4096
   8396c:	1887c83a 	sub	r3,r3,r2
   83970:	28e7883a 	add	r19,r5,r3
   83974:	9009883a 	mov	r4,r18
   83978:	980b883a 	mov	r5,r19
   8397c:	0083eb80 	call	83eb8 <_sbrk_r>
   83980:	1007883a 	mov	r3,r2
   83984:	00bfffc4 	movi	r2,-1
   83988:	18807a26 	beq	r3,r2,83b74 <_malloc_r+0x674>
   8398c:	1d05c83a 	sub	r2,r3,r20
   83990:	9885883a 	add	r2,r19,r2
   83994:	10c00054 	ori	r3,r2,1
   83998:	b8800017 	ldw	r2,0(r23)
   8399c:	a021883a 	mov	r16,r20
   839a0:	a0c00115 	stw	r3,4(r20)
   839a4:	9885883a 	add	r2,r19,r2
   839a8:	b8800015 	stw	r2,0(r23)
   839ac:	e5000215 	stw	r20,8(fp)
   839b0:	b7003626 	beq	r22,fp,83a8c <_malloc_r+0x58c>
   839b4:	018003c4 	movi	r6,15
   839b8:	35404b36 	bltu	r6,r21,83ae8 <_malloc_r+0x5e8>
   839bc:	00800044 	movi	r2,1
   839c0:	a0800115 	stw	r2,4(r20)
   839c4:	003fcd06 	br	838fc <_malloc_r+0x3fc>
   839c8:	2808d27a 	srli	r4,r5,9
   839cc:	2000371e 	bne	r4,zero,83aac <_malloc_r+0x5ac>
   839d0:	2808d0fa 	srli	r4,r5,3
   839d4:	200690fa 	slli	r3,r4,3
   839d8:	1ad1883a 	add	r8,r3,r11
   839dc:	41800217 	ldw	r6,8(r8)
   839e0:	41805b26 	beq	r8,r6,83b50 <_malloc_r+0x650>
   839e4:	30800117 	ldw	r2,4(r6)
   839e8:	00ffff04 	movi	r3,-4
   839ec:	10c4703a 	and	r2,r2,r3
   839f0:	2880022e 	bgeu	r5,r2,839fc <_malloc_r+0x4fc>
   839f4:	31800217 	ldw	r6,8(r6)
   839f8:	41bffa1e 	bne	r8,r6,839e4 <_malloc_r+0x4e4>
   839fc:	32000317 	ldw	r8,12(r6)
   83a00:	39c00117 	ldw	r7,4(r7)
   83a04:	82000315 	stw	r8,12(r16)
   83a08:	81800215 	stw	r6,8(r16)
   83a0c:	07000234 	movhi	fp,8
   83a10:	e7190804 	addi	fp,fp,25632
   83a14:	34000315 	stw	r16,12(r6)
   83a18:	44000215 	stw	r16,8(r8)
   83a1c:	003f3e06 	br	83718 <_malloc_r+0x218>
   83a20:	63000044 	addi	r12,r12,1
   83a24:	608000cc 	andi	r2,r12,3
   83a28:	10005d26 	beq	r2,zero,83ba0 <_malloc_r+0x6a0>
   83a2c:	18c00204 	addi	r3,r3,8
   83a30:	003f5106 	br	83778 <_malloc_r+0x278>
   83a34:	8089883a 	add	r4,r16,r2
   83a38:	003f6d06 	br	837f0 <_malloc_r+0x2f0>
   83a3c:	00805504 	movi	r2,340
   83a40:	10c02036 	bltu	r2,r3,83ac4 <_malloc_r+0x5c4>
   83a44:	8804d3fa 	srli	r2,r17,15
   83a48:	11801dc4 	addi	r6,r2,119
   83a4c:	300490fa 	slli	r2,r6,3
   83a50:	003ed806 	br	835b4 <_malloc_r+0xb4>
   83a54:	48c000c4 	addi	r3,r9,3
   83a58:	003f3106 	br	83720 <_malloc_r+0x220>
   83a5c:	05c00274 	movhi	r23,9
   83a60:	bde2db04 	addi	r23,r23,-29844
   83a64:	b8800017 	ldw	r2,0(r23)
   83a68:	988d883a 	add	r6,r19,r2
   83a6c:	b9800015 	stw	r6,0(r23)
   83a70:	293fb21e 	bne	r5,r4,8393c <_malloc_r+0x43c>
   83a74:	2083ffcc 	andi	r2,r4,4095
   83a78:	103fb01e 	bne	r2,zero,8393c <_malloc_r+0x43c>
   83a7c:	e4000217 	ldw	r16,8(fp)
   83a80:	9d45883a 	add	r2,r19,r21
   83a84:	10800054 	ori	r2,r2,1
   83a88:	80800115 	stw	r2,4(r16)
   83a8c:	b8c00017 	ldw	r3,0(r23)
   83a90:	d0a7cf17 	ldw	r2,-24772(gp)
   83a94:	10c0012e 	bgeu	r2,r3,83a9c <_malloc_r+0x59c>
   83a98:	d0e7cf15 	stw	r3,-24772(gp)
   83a9c:	d0a7d017 	ldw	r2,-24768(gp)
   83aa0:	10ff962e 	bgeu	r2,r3,838fc <_malloc_r+0x3fc>
   83aa4:	d0e7d015 	stw	r3,-24768(gp)
   83aa8:	003f9406 	br	838fc <_malloc_r+0x3fc>
   83aac:	00800104 	movi	r2,4
   83ab0:	11001e36 	bltu	r2,r4,83b2c <_malloc_r+0x62c>
   83ab4:	2804d1ba 	srli	r2,r5,6
   83ab8:	11000e04 	addi	r4,r2,56
   83abc:	200690fa 	slli	r3,r4,3
   83ac0:	003fc506 	br	839d8 <_malloc_r+0x4d8>
   83ac4:	00815504 	movi	r2,1364
   83ac8:	10c01d2e 	bgeu	r2,r3,83b40 <_malloc_r+0x640>
   83acc:	01801f84 	movi	r6,126
   83ad0:	0080fc04 	movi	r2,1008
   83ad4:	003eb706 	br	835b4 <_malloc_r+0xb4>
   83ad8:	00800204 	movi	r2,8
   83adc:	10cbc83a 	sub	r5,r2,r3
   83ae0:	2169883a 	add	r20,r4,r5
   83ae4:	003f9e06 	br	83960 <_malloc_r+0x460>
   83ae8:	00bffe04 	movi	r2,-8
   83aec:	a93ffd04 	addi	r4,r21,-12
   83af0:	2088703a 	and	r4,r4,r2
   83af4:	b10b883a 	add	r5,r22,r4
   83af8:	00c00144 	movi	r3,5
   83afc:	28c00215 	stw	r3,8(r5)
   83b00:	28c00115 	stw	r3,4(r5)
   83b04:	b0800117 	ldw	r2,4(r22)
   83b08:	1080004c 	andi	r2,r2,1
   83b0c:	2084b03a 	or	r2,r4,r2
   83b10:	b0800115 	stw	r2,4(r22)
   83b14:	313fdd2e 	bgeu	r6,r4,83a8c <_malloc_r+0x58c>
   83b18:	b1400204 	addi	r5,r22,8
   83b1c:	9009883a 	mov	r4,r18
   83b20:	0082ed80 	call	82ed8 <_free_r>
   83b24:	e4000217 	ldw	r16,8(fp)
   83b28:	003fd806 	br	83a8c <_malloc_r+0x58c>
   83b2c:	00800504 	movi	r2,20
   83b30:	11001536 	bltu	r2,r4,83b88 <_malloc_r+0x688>
   83b34:	210016c4 	addi	r4,r4,91
   83b38:	200690fa 	slli	r3,r4,3
   83b3c:	003fa606 	br	839d8 <_malloc_r+0x4d8>
   83b40:	8804d4ba 	srli	r2,r17,18
   83b44:	11801f04 	addi	r6,r2,124
   83b48:	300490fa 	slli	r2,r6,3
   83b4c:	003e9906 	br	835b4 <_malloc_r+0xb4>
   83b50:	2009d0ba 	srai	r4,r4,2
   83b54:	01400234 	movhi	r5,8
   83b58:	29590804 	addi	r5,r5,25632
   83b5c:	00c00044 	movi	r3,1
   83b60:	28800117 	ldw	r2,4(r5)
   83b64:	1906983a 	sll	r3,r3,r4
   83b68:	10c4b03a 	or	r2,r2,r3
   83b6c:	28800115 	stw	r2,4(r5)
   83b70:	003fa306 	br	83a00 <_malloc_r+0x500>
   83b74:	0027883a 	mov	r19,zero
   83b78:	00c00044 	movi	r3,1
   83b7c:	003f8606 	br	83998 <_malloc_r+0x498>
   83b80:	d1201015 	stw	r4,-32704(gp)
   83b84:	003f7306 	br	83954 <_malloc_r+0x454>
   83b88:	00801504 	movi	r2,84
   83b8c:	11001936 	bltu	r2,r4,83bf4 <_malloc_r+0x6f4>
   83b90:	2804d33a 	srli	r2,r5,12
   83b94:	11001b84 	addi	r4,r2,110
   83b98:	200690fa 	slli	r3,r4,3
   83b9c:	003f8e06 	br	839d8 <_malloc_r+0x4d8>
   83ba0:	480b883a 	mov	r5,r9
   83ba4:	6807883a 	mov	r3,r13
   83ba8:	288000cc 	andi	r2,r5,3
   83bac:	18fffe04 	addi	r3,r3,-8
   83bb0:	297fffc4 	addi	r5,r5,-1
   83bb4:	10001526 	beq	r2,zero,83c0c <_malloc_r+0x70c>
   83bb8:	18800217 	ldw	r2,8(r3)
   83bbc:	10fffa26 	beq	r2,r3,83ba8 <_malloc_r+0x6a8>
   83bc0:	2109883a 	add	r4,r4,r4
   83bc4:	393f1e36 	bltu	r7,r4,83840 <_malloc_r+0x340>
   83bc8:	203f1d26 	beq	r4,zero,83840 <_malloc_r+0x340>
   83bcc:	21c4703a 	and	r2,r4,r7
   83bd0:	10000226 	beq	r2,zero,83bdc <_malloc_r+0x6dc>
   83bd4:	6013883a 	mov	r9,r12
   83bd8:	003ee106 	br	83760 <_malloc_r+0x260>
   83bdc:	2109883a 	add	r4,r4,r4
   83be0:	3904703a 	and	r2,r7,r4
   83be4:	63000104 	addi	r12,r12,4
   83be8:	103ffc26 	beq	r2,zero,83bdc <_malloc_r+0x6dc>
   83bec:	6013883a 	mov	r9,r12
   83bf0:	003edb06 	br	83760 <_malloc_r+0x260>
   83bf4:	00805504 	movi	r2,340
   83bf8:	11000836 	bltu	r2,r4,83c1c <_malloc_r+0x71c>
   83bfc:	2804d3fa 	srli	r2,r5,15
   83c00:	11001dc4 	addi	r4,r2,119
   83c04:	200690fa 	slli	r3,r4,3
   83c08:	003f7306 	br	839d8 <_malloc_r+0x4d8>
   83c0c:	0104303a 	nor	r2,zero,r4
   83c10:	388e703a 	and	r7,r7,r2
   83c14:	e1c00115 	stw	r7,4(fp)
   83c18:	003fe906 	br	83bc0 <_malloc_r+0x6c0>
   83c1c:	00815504 	movi	r2,1364
   83c20:	1100032e 	bgeu	r2,r4,83c30 <_malloc_r+0x730>
   83c24:	01001f84 	movi	r4,126
   83c28:	00c0fc04 	movi	r3,1008
   83c2c:	003f6a06 	br	839d8 <_malloc_r+0x4d8>
   83c30:	2804d4ba 	srli	r2,r5,18
   83c34:	11001f04 	addi	r4,r2,124
   83c38:	200690fa 	slli	r3,r4,3
   83c3c:	003f6606 	br	839d8 <_malloc_r+0x4d8>

00083c40 <memset>:
   83c40:	008000c4 	movi	r2,3
   83c44:	29403fcc 	andi	r5,r5,255
   83c48:	2007883a 	mov	r3,r4
   83c4c:	1180022e 	bgeu	r2,r6,83c58 <memset+0x18>
   83c50:	2084703a 	and	r2,r4,r2
   83c54:	10000826 	beq	r2,zero,83c78 <memset+0x38>
   83c58:	30000526 	beq	r6,zero,83c70 <memset+0x30>
   83c5c:	2805883a 	mov	r2,r5
   83c60:	30cd883a 	add	r6,r6,r3
   83c64:	18800005 	stb	r2,0(r3)
   83c68:	18c00044 	addi	r3,r3,1
   83c6c:	19bffd1e 	bne	r3,r6,83c64 <memset+0x24>
   83c70:	2005883a 	mov	r2,r4
   83c74:	f800283a 	ret
   83c78:	2804923a 	slli	r2,r5,8
   83c7c:	020003c4 	movi	r8,15
   83c80:	200f883a 	mov	r7,r4
   83c84:	2884b03a 	or	r2,r5,r2
   83c88:	1006943a 	slli	r3,r2,16
   83c8c:	10c6b03a 	or	r3,r2,r3
   83c90:	41800a2e 	bgeu	r8,r6,83cbc <memset+0x7c>
   83c94:	4005883a 	mov	r2,r8
   83c98:	31bffc04 	addi	r6,r6,-16
   83c9c:	38c00015 	stw	r3,0(r7)
   83ca0:	38c00115 	stw	r3,4(r7)
   83ca4:	38c00215 	stw	r3,8(r7)
   83ca8:	38c00315 	stw	r3,12(r7)
   83cac:	39c00404 	addi	r7,r7,16
   83cb0:	11bff936 	bltu	r2,r6,83c98 <memset+0x58>
   83cb4:	008000c4 	movi	r2,3
   83cb8:	1180052e 	bgeu	r2,r6,83cd0 <memset+0x90>
   83cbc:	31bfff04 	addi	r6,r6,-4
   83cc0:	008000c4 	movi	r2,3
   83cc4:	38c00015 	stw	r3,0(r7)
   83cc8:	39c00104 	addi	r7,r7,4
   83ccc:	11bffb36 	bltu	r2,r6,83cbc <memset+0x7c>
   83cd0:	3807883a 	mov	r3,r7
   83cd4:	003fe006 	br	83c58 <memset+0x18>

00083cd8 <__srefill_r>:
   83cd8:	defffd04 	addi	sp,sp,-12
   83cdc:	dc400115 	stw	r17,4(sp)
   83ce0:	dc000015 	stw	r16,0(sp)
   83ce4:	dfc00215 	stw	ra,8(sp)
   83ce8:	2023883a 	mov	r17,r4
   83cec:	2821883a 	mov	r16,r5
   83cf0:	20000226 	beq	r4,zero,83cfc <__srefill_r+0x24>
   83cf4:	20800e17 	ldw	r2,56(r4)
   83cf8:	10004126 	beq	r2,zero,83e00 <__srefill_r+0x128>
   83cfc:	80c0030b 	ldhu	r3,12(r16)
   83d00:	80000115 	stw	zero,4(r16)
   83d04:	1880080c 	andi	r2,r3,32
   83d08:	1000361e 	bne	r2,zero,83de4 <__srefill_r+0x10c>
   83d0c:	1880010c 	andi	r2,r3,4
   83d10:	1000211e 	bne	r2,zero,83d98 <__srefill_r+0xc0>
   83d14:	1880040c 	andi	r2,r3,16
   83d18:	10005026 	beq	r2,zero,83e5c <__srefill_r+0x184>
   83d1c:	1880020c 	andi	r2,r3,8
   83d20:	1000541e 	bne	r2,zero,83e74 <__srefill_r+0x19c>
   83d24:	8080030b 	ldhu	r2,12(r16)
   83d28:	10800114 	ori	r2,r2,4
   83d2c:	8080030d 	sth	r2,12(r16)
   83d30:	80800417 	ldw	r2,16(r16)
   83d34:	10004526 	beq	r2,zero,83e4c <__srefill_r+0x174>
   83d38:	8080030b 	ldhu	r2,12(r16)
   83d3c:	108000cc 	andi	r2,r2,3
   83d40:	1000361e 	bne	r2,zero,83e1c <__srefill_r+0x144>
   83d44:	81800417 	ldw	r6,16(r16)
   83d48:	80c00817 	ldw	r3,32(r16)
   83d4c:	81400717 	ldw	r5,28(r16)
   83d50:	81c00517 	ldw	r7,20(r16)
   83d54:	8809883a 	mov	r4,r17
   83d58:	81800015 	stw	r6,0(r16)
   83d5c:	183ee83a 	callr	r3
   83d60:	80c0030b 	ldhu	r3,12(r16)
   83d64:	1009883a 	mov	r4,r2
   83d68:	80800115 	stw	r2,4(r16)
   83d6c:	00b7ffc4 	movi	r2,-8193
   83d70:	1884703a 	and	r2,r3,r2
   83d74:	8080030d 	sth	r2,12(r16)
   83d78:	0100230e 	bge	zero,r4,83e08 <__srefill_r+0x130>
   83d7c:	0009883a 	mov	r4,zero
   83d80:	2005883a 	mov	r2,r4
   83d84:	dfc00217 	ldw	ra,8(sp)
   83d88:	dc400117 	ldw	r17,4(sp)
   83d8c:	dc000017 	ldw	r16,0(sp)
   83d90:	dec00304 	addi	sp,sp,12
   83d94:	f800283a 	ret
   83d98:	81400c17 	ldw	r5,48(r16)
   83d9c:	283fe426 	beq	r5,zero,83d30 <__srefill_r+0x58>
   83da0:	80801004 	addi	r2,r16,64
   83da4:	28800226 	beq	r5,r2,83db0 <__srefill_r+0xd8>
   83da8:	8809883a 	mov	r4,r17
   83dac:	0082ed80 	call	82ed8 <_free_r>
   83db0:	80800f17 	ldw	r2,60(r16)
   83db4:	80000c15 	stw	zero,48(r16)
   83db8:	80800115 	stw	r2,4(r16)
   83dbc:	103fdc26 	beq	r2,zero,83d30 <__srefill_r+0x58>
   83dc0:	80800e17 	ldw	r2,56(r16)
   83dc4:	0009883a 	mov	r4,zero
   83dc8:	80800015 	stw	r2,0(r16)
   83dcc:	2005883a 	mov	r2,r4
   83dd0:	dfc00217 	ldw	ra,8(sp)
   83dd4:	dc400117 	ldw	r17,4(sp)
   83dd8:	dc000017 	ldw	r16,0(sp)
   83ddc:	dec00304 	addi	sp,sp,12
   83de0:	f800283a 	ret
   83de4:	013fffc4 	movi	r4,-1
   83de8:	2005883a 	mov	r2,r4
   83dec:	dfc00217 	ldw	ra,8(sp)
   83df0:	dc400117 	ldw	r17,4(sp)
   83df4:	dc000017 	ldw	r16,0(sp)
   83df8:	dec00304 	addi	sp,sp,12
   83dfc:	f800283a 	ret
   83e00:	0082b540 	call	82b54 <__sinit>
   83e04:	003fbd06 	br	83cfc <__srefill_r+0x24>
   83e08:	20000b1e 	bne	r4,zero,83e38 <__srefill_r+0x160>
   83e0c:	10800814 	ori	r2,r2,32
   83e10:	013fffc4 	movi	r4,-1
   83e14:	8080030d 	sth	r2,12(r16)
   83e18:	003fd906 	br	83d80 <__srefill_r+0xa8>
   83e1c:	00800234 	movhi	r2,8
   83e20:	109a1804 	addi	r2,r2,26720
   83e24:	11000017 	ldw	r4,0(r2)
   83e28:	01400234 	movhi	r5,8
   83e2c:	294fa704 	addi	r5,r5,16028
   83e30:	00832b40 	call	832b4 <_fwalk>
   83e34:	003fc306 	br	83d44 <__srefill_r+0x6c>
   83e38:	10801014 	ori	r2,r2,64
   83e3c:	013fffc4 	movi	r4,-1
   83e40:	8080030d 	sth	r2,12(r16)
   83e44:	80000115 	stw	zero,4(r16)
   83e48:	003fcd06 	br	83d80 <__srefill_r+0xa8>
   83e4c:	8809883a 	mov	r4,r17
   83e50:	800b883a 	mov	r5,r16
   83e54:	008336c0 	call	8336c <__smakebuf_r>
   83e58:	003fb706 	br	83d38 <__srefill_r+0x60>
   83e5c:	18c01014 	ori	r3,r3,64
   83e60:	00800244 	movi	r2,9
   83e64:	013fffc4 	movi	r4,-1
   83e68:	88800015 	stw	r2,0(r17)
   83e6c:	80c0030d 	sth	r3,12(r16)
   83e70:	003fc306 	br	83d80 <__srefill_r+0xa8>
   83e74:	8809883a 	mov	r4,r17
   83e78:	800b883a 	mov	r5,r16
   83e7c:	00828bc0 	call	828bc <_fflush_r>
   83e80:	103fd81e 	bne	r2,zero,83de4 <__srefill_r+0x10c>
   83e84:	8080030b 	ldhu	r2,12(r16)
   83e88:	80000215 	stw	zero,8(r16)
   83e8c:	80000615 	stw	zero,24(r16)
   83e90:	10bffdcc 	andi	r2,r2,65527
   83e94:	8080030d 	sth	r2,12(r16)
   83e98:	003fa206 	br	83d24 <__srefill_r+0x4c>

00083e9c <lflush>:
   83e9c:	20c0030b 	ldhu	r3,12(r4)
   83ea0:	01400244 	movi	r5,9
   83ea4:	0005883a 	mov	r2,zero
   83ea8:	18c0024c 	andi	r3,r3,9
   83eac:	19400126 	beq	r3,r5,83eb4 <lflush+0x18>
   83eb0:	f800283a 	ret
   83eb4:	0082ab81 	jmpi	82ab8 <fflush>

00083eb8 <_sbrk_r>:
   83eb8:	defffd04 	addi	sp,sp,-12
   83ebc:	dc000015 	stw	r16,0(sp)
   83ec0:	04000274 	movhi	r16,9
   83ec4:	8421d704 	addi	r16,r16,-30884
   83ec8:	dc400115 	stw	r17,4(sp)
   83ecc:	80000015 	stw	zero,0(r16)
   83ed0:	2023883a 	mov	r17,r4
   83ed4:	2809883a 	mov	r4,r5
   83ed8:	dfc00215 	stw	ra,8(sp)
   83edc:	00847040 	call	84704 <sbrk>
   83ee0:	1007883a 	mov	r3,r2
   83ee4:	00bfffc4 	movi	r2,-1
   83ee8:	18800626 	beq	r3,r2,83f04 <_sbrk_r+0x4c>
   83eec:	1805883a 	mov	r2,r3
   83ef0:	dfc00217 	ldw	ra,8(sp)
   83ef4:	dc400117 	ldw	r17,4(sp)
   83ef8:	dc000017 	ldw	r16,0(sp)
   83efc:	dec00304 	addi	sp,sp,12
   83f00:	f800283a 	ret
   83f04:	80800017 	ldw	r2,0(r16)
   83f08:	103ff826 	beq	r2,zero,83eec <_sbrk_r+0x34>
   83f0c:	88800015 	stw	r2,0(r17)
   83f10:	1805883a 	mov	r2,r3
   83f14:	dfc00217 	ldw	ra,8(sp)
   83f18:	dc400117 	ldw	r17,4(sp)
   83f1c:	dc000017 	ldw	r16,0(sp)
   83f20:	dec00304 	addi	sp,sp,12
   83f24:	f800283a 	ret

00083f28 <__sclose>:
   83f28:	2940038f 	ldh	r5,14(r5)
   83f2c:	00840ec1 	jmpi	840ec <_close_r>

00083f30 <__sseek>:
   83f30:	defffe04 	addi	sp,sp,-8
   83f34:	dc000015 	stw	r16,0(sp)
   83f38:	2821883a 	mov	r16,r5
   83f3c:	2940038f 	ldh	r5,14(r5)
   83f40:	dfc00115 	stw	ra,4(sp)
   83f44:	00843640 	call	84364 <_lseek_r>
   83f48:	1007883a 	mov	r3,r2
   83f4c:	00bfffc4 	movi	r2,-1
   83f50:	18800926 	beq	r3,r2,83f78 <__sseek+0x48>
   83f54:	8080030b 	ldhu	r2,12(r16)
   83f58:	80c01415 	stw	r3,80(r16)
   83f5c:	10840014 	ori	r2,r2,4096
   83f60:	8080030d 	sth	r2,12(r16)
   83f64:	1805883a 	mov	r2,r3
   83f68:	dfc00117 	ldw	ra,4(sp)
   83f6c:	dc000017 	ldw	r16,0(sp)
   83f70:	dec00204 	addi	sp,sp,8
   83f74:	f800283a 	ret
   83f78:	8080030b 	ldhu	r2,12(r16)
   83f7c:	10bbffcc 	andi	r2,r2,61439
   83f80:	8080030d 	sth	r2,12(r16)
   83f84:	1805883a 	mov	r2,r3
   83f88:	dfc00117 	ldw	ra,4(sp)
   83f8c:	dc000017 	ldw	r16,0(sp)
   83f90:	dec00204 	addi	sp,sp,8
   83f94:	f800283a 	ret

00083f98 <__swrite>:
   83f98:	2880030b 	ldhu	r2,12(r5)
   83f9c:	defffb04 	addi	sp,sp,-20
   83fa0:	dcc00315 	stw	r19,12(sp)
   83fa4:	1080400c 	andi	r2,r2,256
   83fa8:	dc800215 	stw	r18,8(sp)
   83fac:	dc400115 	stw	r17,4(sp)
   83fb0:	dc000015 	stw	r16,0(sp)
   83fb4:	3027883a 	mov	r19,r6
   83fb8:	3825883a 	mov	r18,r7
   83fbc:	dfc00415 	stw	ra,16(sp)
   83fc0:	2821883a 	mov	r16,r5
   83fc4:	000d883a 	mov	r6,zero
   83fc8:	01c00084 	movi	r7,2
   83fcc:	2023883a 	mov	r17,r4
   83fd0:	10000226 	beq	r2,zero,83fdc <__swrite+0x44>
   83fd4:	2940038f 	ldh	r5,14(r5)
   83fd8:	00843640 	call	84364 <_lseek_r>
   83fdc:	8080030b 	ldhu	r2,12(r16)
   83fe0:	8140038f 	ldh	r5,14(r16)
   83fe4:	8809883a 	mov	r4,r17
   83fe8:	10bbffcc 	andi	r2,r2,61439
   83fec:	980d883a 	mov	r6,r19
   83ff0:	900f883a 	mov	r7,r18
   83ff4:	8080030d 	sth	r2,12(r16)
   83ff8:	dfc00417 	ldw	ra,16(sp)
   83ffc:	dcc00317 	ldw	r19,12(sp)
   84000:	dc800217 	ldw	r18,8(sp)
   84004:	dc400117 	ldw	r17,4(sp)
   84008:	dc000017 	ldw	r16,0(sp)
   8400c:	dec00504 	addi	sp,sp,20
   84010:	00840741 	jmpi	84074 <_write_r>

00084014 <__sread>:
   84014:	defffe04 	addi	sp,sp,-8
   84018:	dc000015 	stw	r16,0(sp)
   8401c:	2821883a 	mov	r16,r5
   84020:	2940038f 	ldh	r5,14(r5)
   84024:	dfc00115 	stw	ra,4(sp)
   84028:	00843dc0 	call	843dc <_read_r>
   8402c:	1007883a 	mov	r3,r2
   84030:	10000816 	blt	r2,zero,84054 <__sread+0x40>
   84034:	80801417 	ldw	r2,80(r16)
   84038:	10c5883a 	add	r2,r2,r3
   8403c:	80801415 	stw	r2,80(r16)
   84040:	1805883a 	mov	r2,r3
   84044:	dfc00117 	ldw	ra,4(sp)
   84048:	dc000017 	ldw	r16,0(sp)
   8404c:	dec00204 	addi	sp,sp,8
   84050:	f800283a 	ret
   84054:	8080030b 	ldhu	r2,12(r16)
   84058:	10bbffcc 	andi	r2,r2,61439
   8405c:	8080030d 	sth	r2,12(r16)
   84060:	1805883a 	mov	r2,r3
   84064:	dfc00117 	ldw	ra,4(sp)
   84068:	dc000017 	ldw	r16,0(sp)
   8406c:	dec00204 	addi	sp,sp,8
   84070:	f800283a 	ret

00084074 <_write_r>:
   84074:	defffd04 	addi	sp,sp,-12
   84078:	dc000015 	stw	r16,0(sp)
   8407c:	04000274 	movhi	r16,9
   84080:	8421d704 	addi	r16,r16,-30884
   84084:	dc400115 	stw	r17,4(sp)
   84088:	80000015 	stw	zero,0(r16)
   8408c:	2023883a 	mov	r17,r4
   84090:	2809883a 	mov	r4,r5
   84094:	300b883a 	mov	r5,r6
   84098:	380d883a 	mov	r6,r7
   8409c:	dfc00215 	stw	ra,8(sp)
   840a0:	00847540 	call	84754 <write>
   840a4:	1007883a 	mov	r3,r2
   840a8:	00bfffc4 	movi	r2,-1
   840ac:	18800626 	beq	r3,r2,840c8 <_write_r+0x54>
   840b0:	1805883a 	mov	r2,r3
   840b4:	dfc00217 	ldw	ra,8(sp)
   840b8:	dc400117 	ldw	r17,4(sp)
   840bc:	dc000017 	ldw	r16,0(sp)
   840c0:	dec00304 	addi	sp,sp,12
   840c4:	f800283a 	ret
   840c8:	80800017 	ldw	r2,0(r16)
   840cc:	103ff826 	beq	r2,zero,840b0 <_write_r+0x3c>
   840d0:	88800015 	stw	r2,0(r17)
   840d4:	1805883a 	mov	r2,r3
   840d8:	dfc00217 	ldw	ra,8(sp)
   840dc:	dc400117 	ldw	r17,4(sp)
   840e0:	dc000017 	ldw	r16,0(sp)
   840e4:	dec00304 	addi	sp,sp,12
   840e8:	f800283a 	ret

000840ec <_close_r>:
   840ec:	defffd04 	addi	sp,sp,-12
   840f0:	dc000015 	stw	r16,0(sp)
   840f4:	04000274 	movhi	r16,9
   840f8:	8421d704 	addi	r16,r16,-30884
   840fc:	dc400115 	stw	r17,4(sp)
   84100:	80000015 	stw	zero,0(r16)
   84104:	2023883a 	mov	r17,r4
   84108:	2809883a 	mov	r4,r5
   8410c:	dfc00215 	stw	ra,8(sp)
   84110:	00817300 	call	81730 <close>
   84114:	1007883a 	mov	r3,r2
   84118:	00bfffc4 	movi	r2,-1
   8411c:	18800626 	beq	r3,r2,84138 <_close_r+0x4c>
   84120:	1805883a 	mov	r2,r3
   84124:	dfc00217 	ldw	ra,8(sp)
   84128:	dc400117 	ldw	r17,4(sp)
   8412c:	dc000017 	ldw	r16,0(sp)
   84130:	dec00304 	addi	sp,sp,12
   84134:	f800283a 	ret
   84138:	80800017 	ldw	r2,0(r16)
   8413c:	103ff826 	beq	r2,zero,84120 <_close_r+0x34>
   84140:	88800015 	stw	r2,0(r17)
   84144:	1805883a 	mov	r2,r3
   84148:	dfc00217 	ldw	ra,8(sp)
   8414c:	dc400117 	ldw	r17,4(sp)
   84150:	dc000017 	ldw	r16,0(sp)
   84154:	dec00304 	addi	sp,sp,12
   84158:	f800283a 	ret

0008415c <_fclose_r>:
   8415c:	defffc04 	addi	sp,sp,-16
   84160:	dc400115 	stw	r17,4(sp)
   84164:	dc000015 	stw	r16,0(sp)
   84168:	dfc00315 	stw	ra,12(sp)
   8416c:	dc800215 	stw	r18,8(sp)
   84170:	2821883a 	mov	r16,r5
   84174:	2023883a 	mov	r17,r4
   84178:	28002926 	beq	r5,zero,84220 <_fclose_r+0xc4>
   8417c:	0082b440 	call	82b44 <__sfp_lock_acquire>
   84180:	88000226 	beq	r17,zero,8418c <_fclose_r+0x30>
   84184:	88800e17 	ldw	r2,56(r17)
   84188:	10002d26 	beq	r2,zero,84240 <_fclose_r+0xe4>
   8418c:	8080030f 	ldh	r2,12(r16)
   84190:	10002226 	beq	r2,zero,8421c <_fclose_r+0xc0>
   84194:	8809883a 	mov	r4,r17
   84198:	800b883a 	mov	r5,r16
   8419c:	00828bc0 	call	828bc <_fflush_r>
   841a0:	1025883a 	mov	r18,r2
   841a4:	80800b17 	ldw	r2,44(r16)
   841a8:	10000426 	beq	r2,zero,841bc <_fclose_r+0x60>
   841ac:	81400717 	ldw	r5,28(r16)
   841b0:	8809883a 	mov	r4,r17
   841b4:	103ee83a 	callr	r2
   841b8:	10002a16 	blt	r2,zero,84264 <_fclose_r+0x108>
   841bc:	8080030b 	ldhu	r2,12(r16)
   841c0:	1080200c 	andi	r2,r2,128
   841c4:	1000231e 	bne	r2,zero,84254 <_fclose_r+0xf8>
   841c8:	81400c17 	ldw	r5,48(r16)
   841cc:	28000526 	beq	r5,zero,841e4 <_fclose_r+0x88>
   841d0:	80801004 	addi	r2,r16,64
   841d4:	28800226 	beq	r5,r2,841e0 <_fclose_r+0x84>
   841d8:	8809883a 	mov	r4,r17
   841dc:	0082ed80 	call	82ed8 <_free_r>
   841e0:	80000c15 	stw	zero,48(r16)
   841e4:	81401117 	ldw	r5,68(r16)
   841e8:	28000326 	beq	r5,zero,841f8 <_fclose_r+0x9c>
   841ec:	8809883a 	mov	r4,r17
   841f0:	0082ed80 	call	82ed8 <_free_r>
   841f4:	80001115 	stw	zero,68(r16)
   841f8:	8000030d 	sth	zero,12(r16)
   841fc:	0082b480 	call	82b48 <__sfp_lock_release>
   84200:	9005883a 	mov	r2,r18
   84204:	dfc00317 	ldw	ra,12(sp)
   84208:	dc800217 	ldw	r18,8(sp)
   8420c:	dc400117 	ldw	r17,4(sp)
   84210:	dc000017 	ldw	r16,0(sp)
   84214:	dec00404 	addi	sp,sp,16
   84218:	f800283a 	ret
   8421c:	0082b480 	call	82b48 <__sfp_lock_release>
   84220:	0025883a 	mov	r18,zero
   84224:	9005883a 	mov	r2,r18
   84228:	dfc00317 	ldw	ra,12(sp)
   8422c:	dc800217 	ldw	r18,8(sp)
   84230:	dc400117 	ldw	r17,4(sp)
   84234:	dc000017 	ldw	r16,0(sp)
   84238:	dec00404 	addi	sp,sp,16
   8423c:	f800283a 	ret
   84240:	8809883a 	mov	r4,r17
   84244:	0082b540 	call	82b54 <__sinit>
   84248:	8080030f 	ldh	r2,12(r16)
   8424c:	103fd11e 	bne	r2,zero,84194 <_fclose_r+0x38>
   84250:	003ff206 	br	8421c <_fclose_r+0xc0>
   84254:	81400417 	ldw	r5,16(r16)
   84258:	8809883a 	mov	r4,r17
   8425c:	0082ed80 	call	82ed8 <_free_r>
   84260:	003fd906 	br	841c8 <_fclose_r+0x6c>
   84264:	04bfffc4 	movi	r18,-1
   84268:	003fd406 	br	841bc <_fclose_r+0x60>

0008426c <fclose>:
   8426c:	00800234 	movhi	r2,8
   84270:	109a1704 	addi	r2,r2,26716
   84274:	200b883a 	mov	r5,r4
   84278:	11000017 	ldw	r4,0(r2)
   8427c:	008415c1 	jmpi	8415c <_fclose_r>

00084280 <_fstat_r>:
   84280:	defffd04 	addi	sp,sp,-12
   84284:	dc000015 	stw	r16,0(sp)
   84288:	04000274 	movhi	r16,9
   8428c:	8421d704 	addi	r16,r16,-30884
   84290:	dc400115 	stw	r17,4(sp)
   84294:	80000015 	stw	zero,0(r16)
   84298:	2023883a 	mov	r17,r4
   8429c:	2809883a 	mov	r4,r5
   842a0:	300b883a 	mov	r5,r6
   842a4:	dfc00215 	stw	ra,8(sp)
   842a8:	00844680 	call	84468 <fstat>
   842ac:	1007883a 	mov	r3,r2
   842b0:	00bfffc4 	movi	r2,-1
   842b4:	18800626 	beq	r3,r2,842d0 <_fstat_r+0x50>
   842b8:	1805883a 	mov	r2,r3
   842bc:	dfc00217 	ldw	ra,8(sp)
   842c0:	dc400117 	ldw	r17,4(sp)
   842c4:	dc000017 	ldw	r16,0(sp)
   842c8:	dec00304 	addi	sp,sp,12
   842cc:	f800283a 	ret
   842d0:	80800017 	ldw	r2,0(r16)
   842d4:	103ff826 	beq	r2,zero,842b8 <_fstat_r+0x38>
   842d8:	88800015 	stw	r2,0(r17)
   842dc:	1805883a 	mov	r2,r3
   842e0:	dfc00217 	ldw	ra,8(sp)
   842e4:	dc400117 	ldw	r17,4(sp)
   842e8:	dc000017 	ldw	r16,0(sp)
   842ec:	dec00304 	addi	sp,sp,12
   842f0:	f800283a 	ret

000842f4 <_isatty_r>:
   842f4:	defffd04 	addi	sp,sp,-12
   842f8:	dc000015 	stw	r16,0(sp)
   842fc:	04000274 	movhi	r16,9
   84300:	8421d704 	addi	r16,r16,-30884
   84304:	dc400115 	stw	r17,4(sp)
   84308:	80000015 	stw	zero,0(r16)
   8430c:	2023883a 	mov	r17,r4
   84310:	2809883a 	mov	r4,r5
   84314:	dfc00215 	stw	ra,8(sp)
   84318:	00844e80 	call	844e8 <isatty>
   8431c:	1007883a 	mov	r3,r2
   84320:	00bfffc4 	movi	r2,-1
   84324:	18800626 	beq	r3,r2,84340 <_isatty_r+0x4c>
   84328:	1805883a 	mov	r2,r3
   8432c:	dfc00217 	ldw	ra,8(sp)
   84330:	dc400117 	ldw	r17,4(sp)
   84334:	dc000017 	ldw	r16,0(sp)
   84338:	dec00304 	addi	sp,sp,12
   8433c:	f800283a 	ret
   84340:	80800017 	ldw	r2,0(r16)
   84344:	103ff826 	beq	r2,zero,84328 <_isatty_r+0x34>
   84348:	88800015 	stw	r2,0(r17)
   8434c:	1805883a 	mov	r2,r3
   84350:	dfc00217 	ldw	ra,8(sp)
   84354:	dc400117 	ldw	r17,4(sp)
   84358:	dc000017 	ldw	r16,0(sp)
   8435c:	dec00304 	addi	sp,sp,12
   84360:	f800283a 	ret

00084364 <_lseek_r>:
   84364:	defffd04 	addi	sp,sp,-12
   84368:	dc000015 	stw	r16,0(sp)
   8436c:	04000274 	movhi	r16,9
   84370:	8421d704 	addi	r16,r16,-30884
   84374:	dc400115 	stw	r17,4(sp)
   84378:	80000015 	stw	zero,0(r16)
   8437c:	2023883a 	mov	r17,r4
   84380:	2809883a 	mov	r4,r5
   84384:	300b883a 	mov	r5,r6
   84388:	380d883a 	mov	r6,r7
   8438c:	dfc00215 	stw	ra,8(sp)
   84390:	008456c0 	call	8456c <lseek>
   84394:	1007883a 	mov	r3,r2
   84398:	00bfffc4 	movi	r2,-1
   8439c:	18800626 	beq	r3,r2,843b8 <_lseek_r+0x54>
   843a0:	1805883a 	mov	r2,r3
   843a4:	dfc00217 	ldw	ra,8(sp)
   843a8:	dc400117 	ldw	r17,4(sp)
   843ac:	dc000017 	ldw	r16,0(sp)
   843b0:	dec00304 	addi	sp,sp,12
   843b4:	f800283a 	ret
   843b8:	80800017 	ldw	r2,0(r16)
   843bc:	103ff826 	beq	r2,zero,843a0 <_lseek_r+0x3c>
   843c0:	88800015 	stw	r2,0(r17)
   843c4:	1805883a 	mov	r2,r3
   843c8:	dfc00217 	ldw	ra,8(sp)
   843cc:	dc400117 	ldw	r17,4(sp)
   843d0:	dc000017 	ldw	r16,0(sp)
   843d4:	dec00304 	addi	sp,sp,12
   843d8:	f800283a 	ret

000843dc <_read_r>:
   843dc:	defffd04 	addi	sp,sp,-12
   843e0:	dc000015 	stw	r16,0(sp)
   843e4:	04000274 	movhi	r16,9
   843e8:	8421d704 	addi	r16,r16,-30884
   843ec:	dc400115 	stw	r17,4(sp)
   843f0:	80000015 	stw	zero,0(r16)
   843f4:	2023883a 	mov	r17,r4
   843f8:	2809883a 	mov	r4,r5
   843fc:	300b883a 	mov	r5,r6
   84400:	380d883a 	mov	r6,r7
   84404:	dfc00215 	stw	ra,8(sp)
   84408:	008460c0 	call	8460c <read>
   8440c:	1007883a 	mov	r3,r2
   84410:	00bfffc4 	movi	r2,-1
   84414:	18800626 	beq	r3,r2,84430 <_read_r+0x54>
   84418:	1805883a 	mov	r2,r3
   8441c:	dfc00217 	ldw	ra,8(sp)
   84420:	dc400117 	ldw	r17,4(sp)
   84424:	dc000017 	ldw	r16,0(sp)
   84428:	dec00304 	addi	sp,sp,12
   8442c:	f800283a 	ret
   84430:	80800017 	ldw	r2,0(r16)
   84434:	103ff826 	beq	r2,zero,84418 <_read_r+0x3c>
   84438:	88800015 	stw	r2,0(r17)
   8443c:	1805883a 	mov	r2,r3
   84440:	dfc00217 	ldw	ra,8(sp)
   84444:	dc400117 	ldw	r17,4(sp)
   84448:	dc000017 	ldw	r16,0(sp)
   8444c:	dec00304 	addi	sp,sp,12
   84450:	f800283a 	ret

00084454 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   84454:	20000226 	beq	r4,zero,84460 <_exit+0xc>
    ALT_SIM_FAIL();
   84458:	002af070 	cmpltui	zero,zero,43969
   8445c:	00000106 	br	84464 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
   84460:	002af0b0 	cmpltui	zero,zero,43970
   84464:	003fff06 	br	84464 <_exit+0x10>

00084468 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   84468:	deffff04 	addi	sp,sp,-4
   8446c:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84470:	20000e16 	blt	r4,zero,844ac <fstat+0x44>
   84474:	20c00324 	muli	r3,r4,12
   84478:	00800234 	movhi	r2,8
   8447c:	1097a804 	addi	r2,r2,24224
   84480:	1889883a 	add	r4,r3,r2
  
  if (fd)
   84484:	20000926 	beq	r4,zero,844ac <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   84488:	20800017 	ldw	r2,0(r4)
   8448c:	10800817 	ldw	r2,32(r2)
   84490:	10000226 	beq	r2,zero,8449c <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
   84494:	103ee83a 	callr	r2
   84498:	00001006 	br	844dc <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8449c:	00880004 	movi	r2,8192
   844a0:	28800115 	stw	r2,4(r5)
   844a4:	0005883a 	mov	r2,zero
   844a8:	00000c06 	br	844dc <fstat+0x74>
   844ac:	00800234 	movhi	r2,8
   844b0:	109a1304 	addi	r2,r2,26700
   844b4:	10800017 	ldw	r2,0(r2)
   844b8:	1000031e 	bne	r2,zero,844c8 <fstat+0x60>
   844bc:	00c00274 	movhi	r3,9
   844c0:	18e1d704 	addi	r3,r3,-30884
   844c4:	00000206 	br	844d0 <fstat+0x68>
   844c8:	103ee83a 	callr	r2
   844cc:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   844d0:	00801444 	movi	r2,81
   844d4:	18800015 	stw	r2,0(r3)
   844d8:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
   844dc:	dfc00017 	ldw	ra,0(sp)
   844e0:	dec00104 	addi	sp,sp,4
   844e4:	f800283a 	ret

000844e8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   844e8:	defff004 	addi	sp,sp,-64
   844ec:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   844f0:	20000f16 	blt	r4,zero,84530 <isatty+0x48>
   844f4:	20c00324 	muli	r3,r4,12
   844f8:	00800234 	movhi	r2,8
   844fc:	1097a804 	addi	r2,r2,24224
   84500:	1885883a 	add	r2,r3,r2
  
  if (fd)
   84504:	10000a26 	beq	r2,zero,84530 <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   84508:	10800017 	ldw	r2,0(r2)
   8450c:	10800817 	ldw	r2,32(r2)
   84510:	1000021e 	bne	r2,zero,8451c <isatty+0x34>
   84514:	00800044 	movi	r2,1
   84518:	00001106 	br	84560 <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8451c:	d80b883a 	mov	r5,sp
   84520:	00844680 	call	84468 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   84524:	d8800117 	ldw	r2,4(sp)
   84528:	10880020 	cmpeqi	r2,r2,8192
   8452c:	00000c06 	br	84560 <isatty+0x78>
   84530:	00800234 	movhi	r2,8
   84534:	109a1304 	addi	r2,r2,26700
   84538:	10800017 	ldw	r2,0(r2)
   8453c:	1000031e 	bne	r2,zero,8454c <isatty+0x64>
   84540:	00c00274 	movhi	r3,9
   84544:	18e1d704 	addi	r3,r3,-30884
   84548:	00000206 	br	84554 <isatty+0x6c>
   8454c:	103ee83a 	callr	r2
   84550:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   84554:	00801444 	movi	r2,81
   84558:	18800015 	stw	r2,0(r3)
   8455c:	0005883a 	mov	r2,zero
    return 0;
  }
}
   84560:	dfc00f17 	ldw	ra,60(sp)
   84564:	dec01004 	addi	sp,sp,64
   84568:	f800283a 	ret

0008456c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8456c:	defffe04 	addi	sp,sp,-8
   84570:	dfc00115 	stw	ra,4(sp)
   84574:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84578:	2000020e 	bge	r4,zero,84584 <lseek+0x18>
   8457c:	043febc4 	movi	r16,-81
   84580:	00000d06 	br	845b8 <lseek+0x4c>
   84584:	20c00324 	muli	r3,r4,12
   84588:	00800234 	movhi	r2,8
   8458c:	1097a804 	addi	r2,r2,24224
   84590:	1889883a 	add	r4,r3,r2
  
  if (fd) 
   84594:	20001526 	beq	r4,zero,845ec <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   84598:	20800017 	ldw	r2,0(r4)
   8459c:	10800717 	ldw	r2,28(r2)
   845a0:	1000021e 	bne	r2,zero,845ac <lseek+0x40>
   845a4:	043fde84 	movi	r16,-134
   845a8:	00000306 	br	845b8 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   845ac:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
   845b0:	1000100e 	bge	r2,zero,845f4 <lseek+0x88>
   845b4:	1021883a 	mov	r16,r2
   845b8:	00800234 	movhi	r2,8
   845bc:	109a1304 	addi	r2,r2,26700
   845c0:	10800017 	ldw	r2,0(r2)
   845c4:	1000031e 	bne	r2,zero,845d4 <lseek+0x68>
   845c8:	00c00274 	movhi	r3,9
   845cc:	18e1d704 	addi	r3,r3,-30884
   845d0:	00000206 	br	845dc <lseek+0x70>
   845d4:	103ee83a 	callr	r2
   845d8:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
   845dc:	0405c83a 	sub	r2,zero,r16
   845e0:	18800015 	stw	r2,0(r3)
   845e4:	00bfffc4 	movi	r2,-1
   845e8:	00000206 	br	845f4 <lseek+0x88>
   845ec:	043febc4 	movi	r16,-81
   845f0:	003ff106 	br	845b8 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
   845f4:	dfc00117 	ldw	ra,4(sp)
   845f8:	dc000017 	ldw	r16,0(sp)
   845fc:	dec00204 	addi	sp,sp,8
   84600:	f800283a 	ret

00084604 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
   84604:	f800283a 	ret

00084608 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
   84608:	f800283a 	ret

0008460c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8460c:	defffe04 	addi	sp,sp,-8
   84610:	dfc00115 	stw	ra,4(sp)
   84614:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84618:	20002916 	blt	r4,zero,846c0 <read+0xb4>
   8461c:	20c00324 	muli	r3,r4,12
   84620:	00800234 	movhi	r2,8
   84624:	1097a804 	addi	r2,r2,24224
   84628:	1889883a 	add	r4,r3,r2
  
  if (fd)
   8462c:	20002426 	beq	r4,zero,846c0 <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   84630:	20800217 	ldw	r2,8(r4)
   84634:	108000cc 	andi	r2,r2,3
   84638:	00c00044 	movi	r3,1
   8463c:	10c01326 	beq	r2,r3,8468c <read+0x80>
   84640:	20800017 	ldw	r2,0(r4)
   84644:	10800517 	ldw	r2,20(r2)
   84648:	10001026 	beq	r2,zero,8468c <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8464c:	103ee83a 	callr	r2
   84650:	1021883a 	mov	r16,r2
   84654:	1000260e 	bge	r2,zero,846f0 <read+0xe4>
   84658:	00800234 	movhi	r2,8
   8465c:	109a1304 	addi	r2,r2,26700
   84660:	10800017 	ldw	r2,0(r2)
   84664:	1000031e 	bne	r2,zero,84674 <read+0x68>
   84668:	00c00274 	movhi	r3,9
   8466c:	18e1d704 	addi	r3,r3,-30884
   84670:	00000206 	br	8467c <read+0x70>
   84674:	103ee83a 	callr	r2
   84678:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
   8467c:	0405c83a 	sub	r2,zero,r16
   84680:	18800015 	stw	r2,0(r3)
   84684:	043fffc4 	movi	r16,-1
   84688:	00001906 	br	846f0 <read+0xe4>
   8468c:	00800234 	movhi	r2,8
   84690:	109a1304 	addi	r2,r2,26700
   84694:	10800017 	ldw	r2,0(r2)
   84698:	1000031e 	bne	r2,zero,846a8 <read+0x9c>
   8469c:	00c00274 	movhi	r3,9
   846a0:	18e1d704 	addi	r3,r3,-30884
   846a4:	00000206 	br	846b0 <read+0xa4>
   846a8:	103ee83a 	callr	r2
   846ac:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
   846b0:	00800344 	movi	r2,13
   846b4:	18800015 	stw	r2,0(r3)
   846b8:	043fffc4 	movi	r16,-1
   846bc:	00000c06 	br	846f0 <read+0xe4>
   846c0:	00800234 	movhi	r2,8
   846c4:	109a1304 	addi	r2,r2,26700
   846c8:	10800017 	ldw	r2,0(r2)
   846cc:	1000031e 	bne	r2,zero,846dc <read+0xd0>
   846d0:	00c00274 	movhi	r3,9
   846d4:	18e1d704 	addi	r3,r3,-30884
   846d8:	00000206 	br	846e4 <read+0xd8>
   846dc:	103ee83a 	callr	r2
   846e0:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   846e4:	00801444 	movi	r2,81
   846e8:	18800015 	stw	r2,0(r3)
   846ec:	043fffc4 	movi	r16,-1
  }
  return -1;
}
   846f0:	8005883a 	mov	r2,r16
   846f4:	dfc00117 	ldw	ra,4(sp)
   846f8:	dc000017 	ldw	r16,0(sp)
   846fc:	dec00204 	addi	sp,sp,8
   84700:	f800283a 	ret

00084704 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84704:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84708:	00bfff84 	movi	r2,-2
   8470c:	2884703a 	and	r2,r5,r2
   84710:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   84714:	d0a01117 	ldw	r2,-32700(gp)
   84718:	108000c4 	addi	r2,r2,3
   8471c:	00ffff04 	movi	r3,-4
   84720:	10c6703a 	and	r3,r2,r3
   84724:	d0e01115 	stw	r3,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   84728:	1909883a 	add	r4,r3,r4
   8472c:	008002b4 	movhi	r2,10
   84730:	10a40004 	addi	r2,r2,-28672
   84734:	1100032e 	bgeu	r2,r4,84744 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84738:	2801703a 	wrctl	status,r5
   8473c:	00ffffc4 	movi	r3,-1
   84740:	00000206 	br	8474c <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   84744:	d1201115 	stw	r4,-32700(gp)
   84748:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   8474c:	1805883a 	mov	r2,r3
   84750:	f800283a 	ret

00084754 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   84754:	defffe04 	addi	sp,sp,-8
   84758:	dfc00115 	stw	ra,4(sp)
   8475c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84760:	20002816 	blt	r4,zero,84804 <write+0xb0>
   84764:	20c00324 	muli	r3,r4,12
   84768:	00800234 	movhi	r2,8
   8476c:	1097a804 	addi	r2,r2,24224
   84770:	1889883a 	add	r4,r3,r2
  
  if (fd)
   84774:	20002326 	beq	r4,zero,84804 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   84778:	20800217 	ldw	r2,8(r4)
   8477c:	108000cc 	andi	r2,r2,3
   84780:	10001326 	beq	r2,zero,847d0 <write+0x7c>
   84784:	20800017 	ldw	r2,0(r4)
   84788:	10800617 	ldw	r2,24(r2)
   8478c:	10001026 	beq	r2,zero,847d0 <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   84790:	103ee83a 	callr	r2
   84794:	1021883a 	mov	r16,r2
   84798:	1000260e 	bge	r2,zero,84834 <write+0xe0>
   8479c:	00800234 	movhi	r2,8
   847a0:	109a1304 	addi	r2,r2,26700
   847a4:	10800017 	ldw	r2,0(r2)
   847a8:	1000031e 	bne	r2,zero,847b8 <write+0x64>
   847ac:	00c00274 	movhi	r3,9
   847b0:	18e1d704 	addi	r3,r3,-30884
   847b4:	00000206 	br	847c0 <write+0x6c>
   847b8:	103ee83a 	callr	r2
   847bc:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
   847c0:	0405c83a 	sub	r2,zero,r16
   847c4:	18800015 	stw	r2,0(r3)
   847c8:	043fffc4 	movi	r16,-1
   847cc:	00001906 	br	84834 <write+0xe0>
   847d0:	00800234 	movhi	r2,8
   847d4:	109a1304 	addi	r2,r2,26700
   847d8:	10800017 	ldw	r2,0(r2)
   847dc:	1000031e 	bne	r2,zero,847ec <write+0x98>
   847e0:	00c00274 	movhi	r3,9
   847e4:	18e1d704 	addi	r3,r3,-30884
   847e8:	00000206 	br	847f4 <write+0xa0>
   847ec:	103ee83a 	callr	r2
   847f0:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
   847f4:	00800344 	movi	r2,13
   847f8:	18800015 	stw	r2,0(r3)
   847fc:	043fffc4 	movi	r16,-1
   84800:	00000c06 	br	84834 <write+0xe0>
   84804:	00800234 	movhi	r2,8
   84808:	109a1304 	addi	r2,r2,26700
   8480c:	10800017 	ldw	r2,0(r2)
   84810:	1000031e 	bne	r2,zero,84820 <write+0xcc>
   84814:	00c00274 	movhi	r3,9
   84818:	18e1d704 	addi	r3,r3,-30884
   8481c:	00000206 	br	84828 <write+0xd4>
   84820:	103ee83a 	callr	r2
   84824:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   84828:	00801444 	movi	r2,81
   8482c:	18800015 	stw	r2,0(r3)
   84830:	043fffc4 	movi	r16,-1
  }
  return -1;
}
   84834:	8005883a 	mov	r2,r16
   84838:	dfc00117 	ldw	ra,4(sp)
   8483c:	dc000017 	ldw	r16,0(sp)
   84840:	dec00204 	addi	sp,sp,8
   84844:	f800283a 	ret
   84848:	00082708 	cmpgei	zero,zero,8348
