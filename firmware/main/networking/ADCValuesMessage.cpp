//This code file was generated by ComBuilder on 17.03.2014 18:01:05

/**********************************************************************************
File Description:
For general sensor information see '../sensors/'ADCSensor.h

All messages have to be understand by Nios2 and Linux-PC. Please use the flag
CENTRAL_ECU_BUILD to distinguish the different builds!

**********************************************************************************/


/**********************************************************************************
SubMessage Description:
Contains the values of requested channels.
**********************************************************************************/

// Include guard for different build types
#ifndef CENTRAL_ECU_BUILD
#include "../external_drivers/adc_interface.h"
#endif /* CENTRAL_ECU_BUILD */

// Export Interfaces
#include "ADCValuesMessage.h"

// Import Interfaces

/*
 * Basic Constructor. Used to initialise new message-objects.
 */
CADCValuesMessage::CADCValuesMessage(alt_u8 uiChannelNumbers[])
{
    setHeader(10, getLength(), 1);

    m_uiChannelNumbers[0] = uiChannelNumbers[0];
    m_uiChannelNumbers[1] = uiChannelNumbers[1];
}

/*
 * Constructor. Used to reassemble object from Byte stream.
 * pMessage : Byte-Array containing the fields of the subMessage
 * iLength  : Length of the said array
 */
CADCValuesMessage::CADCValuesMessage(alt_u8 *pMessage, int iLength)
{
    parseHeader(pMessage, iLength);
    if(m_bValid)
    {
        m_bValid = false;
        parseMessage(pMessage+4, iLength-4);
    }

}

/*
 * Basic Destructor.
 */
CADCValuesMessage::~CADCValuesMessage()
{
}

/*
 * Overrided from CCarMessage.
 */
void CADCValuesMessage::doAction()
{
#ifndef CENTRAL_ECU_BUILD
	alt_u32 uiValues[2];
	alt_u16 uiTrimmedValues[2];
	ReadADCChannels(m_uiChannelNumbers, 2, uiValues);

	uiTrimmedValues[0] = uiValues[0];
	uiTrimmedValues[1] = uiValues[1];

	answerMessage(m_uiChannelNumbers, uiTrimmedValues);

#endif /* CENTRAL_ECU_BUILD */

}

/*
 * Overrided from CCarMessage.
 */
void CADCValuesMessage::answerMessage(alt_u8 uiChannelNumbers[], alt_u16 uiChannelValues[])
{
    m_uiChannelValues[0] = uiChannelValues[0];
    m_uiChannelValues[1] = uiChannelValues[1];
    m_uiFlags = m_uiFlags | 0x01; // Set response flag
}

/*
 * Overrided from CCarMessage.
 */
bool CADCValuesMessage::getBytes(alt_u8 *pMessage)
{
    CCarMessage::getBytes(pMessage);

    pMessage[4] = m_uiChannelNumbers[0];
    pMessage[5] = 0;
    pMessage[6] = (m_uiChannelValues[0] >> 0) & 0xFF;
    pMessage[7] = (m_uiChannelValues[0] >> 8) & 0xFF;
    pMessage[8] = m_uiChannelNumbers[1];
    pMessage[9] = 0;
    pMessage[10] = (m_uiChannelValues[1] >> 0) & 0xFF;
    pMessage[11] = (m_uiChannelValues[1] >> 8) & 0xFF;
    return m_bValid;
}

/*
 * Overrided from CCarMessage.
 */
alt_u32 CADCValuesMessage::getLength()
{
    return 12;
}

/*
 * Overrided from CCarMessage.
 */
void CADCValuesMessage::parseMessage(alt_u8 *pMessage, int iLength)
{
    if(iLength < 8)
        return;

    m_uiChannelNumbers[0] = pMessage[0];
    m_uiChannelValues[0] = ((alt_u32) pMessage[2]) << 0;
    m_uiChannelValues[0] = ((alt_u32) pMessage[3]) << 8;
    m_uiChannelNumbers[1] = pMessage[4];
    m_uiChannelValues[1] = ((alt_u32) pMessage[6]) << 0;
    m_uiChannelValues[1] += ((alt_u32) pMessage[7]) << 8;

    m_bValid = true;
}

