package de.tum.in.hisch.combuilder.control;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

public class Generator {
	
	public static void generate(DataBase dataBase)
	{
		generateSensorHeader(dataBase);
		generateMessagesHeader(dataBase);
		generateMessagesCode(dataBase);
	}
	
	private static void generateSensorHeader(DataBase dataBase)
	{
		String absolutPath = dataBase.workspacePath + File.separatorChar + "sensors" + File.separatorChar + dataBase.sensorName + "Sensor.h";		
		BufferedWriter writer = null;

		try {
		    writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(absolutPath), "utf-8"));
		    
		    
		    writer.write("//This header file was generated by ComBuilder on " + getDateString() + "\n\n");
		    
		    if(dataBase.description != null)
		    {
			    writer.write("/**********************************************************************************\n"
			    		+    "Sensor Description:\n");
			    String descriptionText = dataBase.description;
			    writer.write(descriptionText);
			    writer.write("\n**********************************************************************************/\n\n");
		    }
		    
		    String includeGuard = dataBase.sensorName + "Sensor_H_";
		    includeGuard = includeGuard.toUpperCase();
		    writer.write("#ifndef " + includeGuard + "\n#define " + includeGuard + "\n\n");
		    
		    writer.write("// Export Interface\n");
		    writer.write("#include \"alt_types.h\"\n#include \"SensorState.h\"\n");
		    
		    boolean help = false;
		    for(int i = 0; i < dataBase.fieldList.size(); i++)
			{
		    	help |= (dataBase.fieldList.get(i).mode == FieldMode.list);
			}
		    if(help)
		    	writer.write("#include <vector>\n");
		    writer.write("\n");
		    
		    writer.write("class C" + dataBase.sensorName + "Sensor : public CSensorState\n");
		    writer.write("{\n");
		    writer.write("public:\n");
		    
		    writer.write("    // Constructors\n");
		    writer.write("    C" + dataBase.sensorName + "Sensor();\n\n");
		    writer.write("    // Destructors\n");
		    writer.write("    virtual ~C" + dataBase.sensorName + "Sensor();\n\n");
		    
		    writer.write("    // Override virtual methods of CSensorState\n");
		    writer.write("    virtual CCarMessage *getCarMessage();\n");
			writer.write("    virtual bool updateSensorState(CCarMessage * p_message);\n\n");
		    
			writer.write("    // TODO: Add getter/setter-methods here\n\n");
			
			writer.write("private:\n");
			
			for(int i = 0; i < dataBase.fieldList.size(); i++)
			{
				writer.write("    " + dataBase.fieldList.get(i).getInfo() + "\n");
			}
		    
		    writer.write("\n");
		    writer.write("};\n\n");
		    
		    writer.write("#endif /* " + includeGuard + " */");
		    
		} catch (IOException ex) {
			  // report
		} finally {
		   try {writer.close();} catch (Exception ex) {}
		}

	}
	
	private static void generateMessagesHeader(DataBase dataBase)
	{
		String absolutPathBase = dataBase.workspacePath + File.separatorChar + "networking" + File.separatorChar + dataBase.sensorName;		
		BufferedWriter writer = null;

		for(int i = 0; i < dataBase.subMessageList.size(); i++)
	    {
			try {
			
			
				SubMessage current = dataBase.subMessageList.get(i);
				
			    writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(absolutPathBase+current.name+"Message.h"), "utf-8"));
			    
			    
			    writer.write("//This header file was generated by ComBuilder on " + getDateString() + "\n\n");
			    
			    writer.write("/**********************************************************************************\n");
	    		writer.write("File Description:\n");
	    		writer.write("This file contains the header of one SubMessage of the sensor " + dataBase.sensorName + ".\n");
	    		writer.write("For general sensor information see '../sensors/'" + dataBase.sensorName + "Sensor.h\n");
	    		writer.write("\n");
	    		writer.write("All messages have to be understand by Nios2 and Linux-PC. Please use the flag\n");
	    		writer.write("CENTRAL_ECU_BUILD to distinguish the different builds!\n");
			    writer.write("\n**********************************************************************************/\n\n\n");
	
			    if(current.description != null)
			    {
				    writer.write("/**********************************************************************************\n"
				    		+    "SubMessage Description:\n");
				    String descriptionText = current.description;
				    writer.write(descriptionText);
				    writer.write("\n**********************************************************************************/\n\n");
			    }
		    			    	
			    String includeGuard = dataBase.sensorName + current.name + "Message_H_";
			    includeGuard = includeGuard.toUpperCase();
			    writer.write("#ifndef " + includeGuard + "\n#define " + includeGuard + "\n\n");
			    
			    writer.write("// Import Interfaces\n");
			    writer.write("#include \"CarMessage.h\"\n");
			    writer.write("// TODO: Add more import interfaces here\n\n");   
			    
			    
			    writer.write("class C" + dataBase.sensorName + current.name + "Message : public CCarMessage\n");
			    writer.write("{\n");
			    writer.write("public:\n");
			    
			    writer.write("    // Constructors\n");
			    writer.write("    C" + dataBase.sensorName + current.name + "Message();\n");
			    writer.write("    C" + dataBase.sensorName + current.name + "Message(alt_u8 *pMessage, int iLength);\n\n");
			    writer.write("    // Destructors\n");
			    writer.write("    virtual ~C" + dataBase.sensorName + current.name + "Message();\n\n");
			    
			    writer.write("    // Override virtual methods of CCarMessage\n");
			    
			    writer.write("    void answerMessage(");
				writer.write(dataBase.getAnswerMessageString(i));	  
				writer.write(");\n");
			    
				writer.write("    void doAction();\n");
				writer.write("    bool getBytes(alt_u8 *pMessage);\n");
				writer.write("    alt_u32 getLength();\n");
			   
				writer.write("    // TODO: Add getter/setter-methods here\n\n");
				
				writer.write("private:\n");
				
				writer.write(dataBase.getMessageFieldsString(i));
				writer.write("\n");
				
				writer.write("    void parseMessage(alt_u8 *pMessage, int iLength);\n");
			    
			    writer.write("\n");
			    writer.write("};\n\n");
			    

			    writer.write("#endif /* " + includeGuard + " */");		    
		    
		    
			} catch (IOException ex) {
				  // report
			} finally {
			   try {writer.close();} catch (Exception ex) {}
			}
	    }

	}
	
	private static void generateMessagesCode(DataBase dataBase)
	{
		String absolutPathBase = dataBase.workspacePath + File.separatorChar + "networking" + File.separatorChar + dataBase.sensorName;		
		BufferedWriter writer = null;

		for(int i = 0; i < dataBase.subMessageList.size(); i++)
	    {
			try {
			
			
				SubMessage current = dataBase.subMessageList.get(i);
				
			    writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(absolutPathBase+current.name+"Message.cpp"), "utf-8"));
			    
			    
			    writer.write("//This code file was generated by ComBuilder on " + getDateString() + "\n\n");
			    
			    writer.write("/**********************************************************************************\n");
	    		writer.write("File Description:\n");
	    		writer.write("For general sensor information see '../sensors/'" + dataBase.sensorName + "Sensor.h\n");
	    		writer.write("\n");
	    		writer.write("All messages have to be understand by Nios2 and Linux-PC. Please use the flag\n");
	    		writer.write("CENTRAL_ECU_BUILD to distinguish the different builds!\n");
			    writer.write("\n**********************************************************************************/\n\n\n");
	
			    if(current.description != null)
			    {
				    writer.write("/**********************************************************************************\n"
				    		+    "SubMessage Description:\n");
				    String descriptionText = current.description;
				    writer.write(descriptionText);
				    writer.write("\n**********************************************************************************/\n\n");
			    }
		    	
		    	writer.write("// Include guard for different build types\n");
		    	writer.write("#ifndef CENTRAL_ECU_BUILD\n");
		    	writer.write("// TODO: Add include for sensor-driver here\n");
		    	writer.write("#endif /* CENTRAL_ECU_BUILD */\n\n");
			    
		    	writer.write("// Export Interfaces\n");
			    writer.write("#include \"" + dataBase.sensorName + current.name + "Message.h\"\n\n");   
		    	
			    writer.write("// Import Interfaces\n");
			    writer.write("// TODO: Add more import interfaces here\n\n");   
			    
			    String classprefx = "C" + dataBase.sensorName + current.name + "Message::";
			    
			    writer.write("/*\n");
			    writer.write(" * Basic Constructor. Used to initialise new message-objects.\n");
			    writer.write(" */\n");
		    	writer.write(classprefx + "C" + dataBase.sensorName + current.name + "Message()\n");
		    	writer.write("{\n");
		    	writer.write("    setHeader(" + dataBase.sensorType + ", getLength(), " + current.subType + ");\n");
		    	writer.write("    // TODO: Initialise subMessage fields here\n");
		    	writer.write("}\n\n");
		    	
		    	writer.write("/*\n");
			    writer.write(" * Constructor. Used to reassemble object from Byte stream.\n");
			    writer.write(" * pMessage : Byte-Array containing the fields of the subMessage\n");
			    writer.write(" * iLength  : Length of the said array\n");
			    writer.write(" */\n");
		    	writer.write(classprefx + "C" + dataBase.sensorName + current.name + "Message(alt_u8 *pMessage, int iLength)\n");
		    	writer.write("{\n");
		    	writer.write("    parseHeader(pMessage, iLength);\n");
		    	writer.write("    if(m_bValid)\n");
		    	writer.write("    {\n");
		    	writer.write("        m_bValid = false;\n");
		    	writer.write("        parseMessage(pMessage+4, iLength-4);\n");
		    	writer.write("    }\n\n");
		    	writer.write("}\n\n");
			    
		    	writer.write("/*\n");
			    writer.write(" * Basic Destructor.\n");
			    writer.write(" */\n");
		    	writer.write(classprefx + "~C" + dataBase.sensorName + current.name + "Message()\n");
		    	writer.write("{\n");
		    	writer.write("}\n\n");
		    		    
		    	writer.write("/*\n");
			    writer.write(" * Overrided from CCarMessage.\n");
			    writer.write(" */\n");
		    	writer.write("void " + classprefx + "doAction()\n");
		    	writer.write("{\n");
		    	writer.write("#ifndef CENTRAL_ECU_BUILD\n");
		    	writer.write("    // TODO: Add driver calls here\n");
		    	writer.write("    // answerMessage(..);\n");
		    	writer.write("#endif /* CENTRAL_ECU_BUILD */\n\n");
		    	writer.write("}\n\n");
		    	
		    	writer.write("/*\n");
			    writer.write(" * Overrided from CCarMessage.\n");
			    writer.write(" */\n");
		    	writer.write("void " + classprefx + "answerMessage(");
				writer.write(dataBase.getAnswerMessageString(i));	  
				writer.write(")\n");
		    	writer.write("{\n");
		    	writer.write(dataBase.getSetterString(i));
		    	writer.write("}\n\n");
		    	
		    	writer.write("/*\n");
			    writer.write(" * Overrided from CCarMessage.\n");
			    writer.write(" */\n");
		    	writer.write("bool " + classprefx + "getBytes(alt_u8 *pMessage)\n");
		    	writer.write("{\n");
		    	writer.write(dataBase.getBytesString(i));
		    	writer.write("}\n\n");
		    	
		    	writer.write("/*\n");
			    writer.write(" * Overrided from CCarMessage.\n");
			    writer.write(" */\n");
		    	writer.write("alt_u32 " + classprefx + "getLength()\n");
		    	writer.write("{\n");
		    	writer.write("    return " + (current.getLength() + 4)+ ";\n");
		    	writer.write("}\n\n");
		    	
		    	
		    	writer.write("/*\n");
			    writer.write(" * Overrided from CCarMessage.\n");
			    writer.write(" */\n");
		    	writer.write("void " + classprefx + "parseMessage(alt_u8 *pMessage, int iLength)\n");
		    	writer.write("{\n");
		    	writer.write(dataBase.getParseMessageString(i));
		    	writer.write("}\n\n");
		    
			} catch (IOException ex) {
				  // report
			} finally {
			   try {writer.close();} catch (Exception ex) {}
			}
	    }
	}
	
	private static String getDateString()
	{
		DateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
		Date date = new Date();
		return dateFormat.format(date);
	}

}
